diff -rc ./block/Block.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/Block.java
*** ./block/Block.java	2021-04-03 11:27:21.871382000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/Block.java	2019-05-30 22:29:11.014358000 -0700
***************
*** 38,44 ****
      /** ResourceLocation for the Air block */
      private static final ResourceLocation AIR_ID = new ResourceLocation("air");
      public static final RegistryNamespacedDefaultedByKey<ResourceLocation, Block> blockRegistry = new RegistryNamespacedDefaultedByKey(AIR_ID);
!     public static final ObjectIntIdentityMap<IBlockState> BLOCK_STATE_IDS = new ObjectIntIdentityMap();
      private CreativeTabs displayOnCreativeTab;
      public static final Block.SoundType soundTypeStone = new Block.SoundType("stone", 1.0F, 1.0F);
  
--- 38,44 ----
      /** ResourceLocation for the Air block */
      private static final ResourceLocation AIR_ID = new ResourceLocation("air");
      public static final RegistryNamespacedDefaultedByKey<ResourceLocation, Block> blockRegistry = new RegistryNamespacedDefaultedByKey(AIR_ID);
!     public static final ObjectIntIdentityMap BLOCK_STATE_IDS = new ObjectIntIdentityMap();
      private CreativeTabs displayOnCreativeTab;
      public static final Block.SoundType soundTypeStone = new Block.SoundType("stone", 1.0F, 1.0F);
  
diff -rc ./block/BlockCactus.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockCactus.java
*** ./block/BlockCactus.java	2021-04-03 11:27:22.022496000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockCactus.java	2019-05-30 22:29:11.289200000 -0700
***************
*** 103,111 ****
  
      public boolean canBlockStay(World worldIn, BlockPos pos)
      {
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock().getMaterial().isSolid())
              {
                  return false;
              }
--- 103,111 ----
  
      public boolean canBlockStay(World worldIn, BlockPos pos)
      {
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock().getMaterial().isSolid())
              {
                  return false;
              }
diff -rc ./block/BlockChest.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockChest.java
*** ./block/BlockChest.java	2021-04-03 11:27:22.071499000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockChest.java	2019-05-30 22:29:11.379148000 -0700
***************
*** 91,99 ****
      {
          this.checkForSurroundingChests(worldIn, pos, state);
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset(enumfacing);
              IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
              if (iblockstate.getBlock() == this)
--- 91,99 ----
      {
          this.checkForSurroundingChests(worldIn, pos, state);
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
              IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
              if (iblockstate.getBlock() == this)
***************
*** 278,286 ****
      {
          EnumFacing enumfacing = null;
  
!         for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
          {
!             IBlockState iblockstate = worldIn.getBlockState(pos.offset(enumfacing1));
  
              if (iblockstate.getBlock() == this)
              {
--- 278,286 ----
      {
          EnumFacing enumfacing = null;
  
!         for (Object enumfacing1 : EnumFacing.Plane.HORIZONTAL)
          {
!             IBlockState iblockstate = worldIn.getBlockState(pos.offset((EnumFacing) enumfacing1));
  
              if (iblockstate.getBlock() == this)
              {
***************
*** 295,301 ****
                      break;
                  }
  
!                 enumfacing = enumfacing1;
              }
          }
  
--- 295,301 ----
                      break;
                  }
  
!                 enumfacing = (EnumFacing) enumfacing1;
              }
          }
  
***************
*** 385,393 ****
          }
          else
          {
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this)
                  {
                      return true;
                  }
--- 385,393 ----
          }
          else
          {
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock() == this)
                  {
                      return true;
                  }
***************
*** 470,478 ****
              }
              else
              {
!                 for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     BlockPos blockpos = pos.offset(enumfacing);
                      Block block = worldIn.getBlockState(blockpos).getBlock();
  
                      if (block == this)
--- 470,478 ----
              }
              else
              {
!                 for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
                      Block block = worldIn.getBlockState(blockpos).getBlock();
  
                      if (block == this)
diff -rc ./block/BlockDynamicLiquid.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockDynamicLiquid.java
*** ./block/BlockDynamicLiquid.java	2021-04-03 11:27:22.342498000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockDynamicLiquid.java	2019-05-30 22:29:11.725948000 -0700
***************
*** 41,49 ****
              int l = -100;
              this.adjacentSourceBlocks = 0;
  
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 l = this.checkAdjacentBlock(worldIn, pos.offset(enumfacing), l);
              }
  
              int i1 = l + j;
--- 41,49 ----
              int l = -100;
              this.adjacentSourceBlocks = 0;
  
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 l = this.checkAdjacentBlock(worldIn, pos.offset((EnumFacing) enumfacing), l);
              }
  
              int i1 = l + j;
***************
*** 178,188 ****
      {
          int i = 1000;
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
              if (enumfacing != calculateFlowCost)
              {
!                 BlockPos blockpos = pos.offset(enumfacing);
                  IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
                  if (!this.isBlocked(worldIn, blockpos, iblockstate) && (iblockstate.getBlock().getMaterial() != this.blockMaterial || ((Integer)iblockstate.getValue(LEVEL)).intValue() > 0))
--- 178,188 ----
      {
          int i = 1000;
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
              if (enumfacing != calculateFlowCost)
              {
!                 BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
                  IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
                  if (!this.isBlocked(worldIn, blockpos, iblockstate) && (iblockstate.getBlock().getMaterial() != this.blockMaterial || ((Integer)iblockstate.getValue(LEVEL)).intValue() > 0))
***************
*** 194,200 ****
  
                      if (distance < 4)
                      {
!                         int j = this.func_176374_a(worldIn, blockpos, distance + 1, enumfacing.getOpposite());
  
                          if (j < i)
                          {
--- 194,200 ----
  
                      if (distance < 4)
                      {
!                         int j = this.func_176374_a(worldIn, blockpos, distance + 1, ((EnumFacing) enumfacing).getOpposite());
  
                          if (j < i)
                          {
***************
*** 213,221 ****
          int i = 1000;
          Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset(enumfacing);
              IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
              if (!this.isBlocked(worldIn, blockpos, iblockstate) && (iblockstate.getBlock().getMaterial() != this.blockMaterial || ((Integer)iblockstate.getValue(LEVEL)).intValue() > 0))
--- 213,221 ----
          int i = 1000;
          Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
              IBlockState iblockstate = worldIn.getBlockState(blockpos);
  
              if (!this.isBlocked(worldIn, blockpos, iblockstate) && (iblockstate.getBlock().getMaterial() != this.blockMaterial || ((Integer)iblockstate.getValue(LEVEL)).intValue() > 0))
***************
*** 224,230 ****
  
                  if (this.isBlocked(worldIn, blockpos.down(), worldIn.getBlockState(blockpos.down())))
                  {
!                     j = this.func_176374_a(worldIn, blockpos, 1, enumfacing.getOpposite());
                  }
                  else
                  {
--- 224,230 ----
  
                  if (this.isBlocked(worldIn, blockpos.down(), worldIn.getBlockState(blockpos.down())))
                  {
!                     j = this.func_176374_a(worldIn, blockpos, 1, ((EnumFacing) enumfacing).getOpposite());
                  }
                  else
                  {
***************
*** 238,244 ****
  
                  if (j <= i)
                  {
!                     set.add(enumfacing);
                      i = j;
                  }
              }
--- 238,244 ----
  
                  if (j <= i)
                  {
!                     set.add((EnumFacing) enumfacing);
                      i = j;
                  }
              }
diff -rc ./block/BlockLadder.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLadder.java
*** ./block/BlockLadder.java	2021-04-03 11:27:22.776281000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLadder.java	2019-05-30 22:29:12.213110000 -0700
***************
*** 96,106 ****
          }
          else
          {
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (this.canBlockStay(worldIn, pos, enumfacing))
                  {
!                     return this.getDefaultState().withProperty(FACING, enumfacing);
                  }
              }
  
--- 96,106 ----
          }
          else
          {
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (this.canBlockStay(worldIn, pos, (EnumFacing) enumfacing))
                  {
!                     return this.getDefaultState().withProperty(FACING, (EnumFacing)enumfacing);
                  }
              }
  
diff -rc ./block/BlockLeavesBase.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLeavesBase.java
*** ./block/BlockLeavesBase.java	2021-04-03 11:27:22.808282000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLeavesBase.java	2019-05-30 22:29:12.246091000 -0700
***************
*** 1,13 ****
--- 1,18 ----
  package net.minecraft.block;
  
+ import java.util.IdentityHashMap;
+ import java.util.Map;
  import net.minecraft.block.material.Material;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.world.IBlockAccess;
+ import optifine.Config;
  
  public class BlockLeavesBase extends Block
  {
      protected boolean fancyGraphics;
+     private static final String __OBFID = "CL_00000326";
+     private static Map mapOriginalOpacity = new IdentityHashMap();
  
      protected BlockLeavesBase(Material materialIn, boolean fancyGraphics)
      {
***************
*** 25,30 ****
  
      public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
      {
!         return !this.fancyGraphics && worldIn.getBlockState(pos).getBlock() == this ? false : super.shouldSideBeRendered(worldIn, pos, side);
      }
  }
--- 30,54 ----
  
      public boolean shouldSideBeRendered(IBlockAccess worldIn, BlockPos pos, EnumFacing side)
      {
!         return Config.isCullFacesLeaves() && worldIn.getBlockState(pos).getBlock() == this ? false : super.shouldSideBeRendered(worldIn, pos, side);
!     }
! 
!     public static void setLightOpacity(Block p_setLightOpacity_0_, int p_setLightOpacity_1_)
!     {
!         if (!mapOriginalOpacity.containsKey(p_setLightOpacity_0_))
!         {
!             mapOriginalOpacity.put(p_setLightOpacity_0_, Integer.valueOf(p_setLightOpacity_0_.getLightOpacity()));
!         }
! 
!         p_setLightOpacity_0_.setLightOpacity(p_setLightOpacity_1_);
!     }
! 
!     public static void restoreLightOpacity(Block p_restoreLightOpacity_0_)
!     {
!         if (mapOriginalOpacity.containsKey(p_restoreLightOpacity_0_))
!         {
!             int i = ((Integer)mapOriginalOpacity.get(p_restoreLightOpacity_0_)).intValue();
!             setLightOpacity(p_restoreLightOpacity_0_, i);
!         }
      }
  }
diff -rc ./block/BlockLever.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLever.java
*** ./block/BlockLever.java	2021-04-03 11:27:22.822283000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLever.java	2019-05-30 22:29:12.259083000 -0700
***************
*** 86,96 ****
          }
          else
          {
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (enumfacing != facing && func_181090_a(worldIn, pos, enumfacing.getOpposite()))
                  {
!                     return iblockstate.withProperty(FACING, BlockLever.EnumOrientation.forFacings(enumfacing, placer.getHorizontalFacing()));
                  }
              }
  
--- 86,96 ----
          }
          else
          {
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (enumfacing != facing && func_181090_a(worldIn, pos, ((EnumFacing) enumfacing).getOpposite()))
                  {
!                     return iblockstate.withProperty(FACING, BlockLever.EnumOrientation.forFacings((EnumFacing) enumfacing, placer.getHorizontalFacing()));
                  }
              }
  
diff -rc ./block/BlockLiquid.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLiquid.java
*** ./block/BlockLiquid.java	2021-04-03 11:27:22.854281000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockLiquid.java	2019-05-30 22:29:12.280070000 -0700
***************
*** 152,160 ****
          Vec3 vec3 = new Vec3(0.0D, 0.0D, 0.0D);
          int i = this.getEffectiveFlowDecay(worldIn, pos);
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset(enumfacing);
              int j = this.getEffectiveFlowDecay(worldIn, blockpos);
  
              if (j < 0)
--- 152,160 ----
          Vec3 vec3 = new Vec3(0.0D, 0.0D, 0.0D);
          int i = this.getEffectiveFlowDecay(worldIn, pos);
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
              int j = this.getEffectiveFlowDecay(worldIn, blockpos);
  
              if (j < 0)
***************
*** 179,189 ****
  
          if (((Integer)worldIn.getBlockState(pos).getValue(LEVEL)).intValue() >= 8)
          {
!             for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
              {
!                 BlockPos blockpos1 = pos.offset(enumfacing1);
  
!                 if (this.isBlockSolid(worldIn, blockpos1, enumfacing1) || this.isBlockSolid(worldIn, blockpos1.up(), enumfacing1))
                  {
                      vec3 = vec3.normalize().addVector(0.0D, -6.0D, 0.0D);
                      break;
--- 179,189 ----
  
          if (((Integer)worldIn.getBlockState(pos).getValue(LEVEL)).intValue() >= 8)
          {
!             for (Object enumfacing1 : EnumFacing.Plane.HORIZONTAL)
              {
!                 BlockPos blockpos1 = pos.offset((EnumFacing) enumfacing1);
  
!                 if (this.isBlockSolid(worldIn, blockpos1, (EnumFacing) enumfacing1) || this.isBlockSolid(worldIn, blockpos1.up(), (EnumFacing) enumfacing1))
                  {
                      vec3 = vec3.normalize().addVector(0.0D, -6.0D, 0.0D);
                      break;
diff -rc ./block/BlockRailBase.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockRailBase.java
*** ./block/BlockRailBase.java	2021-04-03 11:27:23.334282000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockRailBase.java	2019-05-30 22:29:12.611879000 -0700
***************
*** 391,399 ****
          {
              int i = 0;
  
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (this.hasRailAt(this.pos.offset(enumfacing)))
                  {
                      ++i;
                  }
--- 391,399 ----
          {
              int i = 0;
  
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (this.hasRailAt(this.pos.offset((EnumFacing) enumfacing)))
                  {
                      ++i;
                  }
diff -rc ./block/BlockRedstoneWire.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockRedstoneWire.java
*** ./block/BlockRedstoneWire.java	2021-04-03 11:27:23.514333000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockRedstoneWire.java	2019-05-30 22:29:12.845746000 -0700
***************
*** 131,139 ****
  
          int l = 0;
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos1.offset(enumfacing);
              boolean flag = blockpos.getX() != pos2.getX() || blockpos.getZ() != pos2.getZ();
  
              if (flag)
--- 131,139 ----
  
          int l = 0;
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos1.offset((EnumFacing) enumfacing);
              boolean flag = blockpos.getX() != pos2.getX() || blockpos.getZ() != pos2.getZ();
  
              if (flag)
***************
*** 215,232 ****
          {
              this.updateSurroundingRedstone(worldIn, pos, state);
  
!             for (EnumFacing enumfacing : EnumFacing.Plane.VERTICAL)
              {
!                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
              }
  
!             for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
              {
                  this.notifyWireNeighborsOfStateChange(worldIn, pos.offset(enumfacing1));
              }
  
!             for (EnumFacing enumfacing2 : EnumFacing.Plane.HORIZONTAL)
              {
                  BlockPos blockpos = pos.offset(enumfacing2);
  
                  if (worldIn.getBlockState(blockpos).getBlock().isNormalCube())
--- 215,234 ----
          {
              this.updateSurroundingRedstone(worldIn, pos, state);
  
!             for (Object enumfacing : EnumFacing.Plane.VERTICAL)
              {
!                 worldIn.notifyNeighborsOfStateChange(pos.offset((EnumFacing) enumfacing), this);
              }
  
!             for (Object enumfacing10 : EnumFacing.Plane.HORIZONTAL)
              {
+                 EnumFacing enumfacing1 = (EnumFacing) enumfacing10;
                  this.notifyWireNeighborsOfStateChange(worldIn, pos.offset(enumfacing1));
              }
  
!             for (Object enumfacing20 : EnumFacing.Plane.HORIZONTAL)
              {
+                 EnumFacing enumfacing2 = (EnumFacing) enumfacing20;
                  BlockPos blockpos = pos.offset(enumfacing2);
  
                  if (worldIn.getBlockState(blockpos).getBlock().isNormalCube())
***************
*** 254,267 ****
  
              this.updateSurroundingRedstone(worldIn, pos, state);
  
!             for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
              {
!                 this.notifyWireNeighborsOfStateChange(worldIn, pos.offset(enumfacing1));
              }
  
!             for (EnumFacing enumfacing2 : EnumFacing.Plane.HORIZONTAL)
              {
!                 BlockPos blockpos = pos.offset(enumfacing2);
  
                  if (worldIn.getBlockState(blockpos).getBlock().isNormalCube())
                  {
--- 256,269 ----
  
              this.updateSurroundingRedstone(worldIn, pos, state);
  
!             for (Object enumfacing1 : EnumFacing.Plane.HORIZONTAL)
              {
!                 this.notifyWireNeighborsOfStateChange(worldIn, pos.offset((EnumFacing) enumfacing1));
              }
  
!             for (Object enumfacing2 : EnumFacing.Plane.HORIZONTAL)
              {
!                 BlockPos blockpos = pos.offset((EnumFacing) enumfacing2);
  
                  if (worldIn.getBlockState(blockpos).getBlock().isNormalCube())
                  {
***************
*** 342,352 ****
              {
                  EnumSet<EnumFacing> enumset = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
  
!                 for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     if (this.func_176339_d(worldIn, pos, enumfacing))
                      {
!                         enumset.add(enumfacing);
                      }
                  }
  
--- 344,354 ----
              {
                  EnumSet<EnumFacing> enumset = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
  
!                 for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     if (this.func_176339_d(worldIn, pos, (EnumFacing) enumfacing))
                      {
!                         enumset.add((EnumFacing) enumfacing);
                      }
                  }
  
diff -rc ./block/BlockReed.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockReed.java
*** ./block/BlockReed.java	2021-04-03 11:27:23.531335000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockReed.java	2019-05-30 22:29:12.860737000 -0700
***************
*** 74,82 ****
          }
          else
          {
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.getBlockState(pos.offset(enumfacing).down()).getBlock().getMaterial() == Material.water)
                  {
                      return true;
                  }
--- 74,82 ----
          }
          else
          {
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing).down()).getBlock().getMaterial() == Material.water)
                  {
                      return true;
                  }
diff -rc ./block/BlockStem.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockStem.java
*** ./block/BlockStem.java	2021-04-03 11:27:23.797332000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockStem.java	2019-05-30 22:29:13.097603000 -0700
***************
*** 49,59 ****
      {
          state = state.withProperty(FACING, EnumFacing.UP);
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop)
              {
!                 state = state.withProperty(FACING, enumfacing);
                  break;
              }
          }
--- 49,59 ----
      {
          state = state.withProperty(FACING, EnumFacing.UP);
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock() == this.crop)
              {
!                 state = state.withProperty(FACING, (EnumFacing) enumfacing);
                  break;
              }
          }
***************
*** 88,96 ****
                  }
                  else
                  {
!                     for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                      {
!                         if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock() == this.crop)
                          {
                              return;
                          }
--- 88,96 ----
                  }
                  else
                  {
!                     for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                      {
!                         if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock() == this.crop)
                          {
                              return;
                          }
diff -rc ./block/BlockTorch.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockTorch.java
*** ./block/BlockTorch.java	2021-04-03 11:27:23.887857000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockTorch.java	2019-05-30 22:29:13.175556000 -0700
***************
*** 100,110 ****
          }
          else
          {
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.isBlockNormalCube(pos.offset(enumfacing.getOpposite()), true))
                  {
!                     return this.getDefaultState().withProperty(FACING, enumfacing);
                  }
              }
  
--- 100,110 ----
          }
          else
          {
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 if (worldIn.isBlockNormalCube(pos.offset(((EnumFacing) enumfacing).getOpposite()), true))
                  {
!                     return this.getDefaultState().withProperty(FACING, (EnumFacing) enumfacing);
                  }
              }
  
diff -rc ./block/BlockTripWireHook.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockTripWireHook.java
*** ./block/BlockTripWireHook.java	2021-04-03 11:27:23.938603000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockTripWireHook.java	2019-05-30 22:29:13.220529000 -0700
***************
*** 71,79 ****
  
      public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
      {
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset(enumfacing)).getBlock().isNormalCube())
              {
                  return true;
              }
--- 71,79 ----
  
      public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
      {
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             if (worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock().isNormalCube())
              {
                  return true;
              }
diff -rc ./block/BlockVine.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockVine.java
*** ./block/BlockVine.java	2021-04-03 11:27:23.955600000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/BlockVine.java	2019-05-30 22:29:13.235521000 -0700
***************
*** 181,191 ****
      {
          IBlockState iblockstate = state;
  
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             PropertyBool propertybool = getPropertyFor(enumfacing);
  
!             if (((Boolean)state.getValue(propertybool)).booleanValue() && !this.canPlaceOn(worldIn.getBlockState(pos.offset(enumfacing)).getBlock()))
              {
                  IBlockState iblockstate1 = worldIn.getBlockState(pos.up());
  
--- 181,191 ----
      {
          IBlockState iblockstate = state;
  
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             PropertyBool propertybool = getPropertyFor((EnumFacing) enumfacing);
  
!             if (((Boolean)state.getValue(propertybool)).booleanValue() && !this.canPlaceOn(worldIn.getBlockState(pos.offset((EnumFacing) enumfacing)).getBlock()))
              {
                  IBlockState iblockstate1 = worldIn.getBlockState(pos.up());
  
***************
*** 278,288 ****
                      {
                          IBlockState iblockstate2 = state;
  
!                         for (EnumFacing enumfacing3 : EnumFacing.Plane.HORIZONTAL)
                          {
!                             if (rand.nextBoolean() || !this.canPlaceOn(worldIn.getBlockState(blockpos1.offset(enumfacing3)).getBlock()))
                              {
!                                 iblockstate2 = iblockstate2.withProperty(getPropertyFor(enumfacing3), Boolean.valueOf(false));
                              }
                          }
  
--- 278,288 ----
                      {
                          IBlockState iblockstate2 = state;
  
!                         for (Object enumfacing3 : EnumFacing.Plane.HORIZONTAL)
                          {
!                             if (rand.nextBoolean() || !this.canPlaceOn(worldIn.getBlockState(blockpos1.offset((EnumFacing) enumfacing3)).getBlock()))
                              {
!                                 iblockstate2 = iblockstate2.withProperty(getPropertyFor((EnumFacing) enumfacing3), Boolean.valueOf(false));
                              }
                          }
  
***************
*** 347,357 ****
                          {
                              IBlockState iblockstate1 = state;
  
!                             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                              {
                                  if (rand.nextBoolean())
                                  {
!                                     iblockstate1 = iblockstate1.withProperty(getPropertyFor(enumfacing), Boolean.valueOf(false));
                                  }
                              }
  
--- 347,357 ----
                          {
                              IBlockState iblockstate1 = state;
  
!                             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                              {
                                  if (rand.nextBoolean())
                                  {
!                                     iblockstate1 = iblockstate1.withProperty(getPropertyFor((EnumFacing) enumfacing), Boolean.valueOf(false));
                                  }
                              }
  
***************
*** 364,372 ****
                          {
                              IBlockState iblockstate3 = iblockstate;
  
!                             for (EnumFacing enumfacing5 : EnumFacing.Plane.HORIZONTAL)
                              {
!                                 PropertyBool propertybool = getPropertyFor(enumfacing5);
  
                                  if (rand.nextBoolean() && ((Boolean)state.getValue(propertybool)).booleanValue())
                                  {
--- 364,372 ----
                          {
                              IBlockState iblockstate3 = iblockstate;
  
!                             for (Object enumfacing5 : EnumFacing.Plane.HORIZONTAL)
                              {
!                                 PropertyBool propertybool = getPropertyFor((EnumFacing) enumfacing5);
  
                                  if (rand.nextBoolean() && ((Boolean)state.getValue(propertybool)).booleanValue())
                                  {
diff -rc ./block/material/MapColor.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/material/MapColor.java
*** ./block/material/MapColor.java	2021-04-03 11:27:24.052565000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/material/MapColor.java	2019-05-30 22:29:13.336353000 -0700
***************
*** 44,53 ****
      public static final MapColor netherrackColor = new MapColor(35, 7340544);
  
      /** Holds the color in RGB value that will be rendered on maps. */
!     public final int colorValue;
  
      /** Holds the index of the color used on map. */
      public final int colorIndex;
  
      private MapColor(int index, int color)
      {
--- 44,54 ----
      public static final MapColor netherrackColor = new MapColor(35, 7340544);
  
      /** Holds the color in RGB value that will be rendered on maps. */
!     public int colorValue;
  
      /** Holds the index of the color used on map. */
      public final int colorIndex;
+     private static final String __OBFID = "CL_00000544";
  
      private MapColor(int index, int color)
      {
***************
*** 65,95 ****
  
      public int func_151643_b(int p_151643_1_)
      {
!         int i = 220;
  
          if (p_151643_1_ == 3)
          {
!             i = 135;
          }
  
          if (p_151643_1_ == 2)
          {
!             i = 255;
          }
  
          if (p_151643_1_ == 1)
          {
!             i = 220;
          }
  
          if (p_151643_1_ == 0)
          {
!             i = 180;
          }
  
!         int j = (this.colorValue >> 16 & 255) * i / 255;
!         int k = (this.colorValue >> 8 & 255) * i / 255;
!         int l = (this.colorValue & 255) * i / 255;
!         return -16777216 | j << 16 | k << 8 | l;
      }
  }
--- 66,96 ----
  
      public int func_151643_b(int p_151643_1_)
      {
!         short short1 = 220;
  
          if (p_151643_1_ == 3)
          {
!             short1 = 135;
          }
  
          if (p_151643_1_ == 2)
          {
!             short1 = 255;
          }
  
          if (p_151643_1_ == 1)
          {
!             short1 = 220;
          }
  
          if (p_151643_1_ == 0)
          {
!             short1 = 180;
          }
  
!         int i = (this.colorValue >> 16 & 255) * short1 / 255;
!         int j = (this.colorValue >> 8 & 255) * short1 / 255;
!         int k = (this.colorValue & 255) * short1 / 255;
!         return -16777216 | i << 16 | j << 8 | k;
      }
  }
diff -rc ./block/state/BlockStateBase.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/state/BlockStateBase.java
*** ./block/state/BlockStateBase.java	2021-04-03 11:27:24.192597000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/block/state/BlockStateBase.java	2019-05-30 22:29:13.498773000 -0700
***************
*** 2,20 ****
  
  import com.google.common.base.Function;
  import com.google.common.base.Joiner;
  import com.google.common.collect.Iterables;
  import java.util.Collection;
  import java.util.Iterator;
  import java.util.Map.Entry;
  import net.minecraft.block.Block;
  import net.minecraft.block.properties.IProperty;
  
  public abstract class BlockStateBase implements IBlockState
  {
      private static final Joiner COMMA_JOINER = Joiner.on(',');
!     private static final Function<Entry<IProperty, Comparable>, String> MAP_ENTRY_TO_STRING = new Function<Entry<IProperty, Comparable>, String>()
      {
!         public String apply(Entry<IProperty, Comparable> p_apply_1_)
          {
              if (p_apply_1_ == null)
              {
--- 2,23 ----
  
  import com.google.common.base.Function;
  import com.google.common.base.Joiner;
+ import com.google.common.collect.ImmutableTable;
  import com.google.common.collect.Iterables;
  import java.util.Collection;
  import java.util.Iterator;
  import java.util.Map.Entry;
  import net.minecraft.block.Block;
  import net.minecraft.block.properties.IProperty;
+ import net.minecraft.util.ResourceLocation;
  
  public abstract class BlockStateBase implements IBlockState
  {
      private static final Joiner COMMA_JOINER = Joiner.on(',');
!     private static final Function MAP_ENTRY_TO_STRING = new Function()
      {
!         private static final String __OBFID = "CL_00002031";
!         public String apply(Entry p_apply_1_)
          {
              if (p_apply_1_ == null)
              {
***************
*** 26,41 ****
                  return iproperty.getName() + "=" + iproperty.getName((Comparable)p_apply_1_.getValue());
              }
          }
      };
  
!     public <T extends Comparable<T>> IBlockState cycleProperty(IProperty<T> property)
      {
!         return this.withProperty(property, cyclePropertyValue(property.getAllowedValues(), this.getValue(property)));
      }
  
!     protected static <T> T cyclePropertyValue(Collection<T> values, T currentValue)
      {
!         Iterator<T> iterator = values.iterator();
  
          while (iterator.hasNext())
          {
--- 29,100 ----
                  return iproperty.getName() + "=" + iproperty.getName((Comparable)p_apply_1_.getValue());
              }
          }
+         public Object apply(Object p_apply_1_)
+         {
+             return this.apply((Entry)p_apply_1_);
+         }
      };
+     private static final String __OBFID = "CL_00002032";
+     private int blockId = -1;
+     private int blockStateId = -1;
+     private int metadata = -1;
+     private ResourceLocation blockLocation = null;
  
!     public int getBlockId()
      {
!         if (this.blockId < 0)
!         {
!             this.blockId = Block.getIdFromBlock(this.getBlock());
!         }
! 
!         return this.blockId;
      }
  
!     public int getBlockStateId()
      {
!         if (this.blockStateId < 0)
!         {
!             this.blockStateId = Block.getStateId(this);
!         }
! 
!         return this.blockStateId;
!     }
! 
!     public int getMetadata()
!     {
!         if (this.metadata < 0)
!         {
!             this.metadata = this.getBlock().getMetaFromState(this);
!         }
! 
!         return this.metadata;
!     }
! 
!     public ResourceLocation getBlockLocation()
!     {
!         if (this.blockLocation == null)
!         {
!             this.blockLocation = (ResourceLocation)Block.blockRegistry.getNameForObject(this.getBlock());
!         }
! 
!         return this.blockLocation;
!     }
! 
!     /**
!      * Create a version of this BlockState with the given property cycled to the next value in order. If the property
!      * was at the highest possible value, it is set to the lowest one instead.
!      */
!     public IBlockState cycleProperty(IProperty property)
!     {
!         return this.withProperty(property, (Comparable)cyclePropertyValue(property.getAllowedValues(), this.getValue(property)));
!     }
! 
!     /**
!      * Helper method for cycleProperty.
!      */
!     protected static Object cyclePropertyValue(Collection values, Object currentValue)
!     {
!         Iterator iterator = values.iterator();
  
          while (iterator.hasNext())
          {
***************
*** 43,56 ****
              {
                  if (iterator.hasNext())
                  {
!                     return (T)iterator.next();
                  }
  
!                 return (T)values.iterator().next();
              }
          }
  
!         return (T)iterator.next();
      }
  
      public String toString()
--- 102,115 ----
              {
                  if (iterator.hasNext())
                  {
!                     return iterator.next();
                  }
  
!                 return values.iterator().next();
              }
          }
  
!         return iterator.next();
      }
  
      public String toString()
***************
*** 67,70 ****
--- 126,134 ----
  
          return stringbuilder.toString();
      }
+ 
+     public ImmutableTable<IProperty, Comparable, IBlockState> getPropertyValueTable()
+     {
+         return null;
+     }
  }
diff -rc ./client/audio/SoundManager.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/audio/SoundManager.java
*** ./client/audio/SoundManager.java	2021-04-03 11:27:24.478727000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/audio/SoundManager.java	2019-05-30 22:29:13.816279000 -0700
***************
*** 93,98 ****
--- 93,99 ----
      /**
       * Tries to add the paulscode library and the relevant codecs. If it fails, the master volume  will be set to zero.
       */
+ 
      private synchronized void loadSoundSystem()
      {
          if (!this.loaded)
diff -rc ./client/entity/AbstractClientPlayer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/entity/AbstractClientPlayer.java
*** ./client/entity/AbstractClientPlayer.java	2021-04-03 11:27:24.509671000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/entity/AbstractClientPlayer.java	2019-06-10 21:16:04.183440800 -0700
***************
*** 17,30 ****
--- 17,46 ----
  import net.minecraft.util.StringUtils;
  import net.minecraft.world.World;
  import net.minecraft.world.WorldSettings;
+ import optifine.CapeUtils;
+ import optifine.Config;
+ import optifine.PlayerConfigurations;
+ import optifine.Reflector;
  
  public abstract class AbstractClientPlayer extends EntityPlayer
  {
      private NetworkPlayerInfo playerInfo;
+     private ResourceLocation locationOfCape = null;
+     private String nameClear = null;
+     private static final String __OBFID = "CL_00000935";
  
      public AbstractClientPlayer(World worldIn, GameProfile playerProfile)
      {
          super(worldIn, playerProfile);
+         this.nameClear = playerProfile.getName();
+ 
+         if (this.nameClear != null && !this.nameClear.isEmpty())
+         {
+             this.nameClear = StringUtils.stripControlCodes(this.nameClear);
+         }
+ 
+         CapeUtils.downloadCape(this);
+         PlayerConfigurations.getPlayerConfiguration(this);
      }
  
      /**
***************
*** 74,95 ****
  
      public ResourceLocation getLocationCape()
      {
!         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
!         return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
      }
  
      public static ThreadDownloadImageData getDownloadImageSkin(ResourceLocation resourceLocationIn, String username)
      {
          TextureManager texturemanager = Minecraft.getMinecraft().getTextureManager();
!         ITextureObject itextureobject = texturemanager.getTexture(resourceLocationIn);
  
!         if (itextureobject == null)
          {
!             itextureobject = new ThreadDownloadImageData((File)null, String.format("http://skins.minecraft.net/MinecraftSkins/%s.png", new Object[] {StringUtils.stripControlCodes(username)}), DefaultPlayerSkin.getDefaultSkin(getOfflineUUID(username)), new ImageBufferDownload());
!             texturemanager.loadTexture(resourceLocationIn, itextureobject);
          }
  
!         return (ThreadDownloadImageData)itextureobject;
      }
  
      /**
--- 90,122 ----
  
      public ResourceLocation getLocationCape()
      {
!         if (!Config.isShowCapes())
!         {
!             return null;
!         }
!         else if (this.locationOfCape != null)
!         {
!             return this.locationOfCape;
!         }
!         else
!         {
!             NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
!             return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
!         }
      }
  
      public static ThreadDownloadImageData getDownloadImageSkin(ResourceLocation resourceLocationIn, String username)
      {
          TextureManager texturemanager = Minecraft.getMinecraft().getTextureManager();
!         Object object = texturemanager.getTexture(resourceLocationIn);
  
!         if (object == null)
          {
!             object = new ThreadDownloadImageData((File)null, String.format("http://skins.minecraft.net/MinecraftSkins/%s.png", new Object[] {StringUtils.stripControlCodes(username)}), DefaultPlayerSkin.getDefaultSkin(getOfflineUUID(username)), new ImageBufferDownload());
!             texturemanager.loadTexture(resourceLocationIn, (ITextureObject)object);
          }
  
!         return (ThreadDownloadImageData)object;
      }
  
      /**
***************
*** 140,145 ****
              f *= 1.0F - f1 * 0.15F;
          }
  
!         return f;
      }
  }
--- 167,187 ----
              f *= 1.0F - f1 * 0.15F;
          }
  
!         return Reflector.ForgeHooksClient_getOffsetFOV.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getOffsetFOV, new Object[] {this, Float.valueOf(f)}): f;
!     }
! 
!     public String getNameClear()
!     {
!         return this.nameClear;
!     }
! 
!     public ResourceLocation getLocationOfCape()
!     {
!         return this.locationOfCape;
!     }
! 
!     public void setLocationOfCape(ResourceLocation p_setLocationOfCape_1_)
!     {
!         this.locationOfCape = p_setLocationOfCape_1_;
      }
  }
diff -rc ./client/entity/EntityPlayerSP.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/entity/EntityPlayerSP.java
*** ./client/entity/EntityPlayerSP.java	2021-04-03 11:27:24.532677000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/entity/EntityPlayerSP.java	2021-04-03 12:28:10.356124100 -0700
***************
*** 1,5 ****
--- 1,6 ----
  package net.minecraft.client.entity;
  
+ import clientname.command.CommandManager;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.audio.MovingSoundMinecartRiding;
  import net.minecraft.client.audio.PositionedSoundRecord;
***************
*** 48,53 ****
--- 49,55 ----
  import net.minecraft.util.EnumParticleTypes;
  import net.minecraft.util.IChatComponent;
  import net.minecraft.util.MovementInput;
+ import net.minecraft.util.MovementInputFromOptions;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.IInteractionObject;
  import net.minecraft.world.World;
***************
*** 100,106 ****
      private int positionUpdateTicks;
      private boolean hasValidHealth;
      private String clientBrand;
!     public MovementInput movementInput;
      protected Minecraft mc;
  
      /**
--- 102,108 ----
      private int positionUpdateTicks;
      private boolean hasValidHealth;
      private String clientBrand;
!     public MovementInputFromOptions movementInput;
      protected Minecraft mc;
  
      /**
***************
*** 295,301 ****
       */
      public void sendChatMessage(String message)
      {
!         this.sendQueue.addToSendQueue(new C01PacketChatMessage(message));
      }
  
      /**
--- 297,305 ----
       */
      public void sendChatMessage(String message)
      {
!     	if(!CommandManager.getInstance().tryExecute(message)) {
!     		this.sendQueue.addToSendQueue(new C01PacketChatMessage(message));
!     	}
      }
  
      /**
diff -rc ./client/gui/FontRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/FontRenderer.java
*** ./client/gui/FontRenderer.java	2021-04-03 11:27:24.557591000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/FontRenderer.java	2020-11-12 22:13:01.962243100 -0800
***************
*** 3,14 ****
  import com.ibm.icu.text.ArabicShaping;
  import com.ibm.icu.text.ArabicShapingException;
  import com.ibm.icu.text.Bidi;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import java.io.InputStream;
  import java.util.Arrays;
  import java.util.List;
! import java.util.Locale;
  import java.util.Random;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.GlStateManager;
--- 3,16 ----
  import com.ibm.icu.text.ArabicShaping;
  import com.ibm.icu.text.ArabicShapingException;
  import com.ibm.icu.text.Bidi;
+ 
+ import java.awt.Color;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import java.io.InputStream;
  import java.util.Arrays;
  import java.util.List;
! import java.util.Properties;
  import java.util.Random;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.GlStateManager;
***************
*** 21,26 ****
--- 23,32 ----
  import net.minecraft.client.resources.IResourceManagerReloadListener;
  import net.minecraft.client.settings.GameSettings;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.FontUtils;
+ 
  import org.apache.commons.io.IOUtils;
  import org.lwjgl.opengl.GL11;
  
***************
*** 29,35 ****
      private static final ResourceLocation[] unicodePageLocations = new ResourceLocation[256];
  
      /** Array of width of all the characters in default.png */
!     private int[] charWidth = new int[256];
  
      /** the height in pixels of default text */
      public int FONT_HEIGHT = 9;
--- 35,41 ----
      private static final ResourceLocation[] unicodePageLocations = new ResourceLocation[256];
  
      /** Array of width of all the characters in default.png */
!     private float[] charWidth = new float[256];
  
      /** the height in pixels of default text */
      public int FONT_HEIGHT = 9;
***************
*** 45,51 ****
       * drop shadows.
       */
      private int[] colorCode = new int[32];
!     private final ResourceLocation locationFontTexture;
  
      /** The RenderEngine used to load and setup glyph textures. */
      private final TextureManager renderEngine;
--- 51,57 ----
       * drop shadows.
       */
      private int[] colorCode = new int[32];
!     private ResourceLocation locationFontTexture;
  
      /** The RenderEngine used to load and setup glyph textures. */
      private final TextureManager renderEngine;
***************
*** 99,111 ****
       * Set if the "m" style (strikethrough) is active in currently rendering string
       */
      private boolean strikethroughStyle;
  
      public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode)
      {
          this.locationFontTexture = location;
          this.renderEngine = textureManagerIn;
          this.unicodeFlag = unicode;
!         textureManagerIn.bindTexture(this.locationFontTexture);
  
          for (int i = 0; i < 32; ++i)
          {
--- 105,128 ----
       * Set if the "m" style (strikethrough) is active in currently rendering string
       */
      private boolean strikethroughStyle;
+     private static final String __OBFID = "CL_00000660";
+     public GameSettings gameSettings;
+     public ResourceLocation locationFontTextureBase;
+     public boolean enabled = true;
+     public float offsetBold = 1.0F;
+     
+     //Rainbow text hue
+     private float hue = 0;
  
      public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode)
      {
+         this.gameSettings = gameSettingsIn;
+         this.locationFontTextureBase = location;
          this.locationFontTexture = location;
          this.renderEngine = textureManagerIn;
          this.unicodeFlag = unicode;
!         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
!         this.bindTexture(this.locationFontTexture);
  
          for (int i = 0; i < 32; ++i)
          {
***************
*** 144,150 ****
--- 161,175 ----
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
+         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
+ 
+         for (int i = 0; i < unicodePageLocations.length; ++i)
+         {
+             unicodePageLocations[i] = null;
+         }
+ 
          this.readFontTexture();
+         this.readGlyphSizes();
      }
  
      private void readFontTexture()
***************
*** 153,196 ****
  
          try
          {
!             bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture).getInputStream());
          }
          catch (IOException ioexception)
          {
              throw new RuntimeException(ioexception);
          }
  
          int i = bufferedimage.getWidth();
          int j = bufferedimage.getHeight();
!         int[] aint = new int[i * j];
!         bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
!         int k = j / 16;
!         int l = i / 16;
!         int i1 = 1;
!         float f = 8.0F / (float)l;
  
!         for (int j1 = 0; j1 < 256; ++j1)
          {
!             int k1 = j1 % 16;
!             int l1 = j1 / 16;
  
!             if (j1 == 32)
!             {
!                 this.charWidth[j1] = 3 + i1;
!             }
  
!             int i2;
  
!             for (i2 = l - 1; i2 >= 0; --i2)
              {
!                 int j2 = k1 * l + i2;
                  boolean flag = true;
  
!                 for (int k2 = 0; k2 < k && flag; ++k2)
                  {
!                     int l2 = (l1 * l + k2) * i;
  
!                     if ((aint[j2 + l2] >> 24 & 255) != 0)
                      {
                          flag = false;
                      }
--- 178,226 ----
  
          try
          {
!             bufferedimage = TextureUtil.readBufferedImage(this.getResourceInputStream(this.locationFontTexture));
          }
          catch (IOException ioexception)
          {
              throw new RuntimeException(ioexception);
          }
  
+         Properties properties = FontUtils.readFontProperties(this.locationFontTexture);
          int i = bufferedimage.getWidth();
          int j = bufferedimage.getHeight();
!         int k = i / 16;
!         int l = j / 16;
!         float f = (float)i / 128.0F;
!         float f1 = Config.limit(f, 1.0F, 2.0F);
!         this.offsetBold = 1.0F / f1;
!         float f2 = FontUtils.readFloat(properties, "offsetBold", -1.0F);
  
!         if (f2 >= 0.0F)
          {
!             this.offsetBold = f2;
!         }
  
!         int[] aint = new int[i * j];
!         bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
  
!         for (int i1 = 0; i1 < 256; ++i1)
!         {
!             int j1 = i1 % 16;
!             int k1 = i1 / 16;
!             int l1 = 0;
  
!             for (l1 = k - 1; l1 >= 0; --l1)
              {
!                 int i2 = j1 * k + l1;
                  boolean flag = true;
  
!                 for (int j2 = 0; j2 < l && flag; ++j2)
                  {
!                     int k2 = (k1 * l + j2) * i;
!                     int l2 = aint[i2 + k2];
!                     int i3 = l2 >> 24 & 255;
  
!                     if (i3 > 16)
                      {
                          flag = false;
                      }
***************
*** 202,210 ****
                  }
              }
  
!             ++i2;
!             this.charWidth[j1] = (int)(0.5D + (double)((float)i2 * f)) + i1;
          }
      }
  
      private void readGlyphSizes()
--- 232,253 ----
                  }
              }
  
!             if (i1 == 32)
!             {
!                 if (k <= 8)
!                 {
!                     l1 = (int)(2.0F * f);
!                 }
!                 else
!                 {
!                     l1 = (int)(1.5F * f);
!                 }
!             }
! 
!             this.charWidth[i1] = (float)(l1 + 1) / f + 1.0F;
          }
+ 
+         FontUtils.readCustomCharWidths(properties, this.charWidth);
      }
  
      private void readGlyphSizes()
***************
*** 213,219 ****
  
          try
          {
!             inputstream = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin")).getInputStream();
              inputstream.read(this.glyphWidth);
          }
          catch (IOException ioexception)
--- 256,262 ----
  
          try
          {
!             inputstream = this.getResourceInputStream(new ResourceLocation("font/glyph_sizes.bin"));
              inputstream.read(this.glyphWidth);
          }
          catch (IOException ioexception)
***************
*** 230,236 ****
      {
          if (p_181559_1_ == 32)
          {
!             return 4.0F;
          }
          else
          {
--- 273,279 ----
      {
          if (p_181559_1_ == 32)
          {
!             return !this.unicodeFlag ? this.charWidth[p_181559_1_] : 4.0F;
          }
          else
          {
***************
*** 247,266 ****
          int i = p_78266_1_ % 16 * 8;
          int j = p_78266_1_ / 16 * 8;
          int k = p_78266_2_ ? 1 : 0;
!         this.renderEngine.bindTexture(this.locationFontTexture);
!         int l = this.charWidth[p_78266_1_];
!         float f = (float)l - 0.01F;
          GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
          GL11.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
          GL11.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
          GL11.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
          GL11.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
!         GL11.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F);
!         GL11.glVertex3f(this.posX + f - 1.0F + (float)k, this.posY, 0.0F);
!         GL11.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
!         GL11.glVertex3f(this.posX + f - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
          GL11.glEnd();
!         return (float)l;
      }
  
      private ResourceLocation getUnicodePageLocation(int p_111271_1_)
--- 290,309 ----
          int i = p_78266_1_ % 16 * 8;
          int j = p_78266_1_ / 16 * 8;
          int k = p_78266_2_ ? 1 : 0;
!         this.bindTexture(this.locationFontTexture);
!         float f = this.charWidth[p_78266_1_];
!         float f1 = 7.99F;
          GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
          GL11.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
          GL11.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
          GL11.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
          GL11.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
!         GL11.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, (float)j / 128.0F);
!         GL11.glVertex3f(this.posX + f1 - 1.0F + (float)k, this.posY, 0.0F);
!         GL11.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
!         GL11.glVertex3f(this.posX + f1 - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
          GL11.glEnd();
!         return f;
      }
  
      private ResourceLocation getUnicodePageLocation(int p_111271_1_)
***************
*** 268,273 ****
--- 311,317 ----
          if (unicodePageLocations[p_111271_1_] == null)
          {
              unicodePageLocations[p_111271_1_] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", new Object[] {Integer.valueOf(p_111271_1_)}));
+             unicodePageLocations[p_111271_1_] = FontUtils.getHdFontLocation(unicodePageLocations[p_111271_1_]);
          }
  
          return unicodePageLocations[p_111271_1_];
***************
*** 278,284 ****
       */
      private void loadGlyphTexture(int p_78257_1_)
      {
!         this.renderEngine.bindTexture(this.getUnicodePageLocation(p_78257_1_));
      }
  
      /**
--- 322,328 ----
       */
      private void loadGlyphTexture(int p_78257_1_)
      {
!         this.bindTexture(this.getUnicodePageLocation(p_78257_1_));
      }
  
      /**
***************
*** 296,301 ****
--- 340,346 ----
              this.loadGlyphTexture(i);
              int j = this.glyphWidth[p_78277_1_] >>> 4;
              int k = this.glyphWidth[p_78277_1_] & 15;
+             j = j & 15;
              float f = (float)j;
              float f1 = (float)(k + 1);
              float f2 = (float)(p_78277_1_ % 16 * 16) + f;
***************
*** 329,335 ****
       */
      public int drawString(String text, int x, int y, int color)
      {
!         return this.drawString(text, (float)x, (float)y, color, false);
      }
  
      /**
--- 374,380 ----
       */
      public int drawString(String text, int x, int y, int color)
      {
!         return !this.enabled ? 0 : this.drawString(text, (float)x, (float)y, color, false);
      }
  
      /**
***************
*** 337,343 ****
       */
      public int drawString(String text, float x, float y, int color, boolean dropShadow)
      {
!         GlStateManager.enableAlpha();
          this.resetStyles();
          int i;
  
--- 382,388 ----
       */
      public int drawString(String text, float x, float y, int color, boolean dropShadow)
      {
!         this.enableAlpha();
          this.resetStyles();
          int i;
  
***************
*** 386,400 ****
      /**
       * Render a single line string at the current (posX,posY) and update posX
       */
!     private void renderStringAtPos(String p_78255_1_, boolean p_78255_2_)
      {
!         for (int i = 0; i < p_78255_1_.length(); ++i)
          {
!             char c0 = p_78255_1_.charAt(i);
  
!             if (c0 == 167 && i + 1 < p_78255_1_.length())
              {
!                 int i1 = "0123456789abcdefklmnor".indexOf(p_78255_1_.toLowerCase(Locale.ENGLISH).charAt(i + 1));
  
                  if (i1 < 16)
                  {
--- 431,445 ----
      /**
       * Render a single line string at the current (posX,posY) and update posX
       */
!     private void renderStringAtPos(String textToBeRendered, boolean dropShadow)
      {
!         for (int i = 0; i < textToBeRendered.length(); ++i)
          {
!             char c0 = textToBeRendered.charAt(i);
  
!             if (c0 == 167 && i + 1 < textToBeRendered.length())
              {
!                 int i1 = "0123456789abcdefklmnors".indexOf(textToBeRendered.toLowerCase().charAt(i + 1));
  
                  if (i1 < 16)
                  {
***************
*** 409,422 ****
                          i1 = 15;
                      }
  
!                     if (p_78255_2_)
                      {
                          i1 += 16;
                      }
  
                      int j1 = this.colorCode[i1];
                      this.textColor = j1;
!                     GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
                  }
                  else if (i1 == 16)
                  {
--- 454,473 ----
                          i1 = 15;
                      }
  
!                     if (dropShadow)
                      {
                          i1 += 16;
                      }
  
                      int j1 = this.colorCode[i1];
+ 
+                     if (Config.isCustomColors())
+                     {
+                         j1 = CustomColors.getTextColor(i1, j1);
+                     }
+ 
                      this.textColor = j1;
!                     this.setColor((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
                  }
                  else if (i1 == 16)
                  {
***************
*** 445,451 ****
                      this.strikethroughStyle = false;
                      this.underlineStyle = false;
                      this.italicStyle = false;
!                     GlStateManager.color(this.red, this.blue, this.green, this.alpha);
                  }
  
                  ++i;
--- 496,514 ----
                      this.strikethroughStyle = false;
                      this.underlineStyle = false;
                      this.italicStyle = false;
!                     this.setColor(this.red, this.blue, this.green, this.alpha);
!                 }
!                 else if(i1 == 22 && !dropShadow) {
!                 	
!                 	Color color = Color.getHSBColor(this.hue, 1, 1);
!                 	this.setColor(color.getRed() / 255.0f, color.getGreen() / 255.0f, color.getBlue() / 255.0f, this.alpha);
!                 	
!                 	if(this.hue > 1) {
!                 		this.hue = 0;
!                 	}
!                 	
!                 	this.hue += 0.001;
!                 	
                  }
  
                  ++i;
***************
*** 473,480 ****
                      c0 = c1;
                  }
  
!                 float f1 = this.unicodeFlag ? 0.5F : 1.0F;
!                 boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && p_78255_2_;
  
                  if (flag)
                  {
--- 536,543 ----
                      c0 = c1;
                  }
  
!                 float f1 = j != -1 && !this.unicodeFlag ? this.offsetBold : 0.5F;
!                 boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && dropShadow;
  
                  if (flag)
                  {
***************
*** 509,515 ****
                          this.posY += f1;
                      }
  
!                     ++f;
                  }
  
                  if (this.strikethroughStyle)
--- 572,578 ----
                          this.posY += f1;
                      }
  
!                     f += f1;
                  }
  
                  if (this.strikethroughStyle)
***************
*** 541,547 ****
                      GlStateManager.enableTexture2D();
                  }
  
!                 this.posX += (float)((int)f);
              }
          }
      }
--- 604,610 ----
                      GlStateManager.enableTexture2D();
                  }
  
!                 this.posX += f;
              }
          }
      }
***************
*** 590,596 ****
              this.blue = (float)(color >> 8 & 255) / 255.0F;
              this.green = (float)(color & 255) / 255.0F;
              this.alpha = (float)(color >> 24 & 255) / 255.0F;
!             GlStateManager.color(this.red, this.blue, this.green, this.alpha);
              this.posX = x;
              this.posY = y;
              this.renderStringAtPos(text, dropShadow);
--- 653,659 ----
              this.blue = (float)(color >> 8 & 255) / 255.0F;
              this.green = (float)(color & 255) / 255.0F;
              this.alpha = (float)(color >> 24 & 255) / 255.0F;
!             this.setColor(this.red, this.blue, this.green, this.alpha);
              this.posX = x;
              this.posY = y;
              this.renderStringAtPos(text, dropShadow);
***************
*** 609,626 ****
          }
          else
          {
!             int i = 0;
              boolean flag = false;
  
!             for (int j = 0; j < text.length(); ++j)
              {
!                 char c0 = text.charAt(j);
!                 int k = this.getCharWidth(c0);
  
!                 if (k < 0 && j < text.length() - 1)
                  {
!                     ++j;
!                     c0 = text.charAt(j);
  
                      if (c0 != 108 && c0 != 76)
                      {
--- 672,689 ----
          }
          else
          {
!             float f = 0.0F;
              boolean flag = false;
  
!             for (int i = 0; i < text.length(); ++i)
              {
!                 char c0 = text.charAt(i);
!                 float f1 = this.getCharWidthFloat(c0);
  
!                 if (f1 < 0.0F && i < text.length() - 1)
                  {
!                     ++i;
!                     c0 = text.charAt(i);
  
                      if (c0 != 108 && c0 != 76)
                      {
***************
*** 634,651 ****
                          flag = true;
                      }
  
!                     k = 0;
                  }
  
!                 i += k;
  
!                 if (flag && k > 0)
                  {
!                     ++i;
                  }
              }
  
!             return i;
          }
      }
  
--- 697,714 ----
                          flag = true;
                      }
  
!                     f1 = 0.0F;
                  }
  
!                 f += f1;
  
!                 if (flag && f1 > 0.0F)
                  {
!                     f += this.unicodeFlag ? 1.0F : this.offsetBold;
                  }
              }
  
!             return (int)f;
          }
      }
  
***************
*** 654,692 ****
       */
      public int getCharWidth(char character)
      {
!         if (character == 167)
          {
!             return -1;
          }
!         else if (character == 32)
          {
!             return 4;
          }
          else
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(character);
  
!             if (character > 0 && i != -1 && !this.unicodeFlag)
              {
                  return this.charWidth[i];
              }
!             else if (this.glyphWidth[character] != 0)
              {
!                 int j = this.glyphWidth[character] >>> 4;
!                 int k = this.glyphWidth[character] & 15;
! 
!                 if (k > 7)
!                 {
!                     k = 15;
!                     j = 0;
!                 }
! 
                  ++k;
!                 return (k - j) / 2 + 1;
              }
              else
              {
!                 return 0;
              }
          }
      }
--- 717,754 ----
       */
      public int getCharWidth(char character)
      {
!         return Math.round(this.getCharWidthFloat(character));
!     }
! 
!     private float getCharWidthFloat(char p_getCharWidthFloat_1_)
!     {
!         if (p_getCharWidthFloat_1_ == 167)
          {
!             return -1.0F;
          }
!         else if (p_getCharWidthFloat_1_ == 32)
          {
!             return this.charWidth[32];
          }
          else
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(p_getCharWidthFloat_1_);
  
!             if (p_getCharWidthFloat_1_ > 0 && i != -1 && !this.unicodeFlag)
              {
                  return this.charWidth[i];
              }
!             else if (this.glyphWidth[p_getCharWidthFloat_1_] != 0)
              {
!                 int j = this.glyphWidth[p_getCharWidthFloat_1_] >>> 4;
!                 int k = this.glyphWidth[p_getCharWidthFloat_1_] & 15;
!                 j = j & 15;
                  ++k;
!                 return (float)((k - j) / 2 + 1);
              }
              else
              {
!                 return 0.0F;
              }
          }
      }
***************
*** 705,720 ****
      public String trimStringToWidth(String text, int width, boolean reverse)
      {
          StringBuilder stringbuilder = new StringBuilder();
!         int i = 0;
!         int j = reverse ? text.length() - 1 : 0;
!         int k = reverse ? -1 : 1;
          boolean flag = false;
          boolean flag1 = false;
  
!         for (int l = j; l >= 0 && l < text.length() && i < width; l += k)
          {
!             char c0 = text.charAt(l);
!             int i1 = this.getCharWidth(c0);
  
              if (flag)
              {
--- 767,782 ----
      public String trimStringToWidth(String text, int width, boolean reverse)
      {
          StringBuilder stringbuilder = new StringBuilder();
!         float f = 0.0F;
!         int i = reverse ? text.length() - 1 : 0;
!         int j = reverse ? -1 : 1;
          boolean flag = false;
          boolean flag1 = false;
  
!         for (int k = i; k >= 0 && k < text.length() && f < (float)width; k += j)
          {
!             char c0 = text.charAt(k);
!             float f1 = this.getCharWidthFloat(c0);
  
              if (flag)
              {
***************
*** 732,752 ****
                      flag1 = true;
                  }
              }
!             else if (i1 < 0)
              {
                  flag = true;
              }
              else
              {
!                 i += i1;
  
                  if (flag1)
                  {
!                     ++i;
                  }
              }
  
!             if (i > width)
              {
                  break;
              }
--- 794,814 ----
                      flag1 = true;
                  }
              }
!             else if (f1 < 0.0F)
              {
                  flag = true;
              }
              else
              {
!                 f += f1;
  
                  if (flag1)
                  {
!                     ++f;
                  }
              }
  
!             if (f > (float)width)
              {
                  break;
              }
***************
*** 794,802 ****
       */
      private void renderSplitString(String str, int x, int y, int wrapWidth, boolean addShadow)
      {
!         for (String s : this.listFormattedStringToWidth(str, wrapWidth))
          {
!             this.renderStringAligned(s, x, y, wrapWidth, this.textColor, addShadow);
              y += this.FONT_HEIGHT;
          }
      }
--- 856,864 ----
       */
      private void renderSplitString(String str, int x, int y, int wrapWidth, boolean addShadow)
      {
!         for (Object s : this.listFormattedStringToWidth(str, wrapWidth))
          {
!             this.renderStringAligned((String) s, x, y, wrapWidth, this.textColor, addShadow);
              y += this.FONT_HEIGHT;
          }
      }
***************
*** 835,843 ****
          this.bidiFlag = bidiFlagIn;
      }
  
!     public List<String> listFormattedStringToWidth(String str, int wrapWidth)
      {
!         return Arrays.<String>asList(this.wrapFormattedStringToWidth(str, wrapWidth).split("\n"));
      }
  
      /**
--- 897,908 ----
          this.bidiFlag = bidiFlagIn;
      }
  
!     /**
!      * Breaks a string into a list of pieces that will fit a specified width.
!      */
!     public List listFormattedStringToWidth(String str, int wrapWidth)
      {
!         return Arrays.asList(this.wrapFormattedStringToWidth(str, wrapWidth).split("\n"));
      }
  
      /**
***************
*** 867,904 ****
      private int sizeStringToWidth(String str, int wrapWidth)
      {
          int i = str.length();
          int j = 0;
!         int k = 0;
!         int l = -1;
  
!         for (boolean flag = false; k < i; ++k)
          {
!             char c0 = str.charAt(k);
  
              switch (c0)
              {
                  case '\n':
!                     --k;
                      break;
  
                  case ' ':
!                     l = k;
  
                  default:
!                     j += this.getCharWidth(c0);
  
                      if (flag)
                      {
!                         ++j;
                      }
  
                      break;
  
                  case '\u00a7':
!                     if (k < i - 1)
                      {
!                         ++k;
!                         char c1 = str.charAt(k);
  
                          if (c1 != 108 && c1 != 76)
                          {
--- 932,969 ----
      private int sizeStringToWidth(String str, int wrapWidth)
      {
          int i = str.length();
+         float f = 0.0F;
          int j = 0;
!         int k = -1;
  
!         for (boolean flag = false; j < i; ++j)
          {
!             char c0 = str.charAt(j);
  
              switch (c0)
              {
                  case '\n':
!                     --j;
                      break;
  
                  case ' ':
!                     k = j;
  
                  default:
!                     f += this.getCharWidthFloat(c0);
  
                      if (flag)
                      {
!                         ++f;
                      }
  
                      break;
  
                  case '\u00a7':
!                     if (j < i - 1)
                      {
!                         ++j;
!                         char c1 = str.charAt(j);
  
                          if (c1 != 108 && c1 != 76)
                          {
***************
*** 916,933 ****
  
              if (c0 == 10)
              {
!                 ++k;
!                 l = k;
                  break;
              }
  
!             if (j > wrapWidth)
              {
                  break;
              }
          }
  
!         return k != i && l != -1 && l < k ? l : k;
      }
  
      /**
--- 981,998 ----
  
              if (c0 == 10)
              {
!                 ++j;
!                 k = j;
                  break;
              }
  
!             if (f > (float)wrapWidth)
              {
                  break;
              }
          }
  
!         return j != i && k != -1 && k < j ? k : j;
      }
  
      /**
***************
*** 985,990 ****
  
      public int getColorCode(char character)
      {
!         return this.colorCode["0123456789abcdef".indexOf(character)];
      }
  }
--- 1050,1091 ----
  
      public int getColorCode(char character)
      {
!         int i = "0123456789abcdef".indexOf(character);
! 
!         if (i >= 0 && i < this.colorCode.length)
!         {
!             int j = this.colorCode[i];
! 
!             if (Config.isCustomColors())
!             {
!                 j = CustomColors.getTextColor(i, j);
!             }
! 
!             return j;
!         }
!         else
!         {
!             return 16777215;
!         }
!     }
! 
!     protected void setColor(float p_setColor_1_, float p_setColor_2_, float p_setColor_3_, float p_setColor_4_)
!     {
!         GlStateManager.color(p_setColor_1_, p_setColor_2_, p_setColor_3_, p_setColor_4_);
!     }
! 
!     protected void enableAlpha()
!     {
!         GlStateManager.enableAlpha();
!     }
! 
!     protected void bindTexture(ResourceLocation p_bindTexture_1_)
!     {
!         this.renderEngine.bindTexture(p_bindTexture_1_);
!     }
! 
!     protected InputStream getResourceInputStream(ResourceLocation p_getResourceInputStream_1_) throws IOException
!     {
!         return Minecraft.getMinecraft().getResourceManager().getResource(p_getResourceInputStream_1_).getInputStream();
      }
  }
diff -rc ./client/gui/GuiChat.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiChat.java
*** ./client/gui/GuiChat.java	2021-04-03 11:27:24.605779000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiChat.java	2021-03-24 10:53:07.479301400 -0700
***************
*** 6,11 ****
--- 6,12 ----
  import net.minecraft.network.play.client.C14PacketTabComplete;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.ChatComponentText;
+ import net.minecraft.util.EnumChatFormatting;
  import net.minecraft.util.IChatComponent;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.MovingObjectPosition;
***************
*** 329,335 ****
  
              String s1 = this.inputField.getText().substring(this.inputField.func_146197_a(-1, this.inputField.getCursorPosition(), false));
              String s2 = StringUtils.getCommonPrefix(p_146406_1_);
- 
              if (s2.length() > 0 && !s1.equalsIgnoreCase(s2))
              {
                  this.inputField.deleteFromCursor(this.inputField.func_146197_a(-1, this.inputField.getCursorPosition(), false) - this.inputField.getCursorPosition());
--- 330,335 ----
diff -rc ./client/gui/GuiIngame.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiIngame.java
*** ./client/gui/GuiIngame.java	2021-04-03 11:27:24.789241000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiIngame.java	2021-03-25 23:08:30.310881200 -0700
***************
*** 3,10 ****
  import com.google.common.base.Predicate;
  import com.google.common.collect.Iterables;
  import com.google.common.collect.Lists;
  import java.util.Collection;
- import java.util.List;
  import java.util.Random;
  import net.minecraft.block.material.Material;
  import net.minecraft.client.Minecraft;
--- 3,13 ----
  import com.google.common.base.Predicate;
  import com.google.common.collect.Iterables;
  import com.google.common.collect.Lists;
+ 
+ import clientname.event.impl.RenderGameOverlayEvent;
+ 
+ import java.util.ArrayList;
  import java.util.Collection;
  import java.util.Random;
  import net.minecraft.block.material.Material;
  import net.minecraft.client.Minecraft;
***************
*** 41,46 ****
--- 44,51 ----
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.StringUtils;
  import net.minecraft.world.border.WorldBorder;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class GuiIngame extends Gui
  {
***************
*** 90,95 ****
--- 95,101 ----
  
      /** Used with updateCounter to make the heart bar flash */
      private long healthUpdateCounter = 0L;
+     private static final String __OBFID = "CL_00000661";
  
      public GuiIngame(Minecraft mcIn)
      {
***************
*** 118,129 ****
          this.mc.entityRenderer.setupOverlayRendering();
          GlStateManager.enableBlend();
  
!         if (Minecraft.isFancyGraphicsEnabled())
          {
              this.renderVignette(this.mc.thePlayer.getBrightness(partialTicks), scaledresolution);
          }
          else
          {
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          }
  
--- 124,136 ----
          this.mc.entityRenderer.setupOverlayRendering();
          GlStateManager.enableBlend();
  
!         if (Config.isVignetteEnabled())
          {
              this.renderVignette(this.mc.thePlayer.getBrightness(partialTicks), scaledresolution);
          }
          else
          {
+             GlStateManager.enableDepth();
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          }
  
***************
*** 157,163 ****
          this.mc.getTextureManager().bindTexture(icons);
          GlStateManager.enableBlend();
  
!         if (this.showCrosshair())
          {
              GlStateManager.tryBlendFuncSeparate(775, 769, 1, 0);
              GlStateManager.enableAlpha();
--- 164,170 ----
          this.mc.getTextureManager().bindTexture(icons);
          GlStateManager.enableBlend();
  
!         if (this.showCrosshair() && this.mc.gameSettings.thirdPersonView < 1)
          {
              GlStateManager.tryBlendFuncSeparate(775, 769, 1, 0);
              GlStateManager.enableAlpha();
***************
*** 181,195 ****
              this.mc.mcProfiler.startSection("sleep");
              GlStateManager.disableDepth();
              GlStateManager.disableAlpha();
!             int j1 = this.mc.thePlayer.getSleepTimer();
!             float f1 = (float)j1 / 100.0F;
  
!             if (f1 > 1.0F)
              {
!                 f1 = 1.0F - (float)(j1 - 100) / 10.0F;
              }
  
!             int k = (int)(220.0F * f1) << 24 | 1052704;
              drawRect(0, 0, i, j, k);
              GlStateManager.enableAlpha();
              GlStateManager.enableDepth();
--- 188,202 ----
              this.mc.mcProfiler.startSection("sleep");
              GlStateManager.disableDepth();
              GlStateManager.disableAlpha();
!             int l = this.mc.thePlayer.getSleepTimer();
!             float f2 = (float)l / 100.0F;
  
!             if (f2 > 1.0F)
              {
!                 f2 = 1.0F - (float)(l - 100) / 10.0F;
              }
  
!             int k = (int)(220.0F * f2) << 24 | 1052704;
              drawRect(0, 0, i, j, k);
              GlStateManager.enableAlpha();
              GlStateManager.enableDepth();
***************
*** 197,211 ****
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         int k1 = i / 2 - 91;
  
          if (this.mc.thePlayer.isRidingHorse())
          {
!             this.renderHorseJumpBar(scaledresolution, k1);
          }
          else if (this.mc.playerController.gameIsSurvivalOrAdventure())
          {
!             this.renderExpBar(scaledresolution, k1);
          }
  
          if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator())
--- 204,218 ----
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         int i2 = i / 2 - 91;
  
          if (this.mc.thePlayer.isRidingHorse())
          {
!             this.renderHorseJumpBar(scaledresolution, i2);
          }
          else if (this.mc.playerController.gameIsSurvivalOrAdventure())
          {
!             this.renderExpBar(scaledresolution, i2);
          }
  
          if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator())
***************
*** 230,257 ****
          if (this.recordPlayingUpFor > 0)
          {
              this.mc.mcProfiler.startSection("overlayMessage");
!             float f2 = (float)this.recordPlayingUpFor - partialTicks;
!             int l1 = (int)(f2 * 255.0F / 20.0F);
  
!             if (l1 > 255)
              {
!                 l1 = 255;
              }
  
!             if (l1 > 8)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate((float)(i / 2), (float)(j - 68), 0.0F);
                  GlStateManager.enableBlend();
                  GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!                 int l = 16777215;
  
                  if (this.recordIsPlaying)
                  {
!                     l = MathHelper.func_181758_c(f2 / 50.0F, 0.7F, 0.6F) & 16777215;
                  }
  
!                 this.getFontRenderer().drawString(this.recordPlaying, -this.getFontRenderer().getStringWidth(this.recordPlaying) / 2, -4, l + (l1 << 24 & -16777216));
                  GlStateManager.disableBlend();
                  GlStateManager.popMatrix();
              }
--- 237,264 ----
          if (this.recordPlayingUpFor > 0)
          {
              this.mc.mcProfiler.startSection("overlayMessage");
!             float f3 = (float)this.recordPlayingUpFor - partialTicks;
!             int k1 = (int)(f3 * 255.0F / 20.0F);
  
!             if (k1 > 255)
              {
!                 k1 = 255;
              }
  
!             if (k1 > 8)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate((float)(i / 2), (float)(j - 68), 0.0F);
                  GlStateManager.enableBlend();
                  GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!                 int i1 = 16777215;
  
                  if (this.recordIsPlaying)
                  {
!                     i1 = MathHelper.func_181758_c(f3 / 50.0F, 0.7F, 0.6F) & 16777215;
                  }
  
!                 this.getFontRenderer().drawString(this.recordPlaying, -this.getFontRenderer().getStringWidth(this.recordPlaying) / 2, -4, i1 + (k1 << 24 & -16777216));
                  GlStateManager.disableBlend();
                  GlStateManager.popMatrix();
              }
***************
*** 262,284 ****
          if (this.field_175195_w > 0)
          {
              this.mc.mcProfiler.startSection("titleAndSubtitle");
!             float f3 = (float)this.field_175195_w - partialTicks;
!             int i2 = 255;
  
              if (this.field_175195_w > this.field_175193_B + this.field_175192_A)
              {
!                 float f4 = (float)(this.field_175199_z + this.field_175192_A + this.field_175193_B) - f3;
!                 i2 = (int)(f4 * 255.0F / (float)this.field_175199_z);
              }
  
              if (this.field_175195_w <= this.field_175193_B)
              {
!                 i2 = (int)(f3 * 255.0F / (float)this.field_175193_B);
              }
  
!             i2 = MathHelper.clamp_int(i2, 0, 255);
  
!             if (i2 > 8)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate((float)(i / 2), (float)(j / 2), 0.0F);
--- 269,291 ----
          if (this.field_175195_w > 0)
          {
              this.mc.mcProfiler.startSection("titleAndSubtitle");
!             float f4 = (float)this.field_175195_w - partialTicks;
!             int l1 = 255;
  
              if (this.field_175195_w > this.field_175193_B + this.field_175192_A)
              {
!                 float f1 = (float)(this.field_175199_z + this.field_175192_A + this.field_175193_B) - f4;
!                 l1 = (int)(f1 * 255.0F / (float)this.field_175199_z);
              }
  
              if (this.field_175195_w <= this.field_175193_B)
              {
!                 l1 = (int)(f4 * 255.0F / (float)this.field_175193_B);
              }
  
!             l1 = MathHelper.clamp_int(l1, 0, 255);
  
!             if (l1 > 8)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate((float)(i / 2), (float)(j / 2), 0.0F);
***************
*** 286,292 ****
                  GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
                  GlStateManager.pushMatrix();
                  GlStateManager.scale(4.0F, 4.0F, 4.0F);
!                 int j2 = i2 << 24 & -16777216;
                  this.getFontRenderer().drawString(this.field_175201_x, (float)(-this.getFontRenderer().getStringWidth(this.field_175201_x) / 2), -10.0F, 16777215 | j2, true);
                  GlStateManager.popMatrix();
                  GlStateManager.pushMatrix();
--- 293,299 ----
                  GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
                  GlStateManager.pushMatrix();
                  GlStateManager.scale(4.0F, 4.0F, 4.0F);
!                 int j2 = l1 << 24 & -16777216;
                  this.getFontRenderer().drawString(this.field_175201_x, (float)(-this.getFontRenderer().getStringWidth(this.field_175201_x) / 2), -10.0F, 16777215 | j2, true);
                  GlStateManager.popMatrix();
                  GlStateManager.pushMatrix();
***************
*** 306,316 ****
  
          if (scoreplayerteam != null)
          {
!             int i1 = scoreplayerteam.getChatFormat().getColorIndex();
  
!             if (i1 >= 0)
              {
!                 scoreobjective = scoreboard.getObjectiveInDisplaySlot(3 + i1);
              }
          }
  
--- 313,323 ----
  
          if (scoreplayerteam != null)
          {
!             int j1 = scoreplayerteam.getChatFormat().getColorIndex();
  
!             if (j1 >= 0)
              {
!                 scoreobjective = scoreboard.getObjectiveInDisplaySlot(3 + j1);
              }
          }
  
***************
*** 345,350 ****
--- 352,359 ----
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.disableLighting();
          GlStateManager.enableAlpha();
+         
+         new RenderGameOverlayEvent().call();
      }
  
      protected void renderTooltip(ScaledResolution sr, float partialTicks)
***************
*** 383,396 ****
          this.mc.mcProfiler.startSection("jumpBar");
          this.mc.getTextureManager().bindTexture(Gui.icons);
          float f = this.mc.thePlayer.getHorseJumpPower();
!         int i = 182;
!         int j = (int)(f * (float)(i + 1));
!         int k = p_175186_1_.getScaledHeight() - 32 + 3;
!         this.drawTexturedModalRect(p_175186_2_, k, 0, 84, i, 5);
  
!         if (j > 0)
          {
!             this.drawTexturedModalRect(p_175186_2_, k, 0, 89, j, 5);
          }
  
          this.mc.mcProfiler.endSection();
--- 392,405 ----
          this.mc.mcProfiler.startSection("jumpBar");
          this.mc.getTextureManager().bindTexture(Gui.icons);
          float f = this.mc.thePlayer.getHorseJumpPower();
!         short short1 = 182;
!         int i = (int)(f * (float)(short1 + 1));
!         int j = p_175186_1_.getScaledHeight() - 32 + 3;
!         this.drawTexturedModalRect(p_175186_2_, j, 0, 84, short1, 5);
  
!         if (i > 0)
          {
!             this.drawTexturedModalRect(p_175186_2_, j, 0, 89, i, 5);
          }
  
          this.mc.mcProfiler.endSection();
***************
*** 404,417 ****
  
          if (i > 0)
          {
!             int j = 182;
!             int k = (int)(this.mc.thePlayer.experience * (float)(j + 1));
!             int l = p_175176_1_.getScaledHeight() - 32 + 3;
!             this.drawTexturedModalRect(p_175176_2_, l, 0, 64, j, 5);
  
              if (k > 0)
              {
!                 this.drawTexturedModalRect(p_175176_2_, l, 0, 69, k, 5);
              }
          }
  
--- 413,426 ----
  
          if (i > 0)
          {
!             short short1 = 182;
!             int k = (int)(this.mc.thePlayer.experience * (float)(short1 + 1));
!             int j = p_175176_1_.getScaledHeight() - 32 + 3;
!             this.drawTexturedModalRect(p_175176_2_, j, 0, 64, short1, 5);
  
              if (k > 0)
              {
!                 this.drawTexturedModalRect(p_175176_2_, j, 0, 69, k, 5);
              }
          }
  
***************
*** 420,435 ****
          if (this.mc.thePlayer.experienceLevel > 0)
          {
              this.mc.mcProfiler.startSection("expLevel");
!             int k1 = 8453920;
              String s = "" + this.mc.thePlayer.experienceLevel;
!             int l1 = (p_175176_1_.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
!             int i1 = p_175176_1_.getScaledHeight() - 31 - 4;
!             int j1 = 0;
!             this.getFontRenderer().drawString(s, l1 + 1, i1, 0);
!             this.getFontRenderer().drawString(s, l1 - 1, i1, 0);
!             this.getFontRenderer().drawString(s, l1, i1 + 1, 0);
!             this.getFontRenderer().drawString(s, l1, i1 - 1, 0);
!             this.getFontRenderer().drawString(s, l1, i1, k1);
              this.mc.mcProfiler.endSection();
          }
      }
--- 429,450 ----
          if (this.mc.thePlayer.experienceLevel > 0)
          {
              this.mc.mcProfiler.startSection("expLevel");
!             int j1 = 8453920;
! 
!             if (Config.isCustomColors())
!             {
!                 j1 = CustomColors.getExpBarTextColor(j1);
!             }
! 
              String s = "" + this.mc.thePlayer.experienceLevel;
!             int i1 = (p_175176_1_.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
!             int l = p_175176_1_.getScaledHeight() - 31 - 4;
!             boolean flag = false;
!             this.getFontRenderer().drawString(s, i1 + 1, l, 0);
!             this.getFontRenderer().drawString(s, i1 - 1, l, 0);
!             this.getFontRenderer().drawString(s, i1, l + 1, 0);
!             this.getFontRenderer().drawString(s, i1, l - 1, 0);
!             this.getFontRenderer().drawString(s, i1, l, j1);
              this.mc.mcProfiler.endSection();
          }
      }
***************
*** 536,592 ****
      private void renderScoreboard(ScoreObjective p_180475_1_, ScaledResolution p_180475_2_)
      {
          Scoreboard scoreboard = p_180475_1_.getScoreboard();
!         Collection<Score> collection = scoreboard.getSortedScores(p_180475_1_);
!         List<Score> list = Lists.newArrayList(Iterables.filter(collection, new Predicate<Score>()
          {
              public boolean apply(Score p_apply_1_)
              {
                  return p_apply_1_.getPlayerName() != null && !p_apply_1_.getPlayerName().startsWith("#");
              }
          }));
  
!         if (list.size() > 15)
          {
!             collection = Lists.newArrayList(Iterables.skip(list, collection.size() - 15));
          }
          else
          {
!             collection = list;
          }
  
          int i = this.getFontRenderer().getStringWidth(p_180475_1_.getDisplayName());
  
!         for (Score score : collection)
          {
!             ScorePlayerTeam scoreplayerteam = scoreboard.getPlayersTeam(score.getPlayerName());
!             String s = ScorePlayerTeam.formatPlayerName(scoreplayerteam, score.getPlayerName()) + ": " + EnumChatFormatting.RED + score.getScorePoints();
              i = Math.max(i, this.getFontRenderer().getStringWidth(s));
          }
  
!         int i1 = collection.size() * this.getFontRenderer().FONT_HEIGHT;
!         int j1 = p_180475_2_.getScaledHeight() / 2 + i1 / 3;
!         int k1 = 3;
!         int l1 = p_180475_2_.getScaledWidth() - i - k1;
!         int j = 0;
! 
!         for (Score score1 : collection)
!         {
!             ++j;
!             ScorePlayerTeam scoreplayerteam1 = scoreboard.getPlayersTeam(score1.getPlayerName());
!             String s1 = ScorePlayerTeam.formatPlayerName(scoreplayerteam1, score1.getPlayerName());
!             String s2 = EnumChatFormatting.RED + "" + score1.getScorePoints();
!             int k = j1 - j * this.getFontRenderer().FONT_HEIGHT;
!             int l = p_180475_2_.getScaledWidth() - k1 + 2;
!             drawRect(l1 - 2, k, l, k + this.getFontRenderer().FONT_HEIGHT, 1342177280);
!             this.getFontRenderer().drawString(s1, l1, k, 553648127);
!             this.getFontRenderer().drawString(s2, l - this.getFontRenderer().getStringWidth(s2), k, 553648127);
  
!             if (j == collection.size())
              {
                  String s3 = p_180475_1_.getDisplayName();
!                 drawRect(l1 - 2, k - this.getFontRenderer().FONT_HEIGHT - 1, l, k - 1, 1610612736);
!                 drawRect(l1 - 2, k - 1, l, k, 1342177280);
!                 this.getFontRenderer().drawString(s3, l1 + i / 2 - this.getFontRenderer().getStringWidth(s3) / 2, k - this.getFontRenderer().FONT_HEIGHT, 553648127);
              }
          }
      }
--- 551,613 ----
      private void renderScoreboard(ScoreObjective p_180475_1_, ScaledResolution p_180475_2_)
      {
          Scoreboard scoreboard = p_180475_1_.getScoreboard();
!         Collection collection = scoreboard.getSortedScores(p_180475_1_);
!         ArrayList arraylist = Lists.newArrayList(Iterables.filter(collection, new Predicate()
          {
+             private static final String __OBFID = "CL_00001958";
              public boolean apply(Score p_apply_1_)
              {
                  return p_apply_1_.getPlayerName() != null && !p_apply_1_.getPlayerName().startsWith("#");
              }
+             public boolean apply(Object p_apply_1_)
+             {
+                 return this.apply((Score)p_apply_1_);
+             }
          }));
+         ArrayList arraylist1;
  
!         if (arraylist.size() > 15)
          {
!             arraylist1 = Lists.newArrayList(Iterables.skip(arraylist, collection.size() - 15));
          }
          else
          {
!             arraylist1 = arraylist;
          }
  
          int i = this.getFontRenderer().getStringWidth(p_180475_1_.getDisplayName());
  
!         for (Object score : arraylist1)
          {
!             ScorePlayerTeam scoreplayerteam = scoreboard.getPlayersTeam(((Score) score).getPlayerName());
!             String s = ScorePlayerTeam.formatPlayerName(scoreplayerteam, ((Score) score).getPlayerName()) + ": " + EnumChatFormatting.RED + ((Score) score).getScorePoints();
              i = Math.max(i, this.getFontRenderer().getStringWidth(s));
          }
  
!         int j1 = arraylist1.size() * this.getFontRenderer().FONT_HEIGHT;
!         int k1 = p_180475_2_.getScaledHeight() / 2 + j1 / 3;
!         byte b0 = 3;
!         int j = p_180475_2_.getScaledWidth() - i - b0;
!         int k = 0;
! 
!         for (Object score1 : arraylist1)
!         {
!             ++k;
!             ScorePlayerTeam scoreplayerteam1 = scoreboard.getPlayersTeam(((Score) score1).getPlayerName());
!             String s1 = ScorePlayerTeam.formatPlayerName(scoreplayerteam1, ((Score) score1).getPlayerName());
!             String s2 = EnumChatFormatting.RED + "" + ((Score) score1).getScorePoints();
!             int l = k1 - k * this.getFontRenderer().FONT_HEIGHT;
!             int i1 = p_180475_2_.getScaledWidth() - b0 + 2;
!             drawRect(j - 2, l, i1, l + this.getFontRenderer().FONT_HEIGHT, 1342177280);
!             this.getFontRenderer().drawString(s1, j, l, 553648127);
!             //this.getFontRenderer().drawString(s2, i1 - this.getFontRenderer().getStringWidth(s2), l, 553648127);
  
!             if (k == arraylist1.size())
              {
                  String s3 = p_180475_1_.getDisplayName();
!                 drawRect(j - 2, l - this.getFontRenderer().FONT_HEIGHT - 1, i1, l - 1, 1610612736);
!                 drawRect(j - 2, l - 1, i1, l, 1342177280);
!                 this.getFontRenderer().drawString(s3, j + i / 2 - this.getFontRenderer().getStringWidth(s3) / 2, l - this.getFontRenderer().FONT_HEIGHT, 553648127);
              }
          }
      }
***************
*** 669,754 ****
  
              this.mc.mcProfiler.endStartSection("health");
  
!             for (int i6 = MathHelper.ceiling_float_int((f + f1) / 2.0F) - 1; i6 >= 0; --i6)
              {
!                 int j6 = 16;
  
                  if (entityplayer.isPotionActive(Potion.poison))
                  {
!                     j6 += 36;
                  }
                  else if (entityplayer.isPotionActive(Potion.wither))
                  {
!                     j6 += 72;
                  }
  
!                 int k3 = 0;
  
                  if (flag)
                  {
!                     k3 = 1;
                  }
  
!                 int l3 = MathHelper.ceiling_float_int((float)(i6 + 1) / 10.0F) - 1;
!                 int i4 = i1 + i6 % 10 * 8;
!                 int j4 = k1 - l3 * i2;
  
                  if (i <= 4)
                  {
!                     j4 += this.rand.nextInt(2);
                  }
  
!                 if (i6 == l2)
                  {
!                     j4 -= 2;
                  }
  
!                 int k4 = 0;
  
                  if (entityplayer.worldObj.getWorldInfo().isHardcoreModeEnabled())
                  {
!                     k4 = 5;
                  }
  
!                 this.drawTexturedModalRect(i4, j4, 16 + k3 * 9, 9 * k4, 9, 9);
  
                  if (flag)
                  {
!                     if (i6 * 2 + 1 < j)
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 54, 9 * k4, 9, 9);
                      }
  
!                     if (i6 * 2 + 1 == j)
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 63, 9 * k4, 9, 9);
                      }
                  }
  
!                 if (f2 > 0.0F)
                  {
!                     if (f2 == f1 && f1 % 2.0F == 1.0F)
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 153, 9 * k4, 9, 9);
                      }
!                     else
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 144, 9 * k4, 9, 9);
                      }
- 
-                     f2 -= 2.0F;
                  }
                  else
                  {
!                     if (i6 * 2 + 1 < i)
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 36, 9 * k4, 9, 9);
                      }
! 
!                     if (i6 * 2 + 1 == i)
                      {
!                         this.drawTexturedModalRect(i4, j4, j6 + 45, 9 * k4, 9, 9);
                      }
                  }
              }
  
--- 690,775 ----
  
              this.mc.mcProfiler.endStartSection("health");
  
!             for (int j5 = MathHelper.ceiling_float_int((f + f1) / 2.0F) - 1; j5 >= 0; --j5)
              {
!                 int k5 = 16;
  
                  if (entityplayer.isPotionActive(Potion.poison))
                  {
!                     k5 += 36;
                  }
                  else if (entityplayer.isPotionActive(Potion.wither))
                  {
!                     k5 += 72;
                  }
  
!                 byte b0 = 0;
  
                  if (flag)
                  {
!                     b0 = 1;
                  }
  
!                 int k3 = MathHelper.ceiling_float_int((float)(j5 + 1) / 10.0F) - 1;
!                 int l3 = i1 + j5 % 10 * 8;
!                 int i4 = k1 - k3 * i2;
  
                  if (i <= 4)
                  {
!                     i4 += this.rand.nextInt(2);
                  }
  
!                 if (j5 == l2)
                  {
!                     i4 -= 2;
                  }
  
!                 byte b1 = 0;
  
                  if (entityplayer.worldObj.getWorldInfo().isHardcoreModeEnabled())
                  {
!                     b1 = 5;
                  }
  
!                 this.drawTexturedModalRect(l3, i4, 16 + b0 * 9, 9 * b1, 9, 9);
  
                  if (flag)
                  {
!                     if (j5 * 2 + 1 < j)
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 54, 9 * b1, 9, 9);
                      }
  
!                     if (j5 * 2 + 1 == j)
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 63, 9 * b1, 9, 9);
                      }
                  }
  
!                 if (f2 <= 0.0F)
                  {
!                     if (j5 * 2 + 1 < i)
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 36, 9 * b1, 9, 9);
                      }
! 
!                     if (j5 * 2 + 1 == i)
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 45, 9 * b1, 9, 9);
                      }
                  }
                  else
                  {
!                     if (f2 == f1 && f1 % 2.0F == 1.0F)
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 153, 9 * b1, 9, 9);
                      }
!                     else
                      {
!                         this.drawTexturedModalRect(l3, i4, k5 + 144, 9 * b1, 9, 9);
                      }
+ 
+                     f2 -= 2.0F;
                  }
              }
  
***************
*** 758,809 ****
              {
                  this.mc.mcProfiler.endStartSection("food");
  
!                 for (int k6 = 0; k6 < 10; ++k6)
                  {
!                     int i7 = k1;
!                     int l7 = 16;
!                     int j8 = 0;
  
                      if (entityplayer.isPotionActive(Potion.hunger))
                      {
!                         l7 += 36;
!                         j8 = 13;
                      }
  
                      if (entityplayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (k * 3 + 1) == 0)
                      {
!                         i7 = k1 + (this.rand.nextInt(3) - 1);
                      }
  
                      if (flag1)
                      {
!                         j8 = 1;
                      }
  
!                     int i9 = j1 - k6 * 8 - 9;
!                     this.drawTexturedModalRect(i9, i7, 16 + j8 * 9, 27, 9, 9);
  
                      if (flag1)
                      {
!                         if (k6 * 2 + 1 < l)
                          {
!                             this.drawTexturedModalRect(i9, i7, l7 + 54, 27, 9, 9);
                          }
  
!                         if (k6 * 2 + 1 == l)
                          {
!                             this.drawTexturedModalRect(i9, i7, l7 + 63, 27, 9, 9);
                          }
                      }
  
!                     if (k6 * 2 + 1 < k)
                      {
!                         this.drawTexturedModalRect(i9, i7, l7 + 36, 27, 9, 9);
                      }
  
!                     if (k6 * 2 + 1 == k)
                      {
!                         this.drawTexturedModalRect(i9, i7, l7 + 45, 27, 9, 9);
                      }
                  }
              }
--- 779,830 ----
              {
                  this.mc.mcProfiler.endStartSection("food");
  
!                 for (int l5 = 0; l5 < 10; ++l5)
                  {
!                     int i8 = k1;
!                     int j6 = 16;
!                     byte b4 = 0;
  
                      if (entityplayer.isPotionActive(Potion.hunger))
                      {
!                         j6 += 36;
!                         b4 = 13;
                      }
  
                      if (entityplayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (k * 3 + 1) == 0)
                      {
!                         i8 = k1 + (this.rand.nextInt(3) - 1);
                      }
  
                      if (flag1)
                      {
!                         b4 = 1;
                      }
  
!                     int k7 = j1 - l5 * 8 - 9;
!                     this.drawTexturedModalRect(k7, i8, 16 + b4 * 9, 27, 9, 9);
  
                      if (flag1)
                      {
!                         if (l5 * 2 + 1 < l)
                          {
!                             this.drawTexturedModalRect(k7, i8, j6 + 54, 27, 9, 9);
                          }
  
!                         if (l5 * 2 + 1 == l)
                          {
!                             this.drawTexturedModalRect(k7, i8, j6 + 63, 27, 9, 9);
                          }
                      }
  
!                     if (l5 * 2 + 1 < k)
                      {
!                         this.drawTexturedModalRect(k7, i8, j6 + 36, 27, 9, 9);
                      }
  
!                     if (l5 * 2 + 1 == k)
                      {
!                         this.drawTexturedModalRect(k7, i8, j6 + 45, 27, 9, 9);
                      }
                  }
              }
***************
*** 811,857 ****
              {
                  this.mc.mcProfiler.endStartSection("mountHealth");
                  EntityLivingBase entitylivingbase = (EntityLivingBase)entity;
!                 int j7 = (int)Math.ceil((double)entitylivingbase.getHealth());
                  float f3 = entitylivingbase.getMaxHealth();
!                 int k8 = (int)(f3 + 0.5F) / 2;
  
!                 if (k8 > 30)
                  {
!                     k8 = 30;
                  }
  
!                 int j9 = k1;
  
!                 for (int k9 = 0; k8 > 0; k9 += 20)
                  {
!                     int l4 = Math.min(k8, 10);
!                     k8 -= l4;
  
!                     for (int i5 = 0; i5 < l4; ++i5)
                      {
!                         int j5 = 52;
!                         int k5 = 0;
  
                          if (flag1)
                          {
!                             k5 = 1;
                          }
  
!                         int l5 = j1 - i5 * 8 - 9;
!                         this.drawTexturedModalRect(l5, j9, j5 + k5 * 9, 9, 9, 9);
  
!                         if (i5 * 2 + 1 + k9 < j7)
                          {
!                             this.drawTexturedModalRect(l5, j9, j5 + 36, 9, 9, 9);
                          }
  
!                         if (i5 * 2 + 1 + k9 == j7)
                          {
!                             this.drawTexturedModalRect(l5, j9, j5 + 45, 9, 9, 9);
                          }
                      }
  
!                     j9 -= 10;
                  }
              }
  
--- 832,878 ----
              {
                  this.mc.mcProfiler.endStartSection("mountHealth");
                  EntityLivingBase entitylivingbase = (EntityLivingBase)entity;
!                 int l7 = (int)Math.ceil((double)entitylivingbase.getHealth());
                  float f3 = entitylivingbase.getMaxHealth();
!                 int l6 = (int)(f3 + 0.5F) / 2;
  
!                 if (l6 > 30)
                  {
!                     l6 = 30;
                  }
  
!                 int j7 = k1;
  
!                 for (int j4 = 0; l6 > 0; j4 += 20)
                  {
!                     int k4 = Math.min(l6, 10);
!                     l6 -= k4;
  
!                     for (int l4 = 0; l4 < k4; ++l4)
                      {
!                         byte b2 = 52;
!                         byte b3 = 0;
  
                          if (flag1)
                          {
!                             b3 = 1;
                          }
  
!                         int i5 = j1 - l4 * 8 - 9;
!                         this.drawTexturedModalRect(i5, j7, b2 + b3 * 9, 9, 9, 9);
  
!                         if (l4 * 2 + 1 + j4 < l7)
                          {
!                             this.drawTexturedModalRect(i5, j7, b2 + 36, 9, 9, 9);
                          }
  
!                         if (l4 * 2 + 1 + j4 == l7)
                          {
!                             this.drawTexturedModalRect(i5, j7, b2 + 45, 9, 9, 9);
                          }
                      }
  
!                     j7 -= 10;
                  }
              }
  
***************
*** 859,877 ****
  
              if (entityplayer.isInsideOfMaterial(Material.water))
              {
!                 int l6 = this.mc.thePlayer.getAir();
!                 int k7 = MathHelper.ceiling_double_int((double)(l6 - 2) * 10.0D / 300.0D);
!                 int i8 = MathHelper.ceiling_double_int((double)l6 * 10.0D / 300.0D) - k7;
  
!                 for (int l8 = 0; l8 < k7 + i8; ++l8)
                  {
!                     if (l8 < k7)
                      {
!                         this.drawTexturedModalRect(j1 - l8 * 8 - 9, j2, 16, 18, 9, 9);
                      }
                      else
                      {
!                         this.drawTexturedModalRect(j1 - l8 * 8 - 9, j2, 25, 18, 9, 9);
                      }
                  }
              }
--- 880,898 ----
  
              if (entityplayer.isInsideOfMaterial(Material.water))
              {
!                 int i6 = this.mc.thePlayer.getAir();
!                 int j8 = MathHelper.ceiling_double_int((double)(i6 - 2) * 10.0D / 300.0D);
!                 int k6 = MathHelper.ceiling_double_int((double)i6 * 10.0D / 300.0D) - j8;
  
!                 for (int i7 = 0; i7 < j8 + k6; ++i7)
                  {
!                     if (i7 < j8)
                      {
!                         this.drawTexturedModalRect(j1 - i7 * 8 - 9, j2, 16, 18, 9, 9);
                      }
                      else
                      {
!                         this.drawTexturedModalRect(j1 - i7 * 8 - 9, j2, 25, 18, 9, 9);
                      }
                  }
              }
***************
*** 891,910 ****
              FontRenderer fontrenderer = this.mc.fontRendererObj;
              ScaledResolution scaledresolution = new ScaledResolution(this.mc);
              int i = scaledresolution.getScaledWidth();
!             int j = 182;
!             int k = i / 2 - j / 2;
!             int l = (int)(BossStatus.healthScale * (float)(j + 1));
!             int i1 = 12;
!             this.drawTexturedModalRect(k, i1, 0, 74, j, 5);
!             this.drawTexturedModalRect(k, i1, 0, 74, j, 5);
  
!             if (l > 0)
              {
!                 this.drawTexturedModalRect(k, i1, 0, 79, l, 5);
              }
  
              String s = BossStatus.bossName;
!             this.getFontRenderer().drawStringWithShadow(s, (float)(i / 2 - this.getFontRenderer().getStringWidth(s) / 2), (float)(i1 - 10), 16777215);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              this.mc.getTextureManager().bindTexture(icons);
          }
--- 912,938 ----
              FontRenderer fontrenderer = this.mc.fontRendererObj;
              ScaledResolution scaledresolution = new ScaledResolution(this.mc);
              int i = scaledresolution.getScaledWidth();
!             short short1 = 182;
!             int j = i / 2 - short1 / 2;
!             int k = (int)(BossStatus.healthScale * (float)(short1 + 1));
!             byte b0 = 12;
!             this.drawTexturedModalRect(j, b0, 0, 74, short1, 5);
!             this.drawTexturedModalRect(j, b0, 0, 74, short1, 5);
  
!             if (k > 0)
              {
!                 this.drawTexturedModalRect(j, b0, 0, 79, k, 5);
              }
  
              String s = BossStatus.bossName;
!             int l = 16777215;
! 
!             if (Config.isCustomColors())
!             {
!                 l = CustomColors.getBossTextColor(l);
!             }
! 
!             this.getFontRenderer().drawStringWithShadow(s, (float)(i / 2 - this.getFontRenderer().getStringWidth(s) / 2), (float)(b0 - 10), l);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              this.mc.getTextureManager().bindTexture(icons);
          }
***************
*** 937,985 ****
       */
      private void renderVignette(float p_180480_1_, ScaledResolution p_180480_2_)
      {
!         p_180480_1_ = 1.0F - p_180480_1_;
!         p_180480_1_ = MathHelper.clamp_float(p_180480_1_, 0.0F, 1.0F);
!         WorldBorder worldborder = this.mc.theWorld.getWorldBorder();
!         float f = (float)worldborder.getClosestDistance(this.mc.thePlayer);
!         double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
!         double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
! 
!         if ((double)f < d1)
          {
!             f = 1.0F - (float)((double)f / d1);
          }
          else
          {
!             f = 0.0F;
!         }
  
!         this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(p_180480_1_ - this.prevVignetteBrightness) * 0.01D);
!         GlStateManager.disableDepth();
!         GlStateManager.depthMask(false);
!         GlStateManager.tryBlendFuncSeparate(0, 769, 1, 0);
  
!         if (f > 0.0F)
!         {
!             GlStateManager.color(0.0F, f, f, 1.0F);
!         }
!         else
!         {
!             GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
!         }
  
!         this.mc.getTextureManager().bindTexture(vignetteTexPath);
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!         worldrenderer.pos(0.0D, (double)p_180480_2_.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
!         worldrenderer.pos((double)p_180480_2_.getScaledWidth(), (double)p_180480_2_.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
!         worldrenderer.pos((double)p_180480_2_.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
!         worldrenderer.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
!         tessellator.draw();
!         GlStateManager.depthMask(true);
!         GlStateManager.enableDepth();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
      }
  
      private void func_180474_b(float p_180474_1_, ScaledResolution p_180474_2_)
--- 965,1021 ----
       */
      private void renderVignette(float p_180480_1_, ScaledResolution p_180480_2_)
      {
!         if (!Config.isVignetteEnabled())
          {
!             GlStateManager.enableDepth();
!             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          }
          else
          {
!             p_180480_1_ = 1.0F - p_180480_1_;
!             p_180480_1_ = MathHelper.clamp_float(p_180480_1_, 0.0F, 1.0F);
!             WorldBorder worldborder = this.mc.theWorld.getWorldBorder();
!             float f = (float)worldborder.getClosestDistance(this.mc.thePlayer);
!             double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
!             double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
  
!             if ((double)f < d1)
!             {
!                 f = 1.0F - (float)((double)f / d1);
!             }
!             else
!             {
!                 f = 0.0F;
!             }
  
!             this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(p_180480_1_ - this.prevVignetteBrightness) * 0.01D);
!             GlStateManager.disableDepth();
!             GlStateManager.depthMask(false);
!             GlStateManager.tryBlendFuncSeparate(0, 769, 1, 0);
  
!             if (f > 0.0F)
!             {
!                 GlStateManager.color(0.0F, f, f, 1.0F);
!             }
!             else
!             {
!                 GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
!             }
! 
!             this.mc.getTextureManager().bindTexture(vignetteTexPath);
!             Tessellator tessellator = Tessellator.getInstance();
!             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!             worldrenderer.pos(0.0D, (double)p_180480_2_.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
!             worldrenderer.pos((double)p_180480_2_.getScaledWidth(), (double)p_180480_2_.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
!             worldrenderer.pos((double)p_180480_2_.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
!             worldrenderer.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
!             tessellator.draw();
!             GlStateManager.depthMask(true);
!             GlStateManager.enableDepth();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!         }
      }
  
      private void func_180474_b(float p_180474_1_, ScaledResolution p_180474_2_)
diff -rc ./client/gui/GuiIngameMenu.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiIngameMenu.java
*** ./client/gui/GuiIngameMenu.java	2021-04-03 11:27:24.804239000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiIngameMenu.java	2020-03-17 19:21:37.861681700 -0700
***************
*** 1,6 ****
--- 1,8 ----
  package net.minecraft.client.gui;
  
  import java.io.IOException;
+ 
+ import clientname.gui.GuiMultiplayerIngame;
  import net.minecraft.client.gui.achievement.GuiAchievements;
  import net.minecraft.client.gui.achievement.GuiStats;
  import net.minecraft.client.multiplayer.WorldClient;
***************
*** 31,41 ****
  
          this.buttonList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24 + i, I18n.format("menu.returnToGame", new Object[0])));
          this.buttonList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + i, 98, 20, I18n.format("menu.options", new Object[0])));
!         GuiButton guibutton;
!         this.buttonList.add(guibutton = new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + i, 98, 20, I18n.format("menu.shareToLan", new Object[0])));
          this.buttonList.add(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 48 + i, 98, 20, I18n.format("gui.achievements", new Object[0])));
          this.buttonList.add(new GuiButton(6, this.width / 2 + 2, this.height / 4 + 48 + i, 98, 20, I18n.format("gui.stats", new Object[0])));
!         guibutton.enabled = this.mc.isSingleplayer() && !this.mc.getIntegratedServer().getPublic();
      }
  
      /**
--- 33,53 ----
  
          this.buttonList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24 + i, I18n.format("menu.returnToGame", new Object[0])));
          this.buttonList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + i, 98, 20, I18n.format("menu.options", new Object[0])));
!         
!         
!         if(mc.isSingleplayer()) {
!         	GuiButton guibutton;
!         	this.buttonList.add(guibutton = new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + i, 98, 20, I18n.format("menu.shareToLan", new Object[0])));
!         	guibutton.enabled = this.mc.isSingleplayer() && !this.mc.getIntegratedServer().getPublic();
!         }
!         else {
!         	this.buttonList.add(new GuiButton(100, this.width / 2 + 2, this.height / 4 + 96 + i, 98, 20, "Server List"));
!         }
!         
!         
          this.buttonList.add(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 48 + i, 98, 20, I18n.format("gui.achievements", new Object[0])));
          this.buttonList.add(new GuiButton(6, this.width / 2 + 2, this.height / 4 + 48 + i, 98, 20, I18n.format("gui.stats", new Object[0])));
!         
      }
  
      /**
***************
*** 43,48 ****
--- 55,61 ----
       */
      protected void actionPerformed(GuiButton button) throws IOException
      {
+     	System.out.println(button.id);
          switch (button.id)
          {
              case 0:
***************
*** 90,95 ****
--- 103,113 ----
  
              case 7:
                  this.mc.displayGuiScreen(new GuiShareToLan(this));
+                 break;
+                 
+             case 100:
+             	this.mc.displayGuiScreen(new GuiMultiplayerIngame());
+             	break;
          }
      }
  
diff -rc ./client/gui/GuiMainMenu.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiMainMenu.java
*** ./client/gui/GuiMainMenu.java	2021-04-03 11:27:24.867243000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiMainMenu.java	2021-03-26 10:48:34.505447600 -0700
***************
*** 1,6 ****
  package net.minecraft.client.gui;
  
- import com.google.common.collect.Lists;
  import java.io.BufferedReader;
  import java.io.IOException;
  import java.io.InputStreamReader;
--- 1,5 ----
***************
*** 10,15 ****
--- 9,26 ----
  import java.util.List;
  import java.util.Random;
  import java.util.concurrent.atomic.AtomicInteger;
+ 
+ import org.apache.commons.io.Charsets;
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ import org.lwjgl.opengl.GL11;
+ import org.lwjgl.opengl.GLContext;
+ import org.lwjgl.util.glu.Project;
+ 
+ import com.google.common.collect.Lists;
+ 
+ import clientname.gui.GuiPickYourSimp;
+ import clientname.gui.GuiPickYourSimp.EnumPerson;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
***************
*** 25,579 ****
  import net.minecraft.world.demo.DemoWorldServer;
  import net.minecraft.world.storage.ISaveFormat;
  import net.minecraft.world.storage.WorldInfo;
- import org.apache.commons.io.Charsets;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- import org.lwjgl.opengl.GL11;
- import org.lwjgl.opengl.GLContext;
- import org.lwjgl.util.glu.Project;
  
  public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
  {
!     private static final AtomicInteger field_175373_f = new AtomicInteger(0);
!     private static final Logger logger = LogManager.getLogger();
!     private static final Random RANDOM = new Random();
! 
!     /** Counts the number of screen updates. */
!     private float updateCounter;
! 
!     /** The splash message. */
!     private String splashText;
!     private GuiButton buttonResetDemo;
! 
!     /** Timer used to rotate the panorama, increases every tick. */
!     private int panoramaTimer;
! 
!     /**
!      * Texture allocated for the current viewport of the main menu's panorama background.
!      */
!     private DynamicTexture viewportTexture;
!     private boolean field_175375_v = true;
! 
!     /**
!      * The Object object utilized as a thread lock when performing non thread-safe operations
!      */
!     private final Object threadLock = new Object();
! 
!     /** OpenGL graphics card warning. */
!     private String openGLWarning1;
! 
!     /** OpenGL graphics card warning. */
!     private String openGLWarning2;
! 
!     /** Link to the Mojang Support about minimum requirements */
!     private String openGLWarningLink;
!     private static final ResourceLocation splashTexts = new ResourceLocation("texts/splashes.txt");
!     private static final ResourceLocation minecraftTitleTextures = new ResourceLocation("textures/gui/title/minecraft.png");
! 
!     /** An array of all the paths to the panorama pictures. */
!     private static final ResourceLocation[] titlePanoramaPaths = new ResourceLocation[] {new ResourceLocation("textures/gui/title/background/panorama_0.png"), new ResourceLocation("textures/gui/title/background/panorama_1.png"), new ResourceLocation("textures/gui/title/background/panorama_2.png"), new ResourceLocation("textures/gui/title/background/panorama_3.png"), new ResourceLocation("textures/gui/title/background/panorama_4.png"), new ResourceLocation("textures/gui/title/background/panorama_5.png")};
!     public static final String field_96138_a = "Please click " + EnumChatFormatting.UNDERLINE + "here" + EnumChatFormatting.RESET + " for more information.";
!     private int field_92024_r;
!     private int field_92023_s;
!     private int field_92022_t;
!     private int field_92021_u;
!     private int field_92020_v;
!     private int field_92019_w;
!     private ResourceLocation backgroundTexture;
! 
!     /** Minecraft Realms button. */
!     private GuiButton realmsButton;
! 
!     public GuiMainMenu()
!     {
!         this.openGLWarning2 = field_96138_a;
!         this.splashText = "missingno";
!         BufferedReader bufferedreader = null;
! 
!         try
!         {
!             List<String> list = Lists.<String>newArrayList();
!             bufferedreader = new BufferedReader(new InputStreamReader(Minecraft.getMinecraft().getResourceManager().getResource(splashTexts).getInputStream(), Charsets.UTF_8));
!             String s;
! 
!             while ((s = bufferedreader.readLine()) != null)
!             {
!                 s = s.trim();
! 
!                 if (!s.isEmpty())
!                 {
!                     list.add(s);
!                 }
!             }
! 
!             if (!list.isEmpty())
!             {
!                 while (true)
!                 {
!                     this.splashText = (String)list.get(RANDOM.nextInt(list.size()));
! 
!                     if (this.splashText.hashCode() != 125780783)
!                     {
!                         break;
!                     }
!                 }
!             }
!         }
!         catch (IOException var12)
!         {
!             ;
!         }
!         finally
!         {
!             if (bufferedreader != null)
!             {
!                 try
!                 {
!                     bufferedreader.close();
!                 }
!                 catch (IOException var11)
!                 {
!                     ;
!                 }
!             }
!         }
! 
!         this.updateCounter = RANDOM.nextFloat();
!         this.openGLWarning1 = "";
! 
!         if (!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported())
!         {
!             this.openGLWarning1 = I18n.format("title.oldgl1", new Object[0]);
!             this.openGLWarning2 = I18n.format("title.oldgl2", new Object[0]);
!             this.openGLWarningLink = "https://help.mojang.com/customer/portal/articles/325948?ref=game";
!         }
!     }
! 
!     /**
!      * Called from the main game loop to update the screen.
!      */
!     public void updateScreen()
!     {
!         ++this.panoramaTimer;
!     }
! 
!     /**
!      * Returns true if this GUI should pause the game when it is displayed in single-player
!      */
!     public boolean doesGuiPauseGame()
!     {
!         return false;
!     }
! 
!     /**
!      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
!      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
!      */
!     protected void keyTyped(char typedChar, int keyCode) throws IOException
!     {
!     }
! 
!     /**
!      * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
!      * window resizes, the buttonList is cleared beforehand.
!      */
!     public void initGui()
!     {
!         this.viewportTexture = new DynamicTexture(256, 256);
!         this.backgroundTexture = this.mc.getTextureManager().getDynamicTextureLocation("background", this.viewportTexture);
!         Calendar calendar = Calendar.getInstance();
!         calendar.setTime(new Date());
! 
!         if (calendar.get(2) + 1 == 12 && calendar.get(5) == 24)
!         {
!             this.splashText = "Merry X-mas!";
!         }
!         else if (calendar.get(2) + 1 == 1 && calendar.get(5) == 1)
!         {
!             this.splashText = "Happy new year!";
!         }
!         else if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31)
!         {
!             this.splashText = "OOoooOOOoooo! Spooky!";
!         }
! 
!         int i = 24;
!         int j = this.height / 4 + 48;
! 
!         if (this.mc.isDemo())
!         {
!             this.addDemoButtons(j, 24);
!         }
!         else
!         {
!             this.addSingleplayerMultiplayerButtons(j, 24);
!         }
! 
!         this.buttonList.add(new GuiButton(0, this.width / 2 - 100, j + 72 + 12, 98, 20, I18n.format("menu.options", new Object[0])));
!         this.buttonList.add(new GuiButton(4, this.width / 2 + 2, j + 72 + 12, 98, 20, I18n.format("menu.quit", new Object[0])));
!         this.buttonList.add(new GuiButtonLanguage(5, this.width / 2 - 124, j + 72 + 12));
! 
!         synchronized (this.threadLock)
!         {
!             this.field_92023_s = this.fontRendererObj.getStringWidth(this.openGLWarning1);
!             this.field_92024_r = this.fontRendererObj.getStringWidth(this.openGLWarning2);
!             int k = Math.max(this.field_92023_s, this.field_92024_r);
!             this.field_92022_t = (this.width - k) / 2;
!             this.field_92021_u = ((GuiButton)this.buttonList.get(0)).yPosition - 24;
!             this.field_92020_v = this.field_92022_t + k;
!             this.field_92019_w = this.field_92021_u + 24;
!         }
! 
!         this.mc.func_181537_a(false);
!     }
! 
!     /**
!      * Adds Singleplayer and Multiplayer buttons on Main Menu for players who have bought the game.
!      */
!     private void addSingleplayerMultiplayerButtons(int p_73969_1_, int p_73969_2_)
!     {
!         this.buttonList.add(new GuiButton(1, this.width / 2 - 100, p_73969_1_, I18n.format("menu.singleplayer", new Object[0])));
!         this.buttonList.add(new GuiButton(2, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 1, I18n.format("menu.multiplayer", new Object[0])));
!         this.buttonList.add(this.realmsButton = new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online", new Object[0])));
!     }
! 
!     /**
!      * Adds Demo buttons on Main Menu for players who are playing Demo.
!      */
!     private void addDemoButtons(int p_73972_1_, int p_73972_2_)
!     {
!         this.buttonList.add(new GuiButton(11, this.width / 2 - 100, p_73972_1_, I18n.format("menu.playdemo", new Object[0])));
!         this.buttonList.add(this.buttonResetDemo = new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo", new Object[0])));
!         ISaveFormat isaveformat = this.mc.getSaveLoader();
!         WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
! 
!         if (worldinfo == null)
!         {
!             this.buttonResetDemo.enabled = false;
!         }
!     }
! 
!     /**
!      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
!      */
!     protected void actionPerformed(GuiButton button) throws IOException
!     {
!         if (button.id == 0)
!         {
!             this.mc.displayGuiScreen(new GuiOptions(this, this.mc.gameSettings));
!         }
! 
!         if (button.id == 5)
!         {
!             this.mc.displayGuiScreen(new GuiLanguage(this, this.mc.gameSettings, this.mc.getLanguageManager()));
!         }
! 
!         if (button.id == 1)
!         {
!             this.mc.displayGuiScreen(new GuiSelectWorld(this));
!         }
! 
!         if (button.id == 2)
!         {
!             this.mc.displayGuiScreen(new GuiMultiplayer(this));
!         }
! 
!         if (button.id == 14 && this.realmsButton.visible)
!         {
!             this.switchToRealms();
!         }
! 
!         if (button.id == 4)
!         {
!             this.mc.shutdown();
!         }
! 
!         if (button.id == 11)
!         {
!             this.mc.launchIntegratedServer("Demo_World", "Demo_World", DemoWorldServer.demoWorldSettings);
!         }
! 
!         if (button.id == 12)
!         {
!             ISaveFormat isaveformat = this.mc.getSaveLoader();
!             WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
! 
!             if (worldinfo != null)
!             {
!                 GuiYesNo guiyesno = GuiSelectWorld.func_152129_a(this, worldinfo.getWorldName(), 12);
!                 this.mc.displayGuiScreen(guiyesno);
!             }
!         }
!     }
! 
!     private void switchToRealms()
!     {
!         RealmsBridge realmsbridge = new RealmsBridge();
!         realmsbridge.switchToRealms(this);
!     }
! 
!     public void confirmClicked(boolean result, int id)
!     {
!         if (result && id == 12)
!         {
!             ISaveFormat isaveformat = this.mc.getSaveLoader();
!             isaveformat.flushCache();
!             isaveformat.deleteWorldDirectory("Demo_World");
!             this.mc.displayGuiScreen(this);
!         }
!         else if (id == 13)
!         {
!             if (result)
!             {
!                 try
!                 {
!                     Class<?> oclass = Class.forName("java.awt.Desktop");
!                     Object object = oclass.getMethod("getDesktop", new Class[0]).invoke((Object)null, new Object[0]);
!                     oclass.getMethod("browse", new Class[] {URI.class}).invoke(object, new Object[] {new URI(this.openGLWarningLink)});
!                 }
!                 catch (Throwable throwable)
!                 {
!                     logger.error("Couldn\'t open link", throwable);
!                 }
!             }
! 
!             this.mc.displayGuiScreen(this);
!         }
!     }
! 
!     /**
!      * Draws the main menu panorama
!      */
!     private void drawPanorama(int p_73970_1_, int p_73970_2_, float p_73970_3_)
!     {
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         GlStateManager.matrixMode(5889);
!         GlStateManager.pushMatrix();
!         GlStateManager.loadIdentity();
!         Project.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
!         GlStateManager.matrixMode(5888);
!         GlStateManager.pushMatrix();
!         GlStateManager.loadIdentity();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
!         GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
!         GlStateManager.enableBlend();
!         GlStateManager.disableAlpha();
!         GlStateManager.disableCull();
!         GlStateManager.depthMask(false);
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!         int i = 8;
! 
!         for (int j = 0; j < i * i; ++j)
!         {
!             GlStateManager.pushMatrix();
!             float f = ((float)(j % i) / (float)i - 0.5F) / 64.0F;
!             float f1 = ((float)(j / i) / (float)i - 0.5F) / 64.0F;
!             float f2 = 0.0F;
!             GlStateManager.translate(f, f1, f2);
!             GlStateManager.rotate(MathHelper.sin(((float)this.panoramaTimer + p_73970_3_) / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
!             GlStateManager.rotate(-((float)this.panoramaTimer + p_73970_3_) * 0.1F, 0.0F, 1.0F, 0.0F);
! 
!             for (int k = 0; k < 6; ++k)
!             {
!                 GlStateManager.pushMatrix();
! 
!                 if (k == 1)
!                 {
!                     GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
!                 }
! 
!                 if (k == 2)
!                 {
!                     GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
!                 }
! 
!                 if (k == 3)
!                 {
!                     GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
!                 }
! 
!                 if (k == 4)
!                 {
!                     GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
!                 }
! 
!                 if (k == 5)
!                 {
!                     GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
!                 }
! 
!                 this.mc.getTextureManager().bindTexture(titlePanoramaPaths[k]);
!                 worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!                 int l = 255 / (j + 1);
!                 float f3 = 0.0F;
!                 worldrenderer.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, l).endVertex();
!                 worldrenderer.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, l).endVertex();
!                 worldrenderer.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, l).endVertex();
!                 worldrenderer.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, l).endVertex();
!                 tessellator.draw();
!                 GlStateManager.popMatrix();
!             }
! 
!             GlStateManager.popMatrix();
!             GlStateManager.colorMask(true, true, true, false);
!         }
! 
!         worldrenderer.setTranslation(0.0D, 0.0D, 0.0D);
!         GlStateManager.colorMask(true, true, true, true);
!         GlStateManager.matrixMode(5889);
!         GlStateManager.popMatrix();
!         GlStateManager.matrixMode(5888);
!         GlStateManager.popMatrix();
!         GlStateManager.depthMask(true);
!         GlStateManager.enableCull();
!         GlStateManager.enableDepth();
!     }
! 
!     /**
!      * Rotate and blurs the skybox view in the main menu
!      */
!     private void rotateAndBlurSkybox(float p_73968_1_)
!     {
!         this.mc.getTextureManager().bindTexture(this.backgroundTexture);
!         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
!         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
!         GL11.glCopyTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 0, 0, 256, 256);
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!         GlStateManager.colorMask(true, true, true, false);
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!         GlStateManager.disableAlpha();
!         int i = 3;
! 
!         for (int j = 0; j < i; ++j)
!         {
!             float f = 1.0F / (float)(j + 1);
!             int k = this.width;
!             int l = this.height;
!             float f1 = (float)(j - i / 2) / 256.0F;
!             worldrenderer.pos((double)k, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             worldrenderer.pos((double)k, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             worldrenderer.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             worldrenderer.pos(0.0D, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!         }
! 
!         tessellator.draw();
!         GlStateManager.enableAlpha();
!         GlStateManager.colorMask(true, true, true, true);
!     }
! 
!     /**
!      * Renders the skybox in the main menu
!      */
!     private void renderSkybox(int p_73971_1_, int p_73971_2_, float p_73971_3_)
!     {
!         this.mc.getFramebuffer().unbindFramebuffer();
!         GlStateManager.viewport(0, 0, 256, 256);
!         this.drawPanorama(p_73971_1_, p_73971_2_, p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.rotateAndBlurSkybox(p_73971_3_);
!         this.mc.getFramebuffer().bindFramebuffer(true);
!         GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         float f = this.width > this.height ? 120.0F / (float)this.width : 120.0F / (float)this.height;
!         float f1 = (float)this.height * f / 256.0F;
!         float f2 = (float)this.width * f / 256.0F;
!         int i = this.width;
!         int j = this.height;
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!         worldrenderer.pos(0.0D, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         worldrenderer.pos((double)i, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         worldrenderer.pos((double)i, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         worldrenderer.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         tessellator.draw();
!     }
! 
!     /**
!      * Draws the screen and all the components in it. Args : mouseX, mouseY, renderPartialTicks
!      */
!     public void drawScreen(int mouseX, int mouseY, float partialTicks)
!     {
!         GlStateManager.disableAlpha();
!         this.renderSkybox(mouseX, mouseY, partialTicks);
!         GlStateManager.enableAlpha();
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         int i = 274;
!         int j = this.width / 2 - i / 2;
!         int k = 30;
!         this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
!         this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
!         this.mc.getTextureManager().bindTexture(minecraftTitleTextures);
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
! 
!         if ((double)this.updateCounter < 1.0E-4D)
!         {
!             this.drawTexturedModalRect(j + 0, k + 0, 0, 0, 99, 44);
!             this.drawTexturedModalRect(j + 99, k + 0, 129, 0, 27, 44);
!             this.drawTexturedModalRect(j + 99 + 26, k + 0, 126, 0, 3, 44);
!             this.drawTexturedModalRect(j + 99 + 26 + 3, k + 0, 99, 0, 26, 44);
!             this.drawTexturedModalRect(j + 155, k + 0, 0, 45, 155, 44);
!         }
!         else
!         {
!             this.drawTexturedModalRect(j + 0, k + 0, 0, 0, 155, 44);
!             this.drawTexturedModalRect(j + 155, k + 0, 0, 45, 155, 44);
!         }
! 
!         GlStateManager.pushMatrix();
!         GlStateManager.translate((float)(this.width / 2 + 90), 70.0F, 0.0F);
!         GlStateManager.rotate(-20.0F, 0.0F, 0.0F, 1.0F);
!         float f = 1.8F - MathHelper.abs(MathHelper.sin((float)(Minecraft.getSystemTime() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
!         f = f * 100.0F / (float)(this.fontRendererObj.getStringWidth(this.splashText) + 32);
!         GlStateManager.scale(f, f, f);
!         this.drawCenteredString(this.fontRendererObj, this.splashText, 0, -8, -256);
!         GlStateManager.popMatrix();
!         String s = "Minecraft 1.8.8";
! 
!         if (this.mc.isDemo())
!         {
!             s = s + " Demo";
!         }
! 
!         this.drawString(this.fontRendererObj, s, 2, this.height - 10, -1);
!         String s1 = "Copyright Mojang AB. Do not distribute!";
!         this.drawString(this.fontRendererObj, s1, this.width - this.fontRendererObj.getStringWidth(s1) - 2, this.height - 10, -1);
! 
!         if (this.openGLWarning1 != null && this.openGLWarning1.length() > 0)
!         {
!             drawRect(this.field_92022_t - 2, this.field_92021_u - 2, this.field_92020_v + 2, this.field_92019_w - 1, 1428160512);
!             this.drawString(this.fontRendererObj, this.openGLWarning1, this.field_92022_t, this.field_92021_u, -1);
!             this.drawString(this.fontRendererObj, this.openGLWarning2, (this.width - this.field_92024_r) / 2, ((GuiButton)this.buttonList.get(0)).yPosition - 12, -1);
!         }
! 
!         super.drawScreen(mouseX, mouseY, partialTicks);
!     }
! 
!     /**
!      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
!      */
!     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
!     {
!         super.mouseClicked(mouseX, mouseY, mouseButton);
! 
!         synchronized (this.threadLock)
!         {
!             if (this.openGLWarning1.length() > 0 && mouseX >= this.field_92022_t && mouseX <= this.field_92020_v && mouseY >= this.field_92021_u && mouseY <= this.field_92019_w)
!             {
!                 GuiConfirmOpenLink guiconfirmopenlink = new GuiConfirmOpenLink(this, this.openGLWarningLink, 13, true);
!                 guiconfirmopenlink.disableSecurityWarning();
!                 this.mc.displayGuiScreen(guiconfirmopenlink);
!             }
!         }
!     }
  }
--- 36,568 ----
  import net.minecraft.world.demo.DemoWorldServer;
  import net.minecraft.world.storage.ISaveFormat;
  import net.minecraft.world.storage.WorldInfo;
  
  public class GuiMainMenu extends GuiScreen implements GuiYesNoCallback
  {
! 	private static final AtomicInteger field_175373_f = new AtomicInteger(0);
! 	private static final Logger logger = LogManager.getLogger();
! 	private static final Random RANDOM = new Random();
! 
! 	/** Counts the number of screen updates. */
! 	private float updateCounter;
! 
! 	/** The splash message. */
! 	private String splashText;
! 	private GuiButton buttonResetDemo;
! 
! 	/** Timer used to rotate the panorama, increases every tick. */
! 	private int panoramaTimer;
! 
! 	/**
! 	 * Texture allocated for the current viewport of the main menu's panorama background.
! 	 */
! 	private DynamicTexture viewportTexture;
! 	private boolean field_175375_v = true;
! 
! 	/**
! 	 * The Object object utilized as a thread lock when performing non thread-safe operations
! 	 */
! 	private final Object threadLock = new Object();
! 
! 	/** OpenGL graphics card warning. */
! 	private String openGLWarning1;
! 
! 	/** OpenGL graphics card warning. */
! 	private String openGLWarning2;
! 
! 	/** Link to the Mojang Support about minimum requirements */
! 	private String openGLWarningLink;
! 	private static final ResourceLocation splashTexts = new ResourceLocation("texts/splashes.txt");
! 	private static final ResourceLocation TITLE_TEXTURE = new ResourceLocation("simpclient/logo_full.png");
! 
! 	/** An array of all the paths to the panorama pictures. */
! 	private static final ResourceLocation[] titlePanoramaPaths = new ResourceLocation[] {new ResourceLocation("textures/gui/title/background/panorama_0.png"), new ResourceLocation("textures/gui/title/background/panorama_1.png"), new ResourceLocation("textures/gui/title/background/panorama_2.png"), new ResourceLocation("textures/gui/title/background/panorama_3.png"), new ResourceLocation("textures/gui/title/background/panorama_4.png"), new ResourceLocation("textures/gui/title/background/panorama_5.png")};
! 	public static final String field_96138_a = "Please click " + EnumChatFormatting.UNDERLINE + "here" + EnumChatFormatting.RESET + " for more information.";
! 	private int field_92024_r;
! 	private int field_92023_s;
! 	private int field_92022_t;
! 	private int field_92021_u;
! 	private int field_92020_v;
! 	private int field_92019_w;
! 	private ResourceLocation backgroundTexture;
! 
! 	/** Minecraft Realms button. */
! 	private GuiButton realmsButton;
! 
! 	public GuiMainMenu()
! 	{
! 		
! 		if(GuiPickYourSimp.getPerson() == EnumPerson.NONE) {
! 			return;
! 		}
! 		
! 		this.openGLWarning2 = field_96138_a;
! 		this.splashText = "missingno";
! 		BufferedReader bufferedreader = null;
! 
! 		try
! 		{
! 			List<String> list = Lists.<String>newArrayList();
! 			bufferedreader = new BufferedReader(new InputStreamReader(Minecraft.getMinecraft().getResourceManager().getResource(splashTexts).getInputStream(), Charsets.UTF_8));
! 			String s;
! 
! 			while ((s = bufferedreader.readLine()) != null)
! 			{
! 				s = s.trim();
! 
! 				if (!s.isEmpty())
! 				{
! 					list.add(s);
! 				}
! 			}
! 
! 			if (!list.isEmpty())
! 			{
! 				while (true)
! 				{
! 					this.splashText = (String)list.get(RANDOM.nextInt(list.size()));
! 
! 					if (this.splashText.hashCode() != 125780783)
! 					{
! 						break;
! 					}
! 				}
! 			}
! 		}
! 		catch (IOException var12)
! 		{
! 			;
! 		}
! 		finally
! 		{
! 			if (bufferedreader != null)
! 			{
! 				try
! 				{
! 					bufferedreader.close();
! 				}
! 				catch (IOException var11)
! 				{
! 					;
! 				}
! 			}
! 		}
! 
! 		this.updateCounter = RANDOM.nextFloat();
! 		this.openGLWarning1 = "";
! 
! 		if (!GLContext.getCapabilities().OpenGL20 && !OpenGlHelper.areShadersSupported())
! 		{
! 			this.openGLWarning1 = I18n.format("title.oldgl1", new Object[0]);
! 			this.openGLWarning2 = I18n.format("title.oldgl2", new Object[0]);
! 			this.openGLWarningLink = "https://help.mojang.com/customer/portal/articles/325948?ref=game";
! 		}
! 	}
! 
! 	/**
! 	 * Called from the main game loop to update the screen.
! 	 */
! 	public void updateScreen()
! 	{
! 		++this.panoramaTimer;
! 	}
! 
! 	/**
! 	 * Returns true if this GUI should pause the game when it is displayed in single-player
! 	 */
! 	public boolean doesGuiPauseGame()
! 	{
! 		return false;
! 	}
! 
! 	/**
! 	 * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
! 	 * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
! 	 */
! 	protected void keyTyped(char typedChar, int keyCode) throws IOException
! 	{
! 	}
! 
! 	/**
! 	 * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
! 	 * window resizes, the buttonList is cleared beforehand.
! 	 */
! 	public void initGui()
! 	{
! 		this.viewportTexture = new DynamicTexture(256, 256);
! 		this.backgroundTexture = this.mc.getTextureManager().getDynamicTextureLocation("background", this.viewportTexture);
! 
! 		int i = 24;
! 		int j = this.height / 4 + 48;
! 
! 		if (this.mc.isDemo())
! 		{
! 			this.addDemoButtons(j, 24);
! 		}
! 		else
! 		{
! 			this.addSingleplayerMultiplayerButtons(j, 24);
! 		}
! 
! 		this.buttonList.add(new GuiButton(0, this.width / 2 - 100, j + 72 + 12, 98, 20, I18n.format("menu.options", new Object[0])));
! 		this.buttonList.add(new GuiButton(4, this.width / 2 + 2, j + 72 + 12, 98, 20, I18n.format("menu.quit", new Object[0])));
! 		this.buttonList.add(new GuiButtonLanguage(5, this.width / 2 - 124, j + 72 + 12));
! 
! 
! 		synchronized (this.threadLock)
! 		{
! 			this.field_92023_s = this.fontRendererObj.getStringWidth(this.openGLWarning1);
! 			this.field_92024_r = this.fontRendererObj.getStringWidth(this.openGLWarning2);
! 			int k = Math.max(this.field_92023_s, this.field_92024_r);
! 			this.field_92022_t = (this.width - k) / 2;
! 			this.field_92021_u = ((GuiButton)this.buttonList.get(0)).yPosition - 24;
! 			this.field_92020_v = this.field_92022_t + k;
! 			this.field_92019_w = this.field_92021_u + 24;
! 		}
! 
! 		this.mc.func_181537_a(false);
! 	}
! 
! 	/**
! 	 * Adds Singleplayer and Multiplayer buttons on Main Menu for players who have bought the game.
! 	 */
! 	private void addSingleplayerMultiplayerButtons(int p_73969_1_, int p_73969_2_)
! 	{
! 		this.buttonList.add(new GuiButton(1, this.width / 2 - 100, p_73969_1_, I18n.format("menu.singleplayer", new Object[0])));
! 		this.buttonList.add(new GuiButton(2, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 1, I18n.format("menu.multiplayer", new Object[0])));
! 		this.buttonList.add(this.realmsButton = new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online", new Object[0])));
! 	}
! 
! 	/**
! 	 * Adds Demo buttons on Main Menu for players who are playing Demo.
! 	 */
! 	private void addDemoButtons(int p_73972_1_, int p_73972_2_)
! 	{
! 		this.buttonList.add(new GuiButton(11, this.width / 2 - 100, p_73972_1_, I18n.format("menu.playdemo", new Object[0])));
! 		this.buttonList.add(this.buttonResetDemo = new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo", new Object[0])));
! 		ISaveFormat isaveformat = this.mc.getSaveLoader();
! 		WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
! 
! 		if (worldinfo == null)
! 		{
! 			this.buttonResetDemo.enabled = false;
! 		}
! 	}
! 
! 	/**
! 	 * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
! 	 */
! 	protected void actionPerformed(GuiButton button) throws IOException
! 	{
! 		if (button.id == 0)
! 		{
! 			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.gameSettings));
! 		}
! 
! 		if (button.id == 5)
! 		{
! 			this.mc.displayGuiScreen(new GuiLanguage(this, this.mc.gameSettings, this.mc.getLanguageManager()));
! 		}
! 
! 		if (button.id == 1)
! 		{
! 			this.mc.displayGuiScreen(new GuiSelectWorld(this));
! 		}
! 
! 		if (button.id == 2)
! 		{
! 			this.mc.displayGuiScreen(new GuiMultiplayer(this));
! 		}
! 
! 		if (button.id == 14 && this.realmsButton.visible)
! 		{
! 			//this.switchToRealms();
! 			mc.displayGuiScreen(new GuiPickYourSimp());
! 		}
! 
! 		if (button.id == 4)
! 		{
! 			this.mc.shutdown();
! 		}
! 
! 		if (button.id == 11)
! 		{
! 			this.mc.launchIntegratedServer("Demo_World", "Demo_World", DemoWorldServer.demoWorldSettings);
! 		}
! 
! 		if (button.id == 12)
! 		{
! 			ISaveFormat isaveformat = this.mc.getSaveLoader();
! 			WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
! 
! 			if (worldinfo != null)
! 			{
! 				GuiYesNo guiyesno = GuiSelectWorld.func_152129_a(this, worldinfo.getWorldName(), 12);
! 				this.mc.displayGuiScreen(guiyesno);
! 			}
! 		}
! 
! 	}
! 
! 	private void switchToRealms()
! 	{
! 		RealmsBridge realmsbridge = new RealmsBridge();
! 		realmsbridge.switchToRealms(this);
! 	}
! 
! 	public void confirmClicked(boolean result, int id)
! 	{
! 		if (result && id == 12)
! 		{
! 			ISaveFormat isaveformat = this.mc.getSaveLoader();
! 			isaveformat.flushCache();
! 			isaveformat.deleteWorldDirectory("Demo_World");
! 			this.mc.displayGuiScreen(this);
! 		}
! 		else if (id == 13)
! 		{
! 			if (result)
! 			{
! 				try
! 				{
! 					Class<?> oclass = Class.forName("java.awt.Desktop");
! 					Object object = oclass.getMethod("getDesktop", new Class[0]).invoke((Object)null, new Object[0]);
! 					oclass.getMethod("browse", new Class[] {URI.class}).invoke(object, new Object[] {new URI(this.openGLWarningLink)});
! 				}
! 				catch (Throwable throwable)
! 				{
! 					logger.error("Couldn\'t open link", throwable);
! 				}
! 			}
! 
! 			this.mc.displayGuiScreen(this);
! 		}
! 	}
! 
! 	/**
! 	 * Draws the main menu panorama
! 	 */
! 	private void drawPanorama(int p_73970_1_, int p_73970_2_, float p_73970_3_)
! 	{
! 		Tessellator tessellator = Tessellator.getInstance();
! 		WorldRenderer worldrenderer = tessellator.getWorldRenderer();
! 		GlStateManager.matrixMode(5889);
! 		GlStateManager.pushMatrix();
! 		GlStateManager.loadIdentity();
! 		Project.gluPerspective(120.0F, 1.0F, 0.05F, 10.0F);
! 		GlStateManager.matrixMode(5888);
! 		GlStateManager.pushMatrix();
! 		GlStateManager.loadIdentity();
! 		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
! 		GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
! 		GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
! 		GlStateManager.enableBlend();
! 		GlStateManager.disableAlpha();
! 		GlStateManager.disableCull();
! 		GlStateManager.depthMask(false);
! 		GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
! 		int i = 8;
! 
! 		for (int j = 0; j < i * i; ++j)
! 		{
! 			GlStateManager.pushMatrix();
! 			float f = ((float)(j % i) / (float)i - 0.5F) / 64.0F;
! 			float f1 = ((float)(j / i) / (float)i - 0.5F) / 64.0F;
! 			float f2 = 0.0F;
! 			GlStateManager.translate(f, f1, f2);
! 			GlStateManager.rotate(MathHelper.sin(((float)this.panoramaTimer + p_73970_3_) / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
! 			GlStateManager.rotate(-((float)this.panoramaTimer + p_73970_3_) * 0.1F, 0.0F, 1.0F, 0.0F);
! 
! 			for (int k = 0; k < 6; ++k)
! 			{
! 				GlStateManager.pushMatrix();
! 
! 				if (k == 1)
! 				{
! 					GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
! 				}
! 
! 				if (k == 2)
! 				{
! 					GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
! 				}
! 
! 				if (k == 3)
! 				{
! 					GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
! 				}
! 
! 				if (k == 4)
! 				{
! 					GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
! 				}
! 
! 				if (k == 5)
! 				{
! 					GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
! 				}
! 
! 				this.mc.getTextureManager().bindTexture(titlePanoramaPaths[k]);
! 				worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
! 				int l = 255 / (j + 1);
! 				float f3 = 0.0F;
! 				worldrenderer.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, l).endVertex();
! 				worldrenderer.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, l).endVertex();
! 				worldrenderer.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, l).endVertex();
! 				worldrenderer.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, l).endVertex();
! 				tessellator.draw();
! 				GlStateManager.popMatrix();
! 			}
! 
! 			GlStateManager.popMatrix();
! 			GlStateManager.colorMask(true, true, true, false);
! 		}
! 
! 		worldrenderer.setTranslation(0.0D, 0.0D, 0.0D);
! 		GlStateManager.colorMask(true, true, true, true);
! 		GlStateManager.matrixMode(5889);
! 		GlStateManager.popMatrix();
! 		GlStateManager.matrixMode(5888);
! 		GlStateManager.popMatrix();
! 		GlStateManager.depthMask(true);
! 		GlStateManager.enableCull();
! 		GlStateManager.enableDepth();
! 	}
! 
! 	/**
! 	 * Rotate and blurs the skybox view in the main menu
! 	 */
! 	private void rotateAndBlurSkybox(float p_73968_1_)
! 	{
! 		this.mc.getTextureManager().bindTexture(this.backgroundTexture);
! 		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
! 		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
! 		GL11.glCopyTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 0, 0, 256, 256);
! 		GlStateManager.enableBlend();
! 		GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
! 		GlStateManager.colorMask(true, true, true, false);
! 		Tessellator tessellator = Tessellator.getInstance();
! 		WorldRenderer worldrenderer = tessellator.getWorldRenderer();
! 		worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
! 		GlStateManager.disableAlpha();
! 		int i = 3;
! 
! 		for (int j = 0; j < i; ++j)
! 		{
! 			float f = 1.0F / (float)(j + 1);
! 			int k = this.width;
! 			int l = this.height;
! 			float f1 = (float)(j - i / 2) / 256.0F;
! 			worldrenderer.pos((double)k, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
! 			worldrenderer.pos((double)k, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
! 			worldrenderer.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
! 			worldrenderer.pos(0.0D, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
! 		}
! 
! 		tessellator.draw();
! 		GlStateManager.enableAlpha();
! 		GlStateManager.colorMask(true, true, true, true);
! 	}
! 
! 	/**
! 	 * Renders the skybox in the main menu
! 	 */
! 	private void renderSkybox(int p_73971_1_, int p_73971_2_, float p_73971_3_)
! 	{
! 		this.mc.getFramebuffer().unbindFramebuffer();
! 		GlStateManager.viewport(0, 0, 256, 256);
! 		this.drawPanorama(p_73971_1_, p_73971_2_, p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.rotateAndBlurSkybox(p_73971_3_);
! 		this.mc.getFramebuffer().bindFramebuffer(true);
! 		GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
! 		float f = this.width > this.height ? 120.0F / (float)this.width : 120.0F / (float)this.height;
! 		float f1 = (float)this.height * f / 256.0F;
! 		float f2 = (float)this.width * f / 256.0F;
! 		int i = this.width;
! 		int j = this.height;
! 		Tessellator tessellator = Tessellator.getInstance();
! 		WorldRenderer worldrenderer = tessellator.getWorldRenderer();
! 		worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
! 		worldrenderer.pos(0.0D, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
! 		worldrenderer.pos((double)i, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
! 		worldrenderer.pos((double)i, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
! 		worldrenderer.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
! 		tessellator.draw();
! 	}
! 
! 	/**
! 	 * Draws the screen and all the components in it. Args : mouseX, mouseY, renderPartialTicks
! 	 */
! 	public void drawScreen(int mouseX, int mouseY, float partialTicks)
! 	{
! 		GlStateManager.disableAlpha();
! 		this.renderSkybox(mouseX, mouseY, partialTicks);
! 		GlStateManager.enableAlpha();
! 		Tessellator tessellator = Tessellator.getInstance();
! 		WorldRenderer worldrenderer = tessellator.getWorldRenderer();
! 		int i = 274;
! 		int j = this.width / 2 - i / 2;
! 		int k = 30;
! 		this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
! 		this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
! 		this.mc.getTextureManager().bindTexture(TITLE_TEXTURE);
! 		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
! 		
! 		GL11.glPushMatrix();
! 		GL11.glScalef(0.5f, 0.5f, 0);
! 		this.drawModalRectWithCustomSizedTexture(j + 90, k, 0, 0, 960, 299, 960, 299);
! 		GL11.glPopMatrix();
! 
! 		GlStateManager.pushMatrix();
! 		GlStateManager.translate((float)(this.width / 2 + 200), 130.0F, 0.0F);
! 		GlStateManager.rotate(-20.0F, 0.0F, 0.0F, 1.0F);
! 		float f = 1.8F - MathHelper.abs(MathHelper.sin((float)(Minecraft.getSystemTime() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
! 		f = f * 100.0F / (float)(this.fontRendererObj.getStringWidth(this.splashText) + 32);
! 		GlStateManager.scale(f, f, f);
! 		this.drawCenteredString(this.fontRendererObj, this.splashText, 0, -8, GuiPickYourSimp.getPerson().primaryColorJ.getRGB());
! 		GlStateManager.popMatrix();
! 		String s = "Minecraft 1.8.8";
! 
! 		if (this.mc.isDemo())
! 		{
! 			s = s + " Demo";
! 		}
! 
! 		this.drawString(this.fontRendererObj, s, 2, this.height - 10, -1);
! 		String s1 = "Copyright Mojang AB. Do not distribute!";
! 		this.drawString(this.fontRendererObj, s1, this.width - this.fontRendererObj.getStringWidth(s1) - 2, this.height - 10, -1);
! 
! 		if (this.openGLWarning1 != null && this.openGLWarning1.length() > 0)
! 		{
! 			drawRect(this.field_92022_t - 2, this.field_92021_u - 2, this.field_92020_v + 2, this.field_92019_w - 1, 1428160512);
! 			this.drawString(this.fontRendererObj, this.openGLWarning1, this.field_92022_t, this.field_92021_u, -1);
! 			this.drawString(this.fontRendererObj, this.openGLWarning2, (this.width - this.field_92024_r) / 2, ((GuiButton)this.buttonList.get(0)).yPosition - 12, -1);
! 		}
! 
! 		super.drawScreen(mouseX, mouseY, partialTicks);
! 	}
! 
! 	/**
! 	 * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
! 	 */
! 	protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
! 	{
! 		super.mouseClicked(mouseX, mouseY, mouseButton);
! 
! 		synchronized (this.threadLock)
! 		{
! 			if (this.openGLWarning1.length() > 0 && mouseX >= this.field_92022_t && mouseX <= this.field_92020_v && mouseY >= this.field_92021_u && mouseY <= this.field_92019_w)
! 			{
! 				GuiConfirmOpenLink guiconfirmopenlink = new GuiConfirmOpenLink(this, this.openGLWarningLink, 13, true);
! 				guiconfirmopenlink.disableSecurityWarning();
! 				this.mc.displayGuiScreen(guiconfirmopenlink);
! 			}
! 		}
! 	}
  }
diff -rc ./client/gui/GuiMultiplayer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiMultiplayer.java
*** ./client/gui/GuiMultiplayer.java	2021-04-03 11:27:24.912239000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiMultiplayer.java	2021-04-03 12:24:17.151394100 -0700
***************
*** 1,24 ****
  package net.minecraft.client.gui;
  
- import com.google.common.base.Splitter;
- import com.google.common.collect.Lists;
  import java.io.IOException;
  import java.util.List;
  import net.minecraft.client.multiplayer.GuiConnecting;
  import net.minecraft.client.multiplayer.ServerData;
  import net.minecraft.client.multiplayer.ServerList;
  import net.minecraft.client.network.LanServerDetector;
  import net.minecraft.client.network.OldServerPinger;
  import net.minecraft.client.resources.I18n;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- import org.lwjgl.input.Keyboard;
  
  public class GuiMultiplayer extends GuiScreen implements GuiYesNoCallback
  {
      private static final Logger logger = LogManager.getLogger();
      private final OldServerPinger oldServerPinger = new OldServerPinger();
!     private GuiScreen parentScreen;
      private ServerSelectionList serverListSelector;
      private ServerList savedServerList;
      private GuiButton btnEditServer;
--- 1,28 ----
  package net.minecraft.client.gui;
  
  import java.io.IOException;
  import java.util.List;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ import org.lwjgl.input.Keyboard;
+ 
+ import com.google.common.base.Splitter;
+ import com.google.common.collect.Lists;
+ 
+ import clientname.Client;
  import net.minecraft.client.multiplayer.GuiConnecting;
  import net.minecraft.client.multiplayer.ServerData;
  import net.minecraft.client.multiplayer.ServerList;
  import net.minecraft.client.network.LanServerDetector;
  import net.minecraft.client.network.OldServerPinger;
  import net.minecraft.client.resources.I18n;
  
  public class GuiMultiplayer extends GuiScreen implements GuiYesNoCallback
  {
      private static final Logger logger = LogManager.getLogger();
      private final OldServerPinger oldServerPinger = new OldServerPinger();
!     protected GuiScreen parentScreen;
      private ServerSelectionList serverListSelector;
      private ServerList savedServerList;
      private GuiButton btnEditServer;
***************
*** 49,54 ****
--- 53,59 ----
       */
      public void initGui()
      {
+     	Client.getInstance().getDiscordRP().update("Idle", "Multiplayer Menu");
          Keyboard.enableRepeatEvents(true);
          this.buttonList.clear();
  
***************
*** 416,421 ****
--- 421,427 ----
                  this.btnEditServer.enabled = true;
                  this.btnDeleteServer.enabled = true;
              }
+             
          }
      }
  
diff -rc ./client/gui/GuiOptions.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiOptions.java
*** ./client/gui/GuiOptions.java	2021-04-03 11:27:24.950259000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiOptions.java	2021-03-25 22:02:49.925928800 -0700
***************
*** 96,104 ****
          this.buttonList.add(new GuiButton(100, this.width / 2 + 5, this.height / 6 + 96 - 6, 150, 20, I18n.format("options.controls", new Object[0])));
          this.buttonList.add(new GuiButton(102, this.width / 2 - 155, this.height / 6 + 120 - 6, 150, 20, I18n.format("options.language", new Object[0])));
          this.buttonList.add(new GuiButton(103, this.width / 2 + 5, this.height / 6 + 120 - 6, 150, 20, I18n.format("options.chat.title", new Object[0])));
!         this.buttonList.add(new GuiButton(105, this.width / 2 - 155, this.height / 6 + 144 - 6, 150, 20, I18n.format("options.resourcepack", new Object[0])));
          this.buttonList.add(new GuiButton(104, this.width / 2 + 5, this.height / 6 + 144 - 6, 150, 20, I18n.format("options.snooper.view", new Object[0])));
          this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, I18n.format("gui.done", new Object[0])));
      }
  
      public String func_175355_a(EnumDifficulty p_175355_1_)
--- 96,110 ----
          this.buttonList.add(new GuiButton(100, this.width / 2 + 5, this.height / 6 + 96 - 6, 150, 20, I18n.format("options.controls", new Object[0])));
          this.buttonList.add(new GuiButton(102, this.width / 2 - 155, this.height / 6 + 120 - 6, 150, 20, I18n.format("options.language", new Object[0])));
          this.buttonList.add(new GuiButton(103, this.width / 2 + 5, this.height / 6 + 120 - 6, 150, 20, I18n.format("options.chat.title", new Object[0])));
!         GuiButton nosimp = new GuiButton(105, this.width / 2 - 155, this.height / 6 + 144 - 6, 150, 20, "You can't stop simping");
!         nosimp.enabled = false;
!         
!         this.buttonList.add(nosimp);
          this.buttonList.add(new GuiButton(104, this.width / 2 + 5, this.height / 6 + 144 - 6, 150, 20, I18n.format("options.snooper.view", new Object[0])));
          this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, I18n.format("gui.done", new Object[0])));
+         
+         
+         
      }
  
      public String func_175355_a(EnumDifficulty p_175355_1_)
***************
*** 195,205 ****
                  this.mc.displayGuiScreen(this.field_146441_g);
              }
  
!             if (button.id == 105)
!             {
!                 this.mc.gameSettings.saveOptions();
!                 this.mc.displayGuiScreen(new GuiScreenResourcePacks(this));
!             }
  
              if (button.id == 106)
              {
--- 201,211 ----
                  this.mc.displayGuiScreen(this.field_146441_g);
              }
  
! //            if (button.id == 105)
! //            {
! //                this.mc.gameSettings.saveOptions();
! //                this.mc.displayGuiScreen(new GuiScreenResourcePacks(this));
! //            }
  
              if (button.id == 106)
              {
diff -rc ./client/gui/GuiOverlayDebug.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiOverlayDebug.java
*** ./client/gui/GuiOverlayDebug.java	2021-04-03 11:27:24.980254000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiOverlayDebug.java	2019-05-30 22:29:14.434874000 -0700
***************
*** 2,7 ****
--- 2,10 ----
  
  import com.google.common.base.Strings;
  import com.google.common.collect.Lists;
+ import java.util.ArrayList;
+ import java.util.Collection;
+ import java.util.Iterator;
  import java.util.List;
  import java.util.Map.Entry;
  import net.minecraft.block.Block;
***************
*** 23,28 ****
--- 26,33 ----
  import net.minecraft.world.EnumSkyBlock;
  import net.minecraft.world.WorldType;
  import net.minecraft.world.chunk.Chunk;
+ import optifine.Reflector;
+ 
  import org.lwjgl.opengl.Display;
  import org.lwjgl.opengl.GL11;
  
***************
*** 30,35 ****
--- 35,41 ----
  {
      private final Minecraft mc;
      private final FontRenderer fontRenderer;
+     private static final String __OBFID = "CL_00001956";
  
      public GuiOverlayDebug(Minecraft mc)
      {
***************
*** 44,55 ****
          this.renderDebugInfoLeft();
          this.renderDebugInfoRight(scaledResolutionIn);
          GlStateManager.popMatrix();
- 
-         if (this.mc.gameSettings.field_181657_aC)
-         {
-             this.func_181554_e();
-         }
- 
          this.mc.mcProfiler.endSection();
      }
  
--- 50,55 ----
***************
*** 60,66 ****
  
      protected void renderDebugInfoLeft()
      {
!         List<String> list = this.call();
  
          for (int i = 0; i < list.size(); ++i)
          {
--- 60,66 ----
  
      protected void renderDebugInfoLeft()
      {
!         List list = this.call();
  
          for (int i = 0; i < list.size(); ++i)
          {
***************
*** 70,86 ****
              {
                  int j = this.fontRenderer.FONT_HEIGHT;
                  int k = this.fontRenderer.getStringWidth(s);
!                 int l = 2;
!                 int i1 = 2 + j * i;
!                 drawRect(1, i1 - 1, 2 + k + 1, i1 + j - 1, -1873784752);
!                 this.fontRenderer.drawString(s, 2, i1, 14737632);
              }
          }
      }
  
      protected void renderDebugInfoRight(ScaledResolution p_175239_1_)
      {
!         List<String> list = this.getDebugInfoRight();
  
          for (int i = 0; i < list.size(); ++i)
          {
--- 70,86 ----
              {
                  int j = this.fontRenderer.FONT_HEIGHT;
                  int k = this.fontRenderer.getStringWidth(s);
!                 boolean flag = true;
!                 int l = 2 + j * i;
!                 drawRect(1, l - 1, 2 + k + 1, l + j - 1, -1873784752);
!                 this.fontRenderer.drawString(s, 2, l, 14737632);
              }
          }
      }
  
      protected void renderDebugInfoRight(ScaledResolution p_175239_1_)
      {
!         List list = this.getDebugInfoRight();
  
          for (int i = 0; i < list.size(); ++i)
          {
***************
*** 98,105 ****
          }
      }
  
!     @SuppressWarnings("incomplete-switch")
!     protected List<String> call()
      {
          BlockPos blockpos = new BlockPos(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ);
  
--- 98,104 ----
          }
      }
  
!     protected List call()
      {
          BlockPos blockpos = new BlockPos(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ);
  
***************
*** 113,143 ****
              EnumFacing enumfacing = entity.getHorizontalFacing();
              String s = "Invalid";
  
!             switch (enumfacing)
              {
!                 case NORTH:
                      s = "Towards negative Z";
                      break;
  
!                 case SOUTH:
                      s = "Towards positive Z";
                      break;
  
!                 case WEST:
                      s = "Towards negative X";
                      break;
  
!                 case EAST:
                      s = "Towards positive X";
              }
  
!             List<String> list = Lists.newArrayList(new String[] {"Minecraft 1.8.8 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.theWorld.getDebugLoadedEntities(), this.mc.theWorld.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", new Object[]{Double.valueOf(this.mc.getRenderViewEntity().posX), Double.valueOf(this.mc.getRenderViewEntity().getEntityBoundingBox().minY), Double.valueOf(this.mc.getRenderViewEntity().posZ)}), String.format("Block: %d %d %d", new Object[]{Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())}), String.format("Chunk: %d %d %d in %d %d %d", new Object[]{Integer.valueOf(blockpos.getX() & 15), Integer.valueOf(blockpos.getY() & 15), Integer.valueOf(blockpos.getZ() & 15), Integer.valueOf(blockpos.getX() >> 4), Integer.valueOf(blockpos.getY() >> 4), Integer.valueOf(blockpos.getZ() >> 4)}), String.format("Facing: %s (%s) (%.1f / %.1f)", new Object[]{enumfacing, s, Float.valueOf(MathHelper.wrapAngleTo180_float(entity.rotationYaw)), Float.valueOf(MathHelper.wrapAngleTo180_float(entity.rotationPitch))})});
  
              if (this.mc.theWorld != null && this.mc.theWorld.isBlockLoaded(blockpos))
              {
                  Chunk chunk = this.mc.theWorld.getChunkFromBlockCoords(blockpos);
!                 list.add("Biome: " + chunk.getBiome(blockpos, this.mc.theWorld.getWorldChunkManager()).biomeName);
!                 list.add("Light: " + chunk.getLightSubtracted(blockpos, 0) + " (" + chunk.getLightFor(EnumSkyBlock.SKY, blockpos) + " sky, " + chunk.getLightFor(EnumSkyBlock.BLOCK, blockpos) + " block)");
                  DifficultyInstance difficultyinstance = this.mc.theWorld.getDifficultyForLocation(blockpos);
  
                  if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
--- 112,142 ----
              EnumFacing enumfacing = entity.getHorizontalFacing();
              String s = "Invalid";
  
!             switch (GuiOverlayDebug.GuiOverlayDebug$1.field_178907_a[enumfacing.ordinal()])
              {
!                 case 1:
                      s = "Towards negative Z";
                      break;
  
!                 case 2:
                      s = "Towards positive Z";
                      break;
  
!                 case 3:
                      s = "Towards negative X";
                      break;
  
!                 case 4:
                      s = "Towards positive X";
              }
  
!             ArrayList arraylist = Lists.newArrayList(new String[] {"Minecraft 1.8.8 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.theWorld.getDebugLoadedEntities(), this.mc.theWorld.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", new Object[]{Double.valueOf(this.mc.getRenderViewEntity().posX), Double.valueOf(this.mc.getRenderViewEntity().getEntityBoundingBox().minY), Double.valueOf(this.mc.getRenderViewEntity().posZ)}), String.format("Block: %d %d %d", new Object[]{Integer.valueOf(blockpos.getX()), Integer.valueOf(blockpos.getY()), Integer.valueOf(blockpos.getZ())}), String.format("Chunk: %d %d %d in %d %d %d", new Object[]{Integer.valueOf(blockpos.getX() & 15), Integer.valueOf(blockpos.getY() & 15), Integer.valueOf(blockpos.getZ() & 15), Integer.valueOf(blockpos.getX() >> 4), Integer.valueOf(blockpos.getY() >> 4), Integer.valueOf(blockpos.getZ() >> 4)}), String.format("Facing: %s (%s) (%.1f / %.1f)", new Object[]{enumfacing, s, Float.valueOf(MathHelper.wrapAngleTo180_float(entity.rotationYaw)), Float.valueOf(MathHelper.wrapAngleTo180_float(entity.rotationPitch))})});
  
              if (this.mc.theWorld != null && this.mc.theWorld.isBlockLoaded(blockpos))
              {
                  Chunk chunk = this.mc.theWorld.getChunkFromBlockCoords(blockpos);
!                 arraylist.add("Biome: " + chunk.getBiome(blockpos, this.mc.theWorld.getWorldChunkManager()).biomeName);
!                 arraylist.add("Light: " + chunk.getLightSubtracted(blockpos, 0) + " (" + chunk.getLightFor(EnumSkyBlock.SKY, blockpos) + " sky, " + chunk.getLightFor(EnumSkyBlock.BLOCK, blockpos) + " block)");
                  DifficultyInstance difficultyinstance = this.mc.theWorld.getDifficultyForLocation(blockpos);
  
                  if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
***************
*** 150,184 ****
                      }
                  }
  
!                 list.add(String.format("Local Difficulty: %.2f (Day %d)", new Object[] {Float.valueOf(difficultyinstance.getAdditionalDifficulty()), Long.valueOf(this.mc.theWorld.getWorldTime() / 24000L)}));
              }
  
              if (this.mc.entityRenderer != null && this.mc.entityRenderer.isShaderActive())
              {
!                 list.add("Shader: " + this.mc.entityRenderer.getShaderGroup().getShaderGroupName());
              }
  
              if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK && this.mc.objectMouseOver.getBlockPos() != null)
              {
                  BlockPos blockpos1 = this.mc.objectMouseOver.getBlockPos();
!                 list.add(String.format("Looking at: %d %d %d", new Object[] {Integer.valueOf(blockpos1.getX()), Integer.valueOf(blockpos1.getY()), Integer.valueOf(blockpos1.getZ())}));
              }
  
!             return list;
          }
      }
  
!     protected List<String> getDebugInfoRight()
      {
          long i = Runtime.getRuntime().maxMemory();
          long j = Runtime.getRuntime().totalMemory();
          long k = Runtime.getRuntime().freeMemory();
          long l = j - k;
!         List<String> list = Lists.newArrayList(new String[] {String.format("Java: %s %dbit", new Object[]{System.getProperty("java.version"), Integer.valueOf(this.mc.isJava64bit() ? 64 : 32)}), String.format("Mem: % 2d%% %03d/%03dMB", new Object[]{Long.valueOf(l * 100L / i), Long.valueOf(bytesToMb(l)), Long.valueOf(bytesToMb(i))}), String.format("Allocated: % 2d%% %03dMB", new Object[]{Long.valueOf(j * 100L / i), Long.valueOf(bytesToMb(j))}), "", String.format("CPU: %s", new Object[]{OpenGlHelper.func_183029_j()}), "", String.format("Display: %dx%d (%s)", new Object[]{Integer.valueOf(Display.getWidth()), Integer.valueOf(Display.getHeight()), GL11.glGetString(GL11.GL_VENDOR)}), GL11.glGetString(GL11.GL_RENDERER), GL11.glGetString(GL11.GL_VERSION)});
  
          if (this.isReducedDebug())
          {
!             return list;
          }
          else
          {
--- 149,190 ----
                      }
                  }
  
!                 arraylist.add(String.format("Local Difficulty: %.2f (Day %d)", new Object[] {Float.valueOf(difficultyinstance.getAdditionalDifficulty()), Long.valueOf(this.mc.theWorld.getWorldTime() / 24000L)}));
              }
  
              if (this.mc.entityRenderer != null && this.mc.entityRenderer.isShaderActive())
              {
!                 arraylist.add("Shader: " + this.mc.entityRenderer.getShaderGroup().getShaderGroupName());
              }
  
              if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK && this.mc.objectMouseOver.getBlockPos() != null)
              {
                  BlockPos blockpos1 = this.mc.objectMouseOver.getBlockPos();
!                 arraylist.add(String.format("Looking at: %d %d %d", new Object[] {Integer.valueOf(blockpos1.getX()), Integer.valueOf(blockpos1.getY()), Integer.valueOf(blockpos1.getZ())}));
              }
  
!             return arraylist;
          }
      }
  
!     protected List getDebugInfoRight()
      {
          long i = Runtime.getRuntime().maxMemory();
          long j = Runtime.getRuntime().totalMemory();
          long k = Runtime.getRuntime().freeMemory();
          long l = j - k;
!         ArrayList arraylist = Lists.newArrayList(new String[] {String.format("Java: %s %dbit", new Object[]{System.getProperty("java.version"), Integer.valueOf(this.mc.isJava64bit() ? 64 : 32)}), String.format("Mem: % 2d%% %03d/%03dMB", new Object[]{Long.valueOf(l * 100L / i), Long.valueOf(bytesToMb(l)), Long.valueOf(bytesToMb(i))}), String.format("Allocated: % 2d%% %03dMB", new Object[]{Long.valueOf(j * 100L / i), Long.valueOf(bytesToMb(j))}), "", String.format("CPU: %s", new Object[]{OpenGlHelper.func_183029_j()}), "", String.format("Display: %dx%d (%s)", new Object[]{Integer.valueOf(Display.getWidth()), Integer.valueOf(Display.getHeight()), GL11.glGetString(GL11.GL_VENDOR)}), GL11.glGetString(GL11.GL_RENDERER), GL11.glGetString(GL11.GL_VERSION)});
! 
!         if (Reflector.FMLCommonHandler_getBrandings.exists())
!         {
!             Object object = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
!             arraylist.add("");
!             arraylist.addAll((Collection)Reflector.call(object, Reflector.FMLCommonHandler_getBrandings, new Object[] {Boolean.valueOf(false)}));
!         }
  
          if (this.isReducedDebug())
          {
!             return arraylist;
          }
          else
          {
***************
*** 192,203 ****
                      iblockstate = iblockstate.getBlock().getActualState(iblockstate, this.mc.theWorld, blockpos);
                  }
  
!                 list.add("");
!                 list.add(String.valueOf(Block.blockRegistry.getNameForObject(iblockstate.getBlock())));
  
!                 for (Entry<IProperty, Comparable> entry : iblockstate.getProperties().entrySet())
                  {
!                     String s = ((Comparable)entry.getValue()).toString();
  
                      if (entry.getValue() == Boolean.TRUE)
                      {
--- 198,212 ----
                      iblockstate = iblockstate.getBlock().getActualState(iblockstate, this.mc.theWorld, blockpos);
                  }
  
!                 arraylist.add("");
!                 arraylist.add(String.valueOf(Block.blockRegistry.getNameForObject(iblockstate.getBlock())));
!                 Entry entry;
!                 String s;
  
!                 for (Iterator iterator = iblockstate.getProperties().entrySet().iterator(); ((Iterator)iterator).hasNext(); arraylist.add(((IProperty)entry.getKey()).getName() + ": " + s))
                  {
!                     entry = (Entry)iterator.next();
!                     s = ((Comparable)entry.getValue()).toString();
  
                      if (entry.getValue() == Boolean.TRUE)
                      {
***************
*** 207,218 ****
                      {
                          s = EnumChatFormatting.RED + s;
                      }
- 
-                     list.add(((IProperty)entry.getKey()).getName() + ": " + s);
                  }
              }
  
!             return list;
          }
      }
  
--- 216,225 ----
                      {
                          s = EnumChatFormatting.RED + s;
                      }
                  }
              }
  
!             return arraylist;
          }
      }
  
***************
*** 281,284 ****
--- 288,336 ----
      {
          return bytes / 1024L / 1024L;
      }
+ 
+     static final class GuiOverlayDebug$1
+     {
+         static final int[] field_178907_a = new int[EnumFacing.values().length];
+         private static final String __OBFID = "CL_00001955";
+ 
+         static
+         {
+             try
+             {
+                 field_178907_a[EnumFacing.NORTH.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178907_a[EnumFacing.SOUTH.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178907_a[EnumFacing.WEST.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178907_a[EnumFacing.EAST.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/gui/GuiPlayerTabOverlay.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiPlayerTabOverlay.java
*** ./client/gui/GuiPlayerTabOverlay.java	2021-04-03 11:27:25.010341000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiPlayerTabOverlay.java	2021-03-28 23:15:58.083075900 -0700
***************
*** 3,8 ****
--- 3,12 ----
  import com.google.common.collect.ComparisonChain;
  import com.google.common.collect.Ordering;
  import com.mojang.authlib.GameProfile;
+ 
+ import clientname.event.EventPriority;
+ import clientname.event.impl.EventTabRenderPlayer;
+ 
  import java.util.Comparator;
  import java.util.List;
  import net.minecraft.client.Minecraft;
***************
*** 156,162 ****
              ++k1;
          }
  
!         drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 1, k1 + i4 * 9, Integer.MIN_VALUE);
  
          for (int k4 = 0; k4 < l3; ++k4)
          {
--- 160,166 ----
              ++k1;
          }
  
!         drawRect(width / 2 - l1 / 2 - 1, k1 - 1, width / 2 + l1 / 2 + 10, k1 + i4 * 9, Integer.MIN_VALUE);
  
          for (int k4 = 0; k4 < l3; ++k4)
          {
***************
*** 268,273 ****
--- 272,278 ----
  
          this.zLevel += 100.0F;
          this.drawTexturedModalRect(p_175245_2_ + p_175245_1_ - 11, p_175245_3_, 0 + i * 10, 176 + j * 8, 10, 8);
+         new EventTabRenderPlayer(networkPlayerInfoIn, p_175245_2_, p_175245_1_, p_175245_3_).call();
          this.zLevel -= 100.0F;
      }
  
diff -rc ./client/gui/GuiScreen.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreen.java
*** ./client/gui/GuiScreen.java	2021-04-03 11:27:25.075701000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreen.java	2019-12-28 20:50:18.820341800 -0800
***************
*** 445,450 ****
--- 445,454 ----
                  {
                      this.sendChatMessage(clickevent.getValue(), false);
                  }
+                 else if (clickevent.getAction() == ClickEvent.Action.COPY_CLIPBOARD)
+                 {
+                     this.setClipboardString(clickevent.getValue());
+                 }
                  else if (clickevent.getAction() == ClickEvent.Action.TWITCH_USER_INFO)
                  {
                      ChatUserInfo chatuserinfo = this.mc.getTwitchStream().func_152926_a(clickevent.getValue());
diff -rc ./client/gui/GuiScreenRealmsProxy.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreenRealmsProxy.java
*** ./client/gui/GuiScreenRealmsProxy.java	2021-04-03 11:27:25.153497000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreenRealmsProxy.java	2019-05-30 22:29:14.672738000 -0700
***************
*** 173,179 ****
  
      public void func_154328_b(RealmsButton p_154328_1_)
      {
!         super.buttonList.remove(p_154328_1_);
      }
  
      /**
--- 173,179 ----
  
      public void func_154328_b(RealmsButton p_154328_1_)
      {
!         super.buttonList.remove(p_154328_1_.getProxy());
      }
  
      /**
diff -rc ./client/gui/GuiScreenResourcePacks.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreenResourcePacks.java
*** ./client/gui/GuiScreenResourcePacks.java	2021-04-03 11:27:25.163493000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiScreenResourcePacks.java	2021-03-25 21:38:05.833686300 -0700
***************
*** 180,185 ****
--- 180,186 ----
  
                      Collections.reverse(list);
                      this.mc.getResourcePackRepository().setRepositories(list);
+                     
                      this.mc.gameSettings.resourcePacks.clear();
                      this.mc.gameSettings.field_183018_l.clear();
  
diff -rc ./client/gui/GuiSnooper.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiSnooper.java
*** ./client/gui/GuiSnooper.java	2021-04-03 11:27:25.285493000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiSnooper.java	2019-05-30 22:29:14.986563000 -0700
***************
*** 36,44 ****
          String s = I18n.format("options.snooper.desc", new Object[0]);
          java.util.List<String> list = Lists.<String>newArrayList();
  
!         for (String s1 : this.fontRendererObj.listFormattedStringToWidth(s, this.width - 30))
          {
!             list.add(s1);
          }
  
          this.field_146607_r = (String[])list.toArray(new String[list.size()]);
--- 36,44 ----
          String s = I18n.format("options.snooper.desc", new Object[0]);
          java.util.List<String> list = Lists.<String>newArrayList();
  
!         for (Object s1 : this.fontRendererObj.listFormattedStringToWidth(s, this.width - 30))
          {
!             list.add((String) s1);
          }
  
          this.field_146607_r = (String[])list.toArray(new String[list.size()]);
diff -rc ./client/gui/GuiVideoSettings.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiVideoSettings.java
*** ./client/gui/GuiVideoSettings.java	2021-04-03 11:27:25.340495000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/GuiVideoSettings.java	2019-05-30 22:29:15.069514000 -0700
***************
*** 1,19 ****
  package net.minecraft.client.gui;
  
  import java.io.IOException;
- import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.settings.GameSettings;
  
  public class GuiVideoSettings extends GuiScreen
  {
      private GuiScreen parentGuiScreen;
      protected String screenTitle = "Video Settings";
      private GameSettings guiGameSettings;
-     private GuiListExtended optionsRowList;
  
      /** An array of all of GameSettings.Options's video options. */
!     private static final GameSettings.Options[] videoOptions = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.ANAGLYPH, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.GAMMA, GameSettings.Options.RENDER_CLOUDS, GameSettings.Options.PARTICLES, GameSettings.Options.USE_FULLSCREEN, GameSettings.Options.ENABLE_VSYNC, GameSettings.Options.MIPMAP_LEVELS, GameSettings.Options.BLOCK_ALTERNATIVES, GameSettings.Options.USE_VBO, GameSettings.Options.ENTITY_SHADOWS};
  
      public GuiVideoSettings(GuiScreen parentScreenIn, GameSettings gameSettingsIn)
      {
--- 1,30 ----
  package net.minecraft.client.gui;
  
  import java.io.IOException;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.settings.GameSettings;
+ import optifine.Config;
+ import optifine.GuiAnimationSettingsOF;
+ import optifine.GuiDetailSettingsOF;
+ import optifine.GuiOptionButtonOF;
+ import optifine.GuiOptionSliderOF;
+ import optifine.GuiOtherSettingsOF;
+ import optifine.GuiPerformanceSettingsOF;
+ import optifine.GuiQualitySettingsOF;
+ import optifine.Lang;
+ import optifine.TooltipManager;
+ import shadersmod.client.GuiShaders;
  
  public class GuiVideoSettings extends GuiScreen
  {
      private GuiScreen parentGuiScreen;
      protected String screenTitle = "Video Settings";
      private GameSettings guiGameSettings;
  
      /** An array of all of GameSettings.Options's video options. */
!     private static GameSettings.Options[] videoOptions = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.AO_LEVEL, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.USE_VBO, GameSettings.Options.GAMMA, GameSettings.Options.BLOCK_ALTERNATIVES, GameSettings.Options.FOG_FANCY, GameSettings.Options.FOG_START};
!     private static final String __OBFID = "CL_00000718";
!     private TooltipManager tooltipManager = new TooltipManager(this);
  
      public GuiVideoSettings(GuiScreen parentScreenIn, GameSettings gameSettingsIn)
      {
***************
*** 29,67 ****
      {
          this.screenTitle = I18n.format("options.videoTitle", new Object[0]);
          this.buttonList.clear();
-         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height - 27, I18n.format("gui.done", new Object[0])));
  
!         if (!OpenGlHelper.vboSupported)
          {
!             GameSettings.Options[] agamesettings$options = new GameSettings.Options[videoOptions.length - 1];
!             int i = 0;
  
!             for (GameSettings.Options gamesettings$options : videoOptions)
              {
!                 if (gamesettings$options == GameSettings.Options.USE_VBO)
                  {
!                     break;
                  }
- 
-                 agamesettings$options[i] = gamesettings$options;
-                 ++i;
              }
- 
-             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, agamesettings$options);
          }
-         else
-         {
-             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, videoOptions);
-         }
-     }
  
!     /**
!      * Handles mouse input.
!      */
!     public void handleMouseInput() throws IOException
!     {
!         super.handleMouseInput();
!         this.optionsRowList.handleMouseInput();
      }
  
      /**
--- 40,84 ----
      {
          this.screenTitle = I18n.format("options.videoTitle", new Object[0]);
          this.buttonList.clear();
  
!         for (int i = 0; i < videoOptions.length; ++i)
          {
!             GameSettings.Options gamesettings$options = videoOptions[i];
  
!             if (gamesettings$options != null)
              {
!                 int j = this.width / 2 - 155 + i % 2 * 160;
!                 int k = this.height / 6 + 21 * (i / 2) - 12;
! 
!                 if (gamesettings$options.getEnumFloat())
                  {
!                     this.buttonList.add(new GuiOptionSliderOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options));
!                 }
!                 else
!                 {
!                     this.buttonList.add(new GuiOptionButtonOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options, this.guiGameSettings.getKeyBinding(gamesettings$options)));
                  }
              }
          }
  
!         int l = this.height / 6 + 21 * (videoOptions.length / 2) - 12;
!         int i1 = 0;
!         i1 = this.width / 2 - 155 + 0;
!         this.buttonList.add(new GuiOptionButton(231, i1, l, Lang.get("of.options.shaders")));
!         i1 = this.width / 2 - 155 + 160;
!         this.buttonList.add(new GuiOptionButton(202, i1, l, Lang.get("of.options.quality")));
!         l = l + 21;
!         i1 = this.width / 2 - 155 + 0;
!         this.buttonList.add(new GuiOptionButton(201, i1, l, Lang.get("of.options.details")));
!         i1 = this.width / 2 - 155 + 160;
!         this.buttonList.add(new GuiOptionButton(212, i1, l, Lang.get("of.options.performance")));
!         l = l + 21;
!         i1 = this.width / 2 - 155 + 0;
!         this.buttonList.add(new GuiOptionButton(211, i1, l, Lang.get("of.options.animations")));
!         i1 = this.width / 2 - 155 + 160;
!         this.buttonList.add(new GuiOptionButton(222, i1, l, Lang.get("of.options.other")));
!         l = l + 21;
!         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168 + 11, I18n.format("gui.done", new Object[0])));
      }
  
      /**
***************
*** 71,128 ****
      {
          if (button.enabled)
          {
              if (button.id == 200)
              {
                  this.mc.gameSettings.saveOptions();
                  this.mc.displayGuiScreen(this.parentGuiScreen);
              }
          }
      }
  
      /**
!      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
       */
!     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
      {
!         int i = this.guiGameSettings.guiScale;
!         super.mouseClicked(mouseX, mouseY, mouseButton);
!         this.optionsRowList.mouseClicked(mouseX, mouseY, mouseButton);
  
!         if (this.guiGameSettings.guiScale != i)
          {
!             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int j = scaledresolution.getScaledWidth();
!             int k = scaledresolution.getScaledHeight();
!             this.setWorldAndResolution(this.mc, j, k);
          }
-     }
  
!     /**
!      * Called when a mouse button is released.  Args : mouseX, mouseY, releaseButton
!      */
!     protected void mouseReleased(int mouseX, int mouseY, int state)
!     {
!         int i = this.guiGameSettings.guiScale;
!         super.mouseReleased(mouseX, mouseY, state);
!         this.optionsRowList.mouseReleased(mouseX, mouseY, state);
  
!         if (this.guiGameSettings.guiScale != i)
          {
!             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int j = scaledresolution.getScaledWidth();
!             int k = scaledresolution.getScaledHeight();
!             this.setWorldAndResolution(this.mc, j, k);
          }
      }
  
!     /**
!      * Draws the screen and all the components in it. Args : mouseX, mouseY, renderPartialTicks
!      */
!     public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         this.drawDefaultBackground();
!         this.optionsRowList.drawScreen(mouseX, mouseY, partialTicks);
!         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 5, 16777215);
!         super.drawScreen(mouseX, mouseY, partialTicks);
      }
  }
--- 88,222 ----
      {
          if (button.enabled)
          {
+             int i = this.guiGameSettings.guiScale;
+ 
+             if (button.id < 200 && button instanceof GuiOptionButton)
+             {
+                 this.guiGameSettings.setOptionValue(((GuiOptionButton)button).returnEnumOptions(), 1);
+                 button.displayString = this.guiGameSettings.getKeyBinding(GameSettings.Options.getEnumOptions(button.id));
+             }
+ 
              if (button.id == 200)
              {
                  this.mc.gameSettings.saveOptions();
                  this.mc.displayGuiScreen(this.parentGuiScreen);
              }
+ 
+             if (this.guiGameSettings.guiScale != i)
+             {
+                 ScaledResolution scaledresolution = new ScaledResolution(this.mc);
+                 int j = scaledresolution.getScaledWidth();
+                 int k = scaledresolution.getScaledHeight();
+                 this.setWorldAndResolution(this.mc, j, k);
+             }
+ 
+             if (button.id == 201)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiDetailSettingsOF guidetailsettingsof = new GuiDetailSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guidetailsettingsof);
+             }
+ 
+             if (button.id == 202)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiQualitySettingsOF guiqualitysettingsof = new GuiQualitySettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiqualitysettingsof);
+             }
+ 
+             if (button.id == 211)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiAnimationSettingsOF guianimationsettingsof = new GuiAnimationSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guianimationsettingsof);
+             }
+ 
+             if (button.id == 212)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiPerformanceSettingsOF guiperformancesettingsof = new GuiPerformanceSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiperformancesettingsof);
+             }
+ 
+             if (button.id == 222)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiOtherSettingsOF guiothersettingsof = new GuiOtherSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiothersettingsof);
+             }
+ 
+             if (button.id == 231)
+             {
+                 if (Config.isAntialiasing() || Config.isAntialiasingConfigured())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.aa1"), Lang.get("of.message.shaders.aa2"));
+                     return;
+                 }
+ 
+                 if (Config.isAnisotropicFiltering())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.af1"), Lang.get("of.message.shaders.af2"));
+                     return;
+                 }
+ 
+                 if (Config.isFastRender())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.fr1"), Lang.get("of.message.shaders.fr2"));
+                     return;
+                 }
+ 
+                 this.mc.gameSettings.saveOptions();
+                 GuiShaders guishaders = new GuiShaders(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guishaders);
+             }
          }
      }
  
      /**
!      * Draws the screen and all the components in it. Args : mouseX, mouseY, renderPartialTicks
       */
!     public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         this.drawDefaultBackground();
!         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 15, 16777215);
!         String s = Config.getVersion();
!         String s1 = "HD_U";
  
!         if (s1.equals("HD"))
          {
!             s = "OptiFine HD H8";
          }
  
!         if (s1.equals("HD_U"))
!         {
!             s = "OptiFine HD H8 Ultra";
!         }
  
!         if (s1.equals("L"))
          {
!             s = "OptiFine H8 Light";
          }
+ 
+         this.drawString(this.fontRendererObj, s, 2, this.height - 10, 8421504);
+         String s2 = "Minecraft 1.8.8";
+         int i = this.fontRendererObj.getStringWidth(s2);
+         this.drawString(this.fontRendererObj, s2, this.width - i - 2, this.height - 10, 8421504);
+         super.drawScreen(mouseX, mouseY, partialTicks);
+         this.tooltipManager.drawTooltips(mouseX, mouseY, this.buttonList);
      }
  
!     public static int getButtonWidth(GuiButton p_getButtonWidth_0_)
      {
!         return p_getButtonWidth_0_.width;
!     }
! 
!     public static int getButtonHeight(GuiButton p_getButtonHeight_0_)
!     {
!         return p_getButtonHeight_0_.height;
!     }
! 
!     public static void drawGradientRect(GuiScreen p_drawGradientRect_0_, int p_drawGradientRect_1_, int p_drawGradientRect_2_, int p_drawGradientRect_3_, int p_drawGradientRect_4_, int p_drawGradientRect_5_, int p_drawGradientRect_6_)
!     {
!         p_drawGradientRect_0_.drawGradientRect(p_drawGradientRect_1_, p_drawGradientRect_2_, p_drawGradientRect_3_, p_drawGradientRect_4_, p_drawGradientRect_5_, p_drawGradientRect_6_);
      }
  }
diff -rc ./client/gui/ServerListEntryNormal.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/ServerListEntryNormal.java
*** ./client/gui/ServerListEntryNormal.java	2021-04-03 11:27:25.433499000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/gui/ServerListEntryNormal.java	2021-04-03 12:24:13.575532900 -0700
***************
*** 1,16 ****
  package net.minecraft.client.gui;
  
  import com.google.common.base.Charsets;
  import com.google.common.util.concurrent.ThreadFactoryBuilder;
  import io.netty.buffer.ByteBuf;
  import io.netty.buffer.ByteBufInputStream;
  import io.netty.buffer.Unpooled;
  import io.netty.handler.codec.base64.Base64;
- import java.awt.image.BufferedImage;
- import java.net.UnknownHostException;
- import java.util.List;
- import java.util.concurrent.ScheduledThreadPoolExecutor;
- import java.util.concurrent.ThreadPoolExecutor;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.multiplayer.ServerData;
  import net.minecraft.client.renderer.GlStateManager;
--- 1,22 ----
  package net.minecraft.client.gui;
  
+ import java.awt.image.BufferedImage;
+ import java.net.UnknownHostException;
+ import java.util.List;
+ import java.util.concurrent.ScheduledThreadPoolExecutor;
+ import java.util.concurrent.ThreadPoolExecutor;
+ 
+ import org.apache.commons.lang3.Validate;
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ 
  import com.google.common.base.Charsets;
  import com.google.common.util.concurrent.ThreadFactoryBuilder;
+ 
  import io.netty.buffer.ByteBuf;
  import io.netty.buffer.ByteBufInputStream;
  import io.netty.buffer.Unpooled;
  import io.netty.handler.codec.base64.Base64;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.multiplayer.ServerData;
  import net.minecraft.client.renderer.GlStateManager;
***************
*** 18,26 ****
  import net.minecraft.client.renderer.texture.TextureUtil;
  import net.minecraft.util.EnumChatFormatting;
  import net.minecraft.util.ResourceLocation;
- import org.apache.commons.lang3.Validate;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
  
  public class ServerListEntryNormal implements GuiListExtended.IGuiListEntry
  {
--- 24,29 ----
***************
*** 74,83 ****
                  }
              });
          }
! 
          boolean flag = this.field_148301_e.version > 47;
          boolean flag1 = this.field_148301_e.version < 47;
          boolean flag2 = flag || flag1;
          this.mc.fontRendererObj.drawString(this.field_148301_e.serverName, x + 32 + 3, y + 1, 16777215);
          List<String> list = this.mc.fontRendererObj.listFormattedStringToWidth(this.field_148301_e.serverMOTD, listWidth - 32 - 2);
  
--- 77,87 ----
                  }
              });
          }
!         
          boolean flag = this.field_148301_e.version > 47;
          boolean flag1 = this.field_148301_e.version < 47;
          boolean flag2 = flag || flag1;
+         
          this.mc.fontRendererObj.drawString(this.field_148301_e.serverName, x + 32 + 3, y + 1, 16777215);
          List<String> list = this.mc.fontRendererObj.listFormattedStringToWidth(this.field_148301_e.serverMOTD, listWidth - 32 - 2);
  
***************
*** 228,234 ****
          }
      }
  
!     protected void func_178012_a(int p_178012_1_, int p_178012_2_, ResourceLocation p_178012_3_)
      {
          this.mc.getTextureManager().bindTexture(p_178012_3_);
          GlStateManager.enableBlend();
--- 232,243 ----
          }
      }
  
!     private void drawImg(int x, int y, boolean lower, ResourceLocation texture) {
! 		this.mc.getTextureManager().bindTexture(texture);
! 		Gui.drawModalRectWithCustomSizedTexture(x - 16, lower ? y + 16 : y, 0.0F, 0.0F, 16, 16, 16, 16);
! 	}
! 
! 	protected void func_178012_a(int p_178012_1_, int p_178012_2_, ResourceLocation p_178012_3_)
      {
          this.mc.getTextureManager().bindTexture(p_178012_3_);
          GlStateManager.enableBlend();
***************
*** 312,317 ****
--- 321,327 ----
                  this.field_148303_c.func_175393_b(this, slotIndex, GuiScreen.isShiftKeyDown());
                  return true;
              }
+ 
          }
  
          this.field_148303_c.selectServer(slotIndex);
diff -rc ./client/Minecraft.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/Minecraft.java
*** ./client/Minecraft.java	2021-04-03 11:27:24.301678000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/Minecraft.java	2021-04-03 12:28:37.955966300 -0700
***************
*** 1,18 ****
  package net.minecraft.client;
  
- import com.google.common.collect.Iterables;
- import com.google.common.collect.Lists;
- import com.google.common.collect.Maps;
- import com.google.common.collect.Queues;
- import com.google.common.collect.Sets;
- import com.google.common.util.concurrent.Futures;
- import com.google.common.util.concurrent.ListenableFuture;
- import com.google.common.util.concurrent.ListenableFutureTask;
- import com.mojang.authlib.GameProfile;
- import com.mojang.authlib.minecraft.MinecraftSessionService;
- import com.mojang.authlib.properties.Property;
- import com.mojang.authlib.properties.PropertyMap;
- import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
  import java.awt.image.BufferedImage;
  import java.io.File;
  import java.io.IOException;
--- 1,5 ----
***************
*** 34,40 ****
--- 21,67 ----
  import java.util.concurrent.Callable;
  import java.util.concurrent.Executors;
  import java.util.concurrent.FutureTask;
+ 
  import javax.imageio.ImageIO;
+ 
+ import org.apache.commons.io.IOUtils;
+ import org.apache.commons.lang3.Validate;
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ import org.lwjgl.LWJGLException;
+ import org.lwjgl.Sys;
+ import org.lwjgl.input.Keyboard;
+ import org.lwjgl.input.Mouse;
+ import org.lwjgl.opengl.ContextCapabilities;
+ import org.lwjgl.opengl.Display;
+ import org.lwjgl.opengl.DisplayMode;
+ import org.lwjgl.opengl.GL11;
+ import org.lwjgl.opengl.GL20;
+ import org.lwjgl.opengl.GLContext;
+ import org.lwjgl.opengl.OpenGLException;
+ import org.lwjgl.opengl.PixelFormat;
+ import org.lwjgl.util.glu.GLU;
+ 
+ import com.google.common.collect.Iterables;
+ import com.google.common.collect.Lists;
+ import com.google.common.collect.Maps;
+ import com.google.common.collect.Queues;
+ import com.google.common.collect.Sets;
+ import com.google.common.util.concurrent.Futures;
+ import com.google.common.util.concurrent.ListenableFuture;
+ import com.google.common.util.concurrent.ListenableFutureTask;
+ import com.mojang.authlib.GameProfile;
+ import com.mojang.authlib.minecraft.MinecraftSessionService;
+ import com.mojang.authlib.properties.Property;
+ import com.mojang.authlib.properties.PropertyMap;
+ import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+ 
+ import clientname.Client;
+ import clientname.event.impl.ClientTickEvent;
+ import clientname.event.impl.KeyEvent;
+ import clientname.event.impl.MouseEvent;
+ import clientname.event.impl.WorldUnloadEvent;
+ import clientname.gui.SplashProgress;
  import net.minecraft.block.Block;
  import net.minecraft.block.material.Material;
  import net.minecraft.client.audio.MusicTicker;
***************
*** 167,189 ****
  import net.minecraft.world.storage.ISaveFormat;
  import net.minecraft.world.storage.ISaveHandler;
  import net.minecraft.world.storage.WorldInfo;
- import org.apache.commons.io.IOUtils;
- import org.apache.commons.lang3.Validate;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- import org.lwjgl.LWJGLException;
- import org.lwjgl.Sys;
- import org.lwjgl.input.Keyboard;
- import org.lwjgl.input.Mouse;
- import org.lwjgl.opengl.ContextCapabilities;
- import org.lwjgl.opengl.Display;
- import org.lwjgl.opengl.DisplayMode;
- import org.lwjgl.opengl.GL11;
- import org.lwjgl.opengl.GL20;
- import org.lwjgl.opengl.GLContext;
- import org.lwjgl.opengl.OpenGLException;
- import org.lwjgl.opengl.PixelFormat;
- import org.lwjgl.util.glu.GLU;
  
  public class Minecraft implements IThreadListener, IPlayerUsage
  {
--- 194,199 ----
***************
*** 229,235 ****
      private Entity renderViewEntity;
      public Entity pointedEntity;
      public EffectRenderer effectRenderer;
!     private final Session session;
      private boolean isGamePaused;
  
      /** The font renderer used for displaying and measuring text */
--- 239,245 ----
      private Entity renderViewEntity;
      public Entity pointedEntity;
      public EffectRenderer effectRenderer;
!     public Session session;
      private boolean isGamePaused;
  
      /** The font renderer used for displaying and measuring text */
***************
*** 312,318 ****
      private IReloadableResourceManager mcResourceManager;
      private final IMetadataSerializer metadataSerializer_ = new IMetadataSerializer();
      private final List<IResourcePack> defaultResourcePacks = Lists.<IResourcePack>newArrayList();
!     private final DefaultResourcePack mcDefaultResourcePack;
      private ResourcePackRepository mcResourcePackRepository;
      private LanguageManager mcLanguageManager;
      private IStream stream;
--- 322,328 ----
      private IReloadableResourceManager mcResourceManager;
      private final IMetadataSerializer metadataSerializer_ = new IMetadataSerializer();
      private final List<IResourcePack> defaultResourcePacks = Lists.<IResourcePack>newArrayList();
!     public final DefaultResourcePack mcDefaultResourcePack;
      private ResourcePackRepository mcResourcePackRepository;
      private LanguageManager mcLanguageManager;
      private IStream stream;
***************
*** 377,382 ****
--- 387,393 ----
          this.tempDisplayHeight = gameConfig.displayInfo.height;
          this.fullscreen = gameConfig.displayInfo.fullscreen;
          this.jvm64bit = isJvm64bit();
+ 
          this.theIntegratedServer = new IntegratedServer(this);
  
          if (gameConfig.serverInfo.serverName != null)
***************
*** 464,469 ****
--- 475,481 ----
       */
      private void startGame() throws LWJGLException, IOException
      {
+     	Client.getInstance().init();
          this.gameSettings = new GameSettings(this, this.mcDataDir);
          this.defaultResourcePacks.add(this.mcDefaultResourcePack);
          this.startTimerHackThread();
***************
*** 489,495 ****
          this.refreshResources();
          this.renderEngine = new TextureManager(this.mcResourceManager);
          this.mcResourceManager.registerReloadListener(this.renderEngine);
!         this.drawSplashScreen(this.renderEngine);
          this.initStream();
          this.skinManager = new SkinManager(this.renderEngine, new File(this.fileAssets, "skins"), this.sessionService);
          this.saveLoader = new AnvilSaveConverter(new File(this.mcDataDir, "saves"));
--- 501,508 ----
          this.refreshResources();
          this.renderEngine = new TextureManager(this.mcResourceManager);
          this.mcResourceManager.registerReloadListener(this.renderEngine);
!         //this.drawSplashScreen(this.renderEngine);
!         SplashProgress.drawSplash(getTextureManager());
          this.initStream();
          this.skinManager = new SkinManager(this.renderEngine, new File(this.fileAssets, "skins"), this.sessionService);
          this.saveLoader = new AnvilSaveConverter(new File(this.mcDataDir, "saves"));
***************
*** 542,558 ****
--- 555,578 ----
          this.renderEngine.loadTickableTexture(TextureMap.locationBlocksTexture, this.textureMapBlocks);
          this.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
          this.textureMapBlocks.setBlurMipmapDirect(false, this.gameSettings.mipmapLevels > 0);
+         SplashProgress.setProgress(2, "Minecraft - ModelManager");
          this.modelManager = new ModelManager(this.textureMapBlocks);
          this.mcResourceManager.registerReloadListener(this.modelManager);
          this.renderItem = new RenderItem(this.renderEngine, this.modelManager);
+         SplashProgress.setProgress(3, "Minecraft - RenderItem");
          this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
+         SplashProgress.setProgress(4, "Minecraft - RenderManager");
          this.itemRenderer = new ItemRenderer(this);
+         SplashProgress.setProgress(5, "Minecraft - ItemRender");
          this.mcResourceManager.registerReloadListener(this.renderItem);
          this.entityRenderer = new EntityRenderer(this, this.mcResourceManager);
+         SplashProgress.setProgress(6, "Minecraft - EntityRender");
          this.mcResourceManager.registerReloadListener(this.entityRenderer);
          this.blockRenderDispatcher = new BlockRendererDispatcher(this.modelManager.getBlockModelShapes(), this.gameSettings);
+         SplashProgress.setProgress(6, "Minecraft - BlockRenderDispatcher");
          this.mcResourceManager.registerReloadListener(this.blockRenderDispatcher);
          this.renderGlobal = new RenderGlobal(this);
+         SplashProgress.setProgress(7, "Minecraft - RenderGlobal");
          this.mcResourceManager.registerReloadListener(this.renderGlobal);
          this.guiAchievement = new GuiAchievement(this);
          GlStateManager.viewport(0, 0, this.displayWidth, this.displayHeight);
***************
*** 589,594 ****
--- 609,615 ----
          }
  
          this.renderGlobal.makeEntityOutlineShader();
+         Client.getInstance().start();
      }
  
      private void registerMetadataSerializers()
***************
*** 616,622 ****
      private void createDisplay() throws LWJGLException
      {
          Display.setResizable(true);
!         Display.setTitle("Minecraft 1.8.8");
  
          try
          {
--- 637,643 ----
      private void createDisplay() throws LWJGLException
      {
          Display.setResizable(true);
!         Display.setTitle("Simp Client v1.0 | Minecraft 1.8.8");
  
          try
          {
***************
*** 1028,1033 ****
--- 1049,1055 ----
      {
          try
          {
+         	Client.getInstance().shutdown();
              this.stream.shutdownStream();
              logger.info("Stopping!");
  
***************
*** 1812,1817 ****
--- 1834,1845 ----
  
              while (Mouse.next())
              {
+             	MouseEvent event = new MouseEvent();
+             	event.call();
+             	if(event.isCancelled()) {
+             		continue;
+             	}
+             	
                  int i = Mouse.getEventButton();
                  KeyBinding.setKeyBindState(i - 100, Mouse.getEventButtonState());
  
***************
*** 1885,1890 ****
--- 1913,1924 ----
                  {
                      KeyBinding.onTick(k);
                  }
+                 
+                 KeyEvent event = new KeyEvent(k);
+                 event.call();
+                 if(event.isCancelled()) {
+                 	return;
+                 }
  
                  if (this.debugCrashKeyPressTime > 0L)
                  {
***************
*** 2240,2246 ****
              this.mcProfiler.endStartSection("pendingConnection");
              this.myNetworkManager.processReceivedPackets();
          }
! 
          this.mcProfiler.endSection();
          this.systemTime = getSystemTime();
      }
--- 2274,2282 ----
              this.mcProfiler.endStartSection("pendingConnection");
              this.myNetworkManager.processReceivedPackets();
          }
!         
!         new ClientTickEvent().call();
!         
          this.mcProfiler.endSection();
          this.systemTime = getSystemTime();
      }
***************
*** 2313,2318 ****
--- 2349,2355 ----
          networkmanager.sendPacket(new C00Handshake(47, socketaddress.toString(), 0, EnumConnectionState.LOGIN));
          networkmanager.sendPacket(new C00PacketLoginStart(this.getSession().getProfile()));
          this.myNetworkManager = networkmanager;
+         Client.getInstance().getDiscordRP().update("Playing Singleplayer", "In Game");
      }
  
      /**
***************
*** 2328,2333 ****
--- 2365,2375 ----
       */
      public void loadWorld(WorldClient worldClientIn, String loadingMessage)
      {
+     	
+     	if(worldClientIn != null){
+     		new WorldUnloadEvent(worldClientIn);
+     	}
+     	
          if (worldClientIn == null)
          {
              NetHandlerPlayClient nethandlerplayclient = this.getNetHandler();
***************
*** 2696,2702 ****
              {
                  StringBuilder stringbuilder = new StringBuilder();
  
!                 for (String s : Minecraft.this.gameSettings.resourcePacks)
                  {
                      if (stringbuilder.length() > 0)
                      {
--- 2738,2744 ----
              {
                  StringBuilder stringbuilder = new StringBuilder();
  
!                 for (Object s : Minecraft.this.gameSettings.resourcePacks)
                  {
                      if (stringbuilder.length() > 0)
                      {
diff -rc ./client/model/ModelPlayer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/ModelPlayer.java
*** ./client/model/ModelPlayer.java	2021-04-03 11:27:26.176492000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/ModelPlayer.java	2019-05-30 22:29:16.279290000 -0700
***************
*** 13,18 ****
--- 13,19 ----
      private ModelRenderer bipedCape;
      private ModelRenderer bipedDeadmau5Head;
      private boolean smallArms;
+     private static final String __OBFID = "CL_00002626";
  
      public ModelPlayer(float p_i46304_1_, boolean p_i46304_2_)
      {
***************
*** 128,142 ****
          copyModelAngles(this.bipedLeftArm, this.bipedLeftArmwear);
          copyModelAngles(this.bipedRightArm, this.bipedRightArmwear);
          copyModelAngles(this.bipedBody, this.bipedBodyWear);
- 
-         if (entityIn.isSneaking())
-         {
-             this.bipedCape.rotationPointY = 2.0F;
-         }
-         else
-         {
-             this.bipedCape.rotationPointY = 0.0F;
-         }
      }
  
      public void renderRightArm()
--- 129,134 ----
diff -rc ./client/model/ModelRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/ModelRenderer.java
*** ./client/model/ModelRenderer.java	2021-04-03 11:27:26.219013000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/ModelRenderer.java	2019-05-30 22:29:16.314271000 -0700
***************
*** 1,11 ****
--- 1,14 ----
  package net.minecraft.client.model;
  
  import com.google.common.collect.Lists;
+ import java.util.ArrayList;
  import java.util.List;
  import net.minecraft.client.renderer.GLAllocation;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.Tessellator;
  import net.minecraft.client.renderer.WorldRenderer;
+ import optifine.ModelSprite;
+ 
  import org.lwjgl.opengl.GL11;
  
  public class ModelRenderer
***************
*** 36,55 ****
  
      /** Hides the model. */
      public boolean isHidden;
!     public List<ModelBox> cubeList;
!     public List<ModelRenderer> childModels;
      public final String boxName;
      private ModelBase baseModel;
      public float offsetX;
      public float offsetY;
      public float offsetZ;
  
      public ModelRenderer(ModelBase model, String boxNameIn)
      {
          this.textureWidth = 64.0F;
          this.textureHeight = 32.0F;
          this.showModel = true;
!         this.cubeList = Lists.<ModelBox>newArrayList();
          this.baseModel = model;
          model.boxList.add(this);
          this.boxName = boxNameIn;
--- 39,64 ----
  
      /** Hides the model. */
      public boolean isHidden;
!     public List cubeList;
!     public List childModels;
      public final String boxName;
      private ModelBase baseModel;
      public float offsetX;
      public float offsetY;
      public float offsetZ;
+     private static final String __OBFID = "CL_00000874";
+     public List spriteList;
+     public boolean mirrorV;
+     float savedScale;
  
      public ModelRenderer(ModelBase model, String boxNameIn)
      {
+         this.spriteList = new ArrayList();
+         this.mirrorV = false;
          this.textureWidth = 64.0F;
          this.textureHeight = 32.0F;
          this.showModel = true;
!         this.cubeList = Lists.newArrayList();
          this.baseModel = model;
          model.boxList.add(this);
          this.boxName = boxNameIn;
***************
*** 74,80 ****
      {
          if (this.childModels == null)
          {
!             this.childModels = Lists.<ModelRenderer>newArrayList();
          }
  
          this.childModels.add(renderer);
--- 83,89 ----
      {
          if (this.childModels == null)
          {
!             this.childModels = Lists.newArrayList();
          }
  
          this.childModels.add(renderer);
***************
*** 125,223 ****
  
      public void render(float p_78785_1_)
      {
!         if (!this.isHidden)
          {
!             if (this.showModel)
              {
!                 if (!this.compiled)
!                 {
!                     this.compileDisplayList(p_78785_1_);
!                 }
  
!                 GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
  
!                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
                  {
!                     if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
!                     {
!                         GlStateManager.callList(this.displayList);
  
!                         if (this.childModels != null)
!                         {
!                             for (int k = 0; k < this.childModels.size(); ++k)
!                             {
!                                 ((ModelRenderer)this.childModels.get(k)).render(p_78785_1_);
!                             }
!                         }
!                     }
!                     else
                      {
!                         GlStateManager.translate(this.rotationPointX * p_78785_1_, this.rotationPointY * p_78785_1_, this.rotationPointZ * p_78785_1_);
!                         GlStateManager.callList(this.displayList);
! 
!                         if (this.childModels != null)
                          {
!                             for (int j = 0; j < this.childModels.size(); ++j)
!                             {
!                                 ((ModelRenderer)this.childModels.get(j)).render(p_78785_1_);
!                             }
                          }
- 
-                         GlStateManager.translate(-this.rotationPointX * p_78785_1_, -this.rotationPointY * p_78785_1_, -this.rotationPointZ * p_78785_1_);
                      }
                  }
                  else
                  {
-                     GlStateManager.pushMatrix();
                      GlStateManager.translate(this.rotationPointX * p_78785_1_, this.rotationPointY * p_78785_1_, this.rotationPointZ * p_78785_1_);
- 
-                     if (this.rotateAngleZ != 0.0F)
-                     {
-                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-                     }
- 
-                     if (this.rotateAngleY != 0.0F)
-                     {
-                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-                     }
- 
-                     if (this.rotateAngleX != 0.0F)
-                     {
-                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
-                     }
- 
                      GlStateManager.callList(this.displayList);
  
                      if (this.childModels != null)
                      {
!                         for (int i = 0; i < this.childModels.size(); ++i)
                          {
!                             ((ModelRenderer)this.childModels.get(i)).render(p_78785_1_);
                          }
                      }
  
!                     GlStateManager.popMatrix();
                  }
- 
-                 GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
              }
!         }
!     }
! 
!     public void renderWithRotation(float p_78791_1_)
!     {
!         if (!this.isHidden)
!         {
!             if (this.showModel)
              {
!                 if (!this.compiled)
                  {
!                     this.compileDisplayList(p_78791_1_);
                  }
  
-                 GlStateManager.pushMatrix();
-                 GlStateManager.translate(this.rotationPointX * p_78791_1_, this.rotationPointY * p_78791_1_, this.rotationPointZ * p_78791_1_);
- 
                  if (this.rotateAngleY != 0.0F)
                  {
                      GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
--- 134,188 ----
  
      public void render(float p_78785_1_)
      {
!         if (!this.isHidden && this.showModel)
          {
!             if (!this.compiled)
              {
!                 this.compileDisplayList(p_78785_1_);
!             }
  
!             GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
  
!             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
!             {
!                 if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
                  {
!                     GlStateManager.callList(this.displayList);
  
!                     if (this.childModels != null)
                      {
!                         for (int k = 0; k < this.childModels.size(); ++k)
                          {
!                             ((ModelRenderer)this.childModels.get(k)).render(p_78785_1_);
                          }
                      }
                  }
                  else
                  {
                      GlStateManager.translate(this.rotationPointX * p_78785_1_, this.rotationPointY * p_78785_1_, this.rotationPointZ * p_78785_1_);
                      GlStateManager.callList(this.displayList);
  
                      if (this.childModels != null)
                      {
!                         for (int j = 0; j < this.childModels.size(); ++j)
                          {
!                             ((ModelRenderer)this.childModels.get(j)).render(p_78785_1_);
                          }
                      }
  
!                     GlStateManager.translate(-this.rotationPointX * p_78785_1_, -this.rotationPointY * p_78785_1_, -this.rotationPointZ * p_78785_1_);
                  }
              }
!             else
              {
!                 GlStateManager.pushMatrix();
!                 GlStateManager.translate(this.rotationPointX * p_78785_1_, this.rotationPointY * p_78785_1_, this.rotationPointZ * p_78785_1_);
! 
!                 if (this.rotateAngleZ != 0.0F)
                  {
!                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                  }
  
                  if (this.rotateAngleY != 0.0F)
                  {
                      GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
***************
*** 228,241 ****
                      GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
  
!                 if (this.rotateAngleZ != 0.0F)
                  {
!                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                  }
  
-                 GlStateManager.callList(this.displayList);
                  GlStateManager.popMatrix();
              }
          }
      }
  
--- 193,244 ----
                      GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
  
!                 GlStateManager.callList(this.displayList);
! 
!                 if (this.childModels != null)
                  {
!                     for (int i = 0; i < this.childModels.size(); ++i)
!                     {
!                         ((ModelRenderer)this.childModels.get(i)).render(p_78785_1_);
!                     }
                  }
  
                  GlStateManager.popMatrix();
              }
+ 
+             GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
+         }
+     }
+ 
+     public void renderWithRotation(float p_78791_1_)
+     {
+         if (!this.isHidden && this.showModel)
+         {
+             if (!this.compiled)
+             {
+                 this.compileDisplayList(p_78791_1_);
+             }
+ 
+             GlStateManager.pushMatrix();
+             GlStateManager.translate(this.rotationPointX * p_78791_1_, this.rotationPointY * p_78791_1_, this.rotationPointZ * p_78791_1_);
+ 
+             if (this.rotateAngleY != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+             }
+ 
+             if (this.rotateAngleX != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+             }
+ 
+             if (this.rotateAngleZ != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+             }
+ 
+             GlStateManager.callList(this.displayList);
+             GlStateManager.popMatrix();
          }
      }
  
***************
*** 244,283 ****
       */
      public void postRender(float scale)
      {
!         if (!this.isHidden)
          {
!             if (this.showModel)
              {
!                 if (!this.compiled)
                  {
!                     this.compileDisplayList(scale);
                  }
  
!                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
                  {
!                     if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
!                     {
!                         GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
!                     }
                  }
-                 else
-                 {
-                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
!                     if (this.rotateAngleZ != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
!                     }
! 
!                     if (this.rotateAngleY != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
!                     }
  
!                     if (this.rotateAngleX != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
!                     }
                  }
              }
          }
--- 247,283 ----
       */
      public void postRender(float scale)
      {
!         if (!this.isHidden && this.showModel)
          {
!             if (!this.compiled)
!             {
!                 this.compileDisplayList(scale);
!             }
! 
!             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
              {
!                 if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
                  {
!                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
                  }
+             }
+             else
+             {
+                 GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
!                 if (this.rotateAngleZ != 0.0F)
                  {
!                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                  }
  
!                 if (this.rotateAngleY != 0.0F)
!                 {
!                     GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
!                 }
  
!                 if (this.rotateAngleX != 0.0F)
!                 {
!                     GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
              }
          }
***************
*** 288,294 ****
       */
      private void compileDisplayList(float scale)
      {
!         this.displayList = GLAllocation.generateDisplayLists(1);
          GL11.glNewList(this.displayList, GL11.GL_COMPILE);
          WorldRenderer worldrenderer = Tessellator.getInstance().getWorldRenderer();
  
--- 288,299 ----
       */
      private void compileDisplayList(float scale)
      {
!         if (this.displayList == 0)
!         {
!             this.savedScale = scale;
!             this.displayList = GLAllocation.generateDisplayLists(1);
!         }
! 
          GL11.glNewList(this.displayList, GL11.GL_COMPILE);
          WorldRenderer worldrenderer = Tessellator.getInstance().getWorldRenderer();
  
***************
*** 297,302 ****
--- 302,313 ----
              ((ModelBox)this.cubeList.get(i)).render(worldrenderer, scale);
          }
  
+         for (int j = 0; j < this.spriteList.size(); ++j)
+         {
+             ModelSprite modelsprite = (ModelSprite)this.spriteList.get(j);
+             modelsprite.render(Tessellator.getInstance(), scale);
+         }
+ 
          GL11.glEndList();
          this.compiled = true;
      }
***************
*** 310,313 ****
--- 321,348 ----
          this.textureHeight = (float)textureHeightIn;
          return this;
      }
+ 
+     public void addSprite(float p_addSprite_1_, float p_addSprite_2_, float p_addSprite_3_, int p_addSprite_4_, int p_addSprite_5_, int p_addSprite_6_, float p_addSprite_7_)
+     {
+         this.spriteList.add(new ModelSprite(this, this.textureOffsetX, this.textureOffsetY, p_addSprite_1_, p_addSprite_2_, p_addSprite_3_, p_addSprite_4_, p_addSprite_5_, p_addSprite_6_, p_addSprite_7_));
+     }
+ 
+     public boolean getCompiled()
+     {
+         return this.compiled;
+     }
+ 
+     public int getDisplayList()
+     {
+         return this.displayList;
+     }
+ 
+     public void resetDisplayList()
+     {
+         if (this.compiled)
+         {
+             this.compiled = false;
+             this.compileDisplayList(this.savedScale);
+         }
+     }
  }
diff -rc ./client/model/TexturedQuad.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/TexturedQuad.java
*** ./client/model/TexturedQuad.java	2021-04-03 11:27:26.486672000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/model/TexturedQuad.java	2019-05-30 22:29:16.675099000 -0700
***************
*** 4,15 ****
--- 4,18 ----
  import net.minecraft.client.renderer.WorldRenderer;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.util.Vec3;
+ import optifine.Config;
+ import shadersmod.client.SVertexFormat;
  
  public class TexturedQuad
  {
      public PositionTextureVertex[] vertexPositions;
      public int nVertices;
      private boolean invertNormal;
+     private static final String __OBFID = "CL_00000850";
  
      public TexturedQuad(PositionTextureVertex[] vertices)
      {
***************
*** 60,66 ****
              f2 = -f2;
          }
  
!         renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
  
          for (int i = 0; i < 4; ++i)
          {
--- 63,76 ----
              f2 = -f2;
          }
  
!         if (Config.isShaders())
!         {
!             renderer.begin(7, SVertexFormat.defVertexFormatTextured);
!         }
!         else
!         {
!             renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
!         }
  
          for (int i = 0; i < 4; ++i)
          {
diff -rc ./client/multiplayer/ChunkProviderClient.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/ChunkProviderClient.java
*** ./client/multiplayer/ChunkProviderClient.java	2021-04-03 11:27:26.507670000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/ChunkProviderClient.java	2019-05-30 22:29:16.711079000 -0700
***************
*** 24,30 ****
       * coordinates.
       */
      private Chunk blankChunk;
!     private LongHashMap<Chunk> chunkMapping = new LongHashMap();
      private List<Chunk> chunkListing = Lists.<Chunk>newArrayList();
  
      /** Reference to the World object. */
--- 24,30 ----
       * coordinates.
       */
      private Chunk blankChunk;
!     private LongHashMap chunkMapping = new LongHashMap();
      private List<Chunk> chunkListing = Lists.<Chunk>newArrayList();
  
      /** Reference to the World object. */
diff -rc ./client/multiplayer/GuiConnecting.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/GuiConnecting.java
*** ./client/multiplayer/GuiConnecting.java	2021-04-03 11:27:26.517673000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/GuiConnecting.java	2021-03-23 23:33:07.610683300 -0700
***************
*** 4,9 ****
--- 4,14 ----
  import java.net.InetAddress;
  import java.net.UnknownHostException;
  import java.util.concurrent.atomic.AtomicInteger;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ 
+ import clientname.Client;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.gui.GuiButton;
  import net.minecraft.client.gui.GuiDisconnected;
***************
*** 16,23 ****
  import net.minecraft.network.login.client.C00PacketLoginStart;
  import net.minecraft.util.ChatComponentText;
  import net.minecraft.util.ChatComponentTranslation;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
  
  public class GuiConnecting extends GuiScreen
  {
--- 21,26 ----
***************
*** 66,71 ****
--- 69,75 ----
                      GuiConnecting.this.networkManager.setNetHandler(new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen));
                      GuiConnecting.this.networkManager.sendPacket(new C00Handshake(47, ip, port, EnumConnectionState.LOGIN));
                      GuiConnecting.this.networkManager.sendPacket(new C00PacketLoginStart(GuiConnecting.this.mc.getSession().getProfile()));
+                     Client.getInstance().getDiscordRP().update("Playing " + ip + (port != 25565 ? ":" + port : ""), "In Game");
                  }
                  catch (UnknownHostException unknownhostexception)
                  {
diff -rc ./client/multiplayer/ServerList.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/ServerList.java
*** ./client/multiplayer/ServerList.java	2021-04-03 11:27:26.583672000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/ServerList.java	2021-04-03 12:23:05.551403700 -0700
***************
*** 1,14 ****
  package net.minecraft.client.multiplayer;
  
- import com.google.common.collect.Lists;
  import java.io.File;
  import java.util.List;
  import net.minecraft.client.Minecraft;
  import net.minecraft.nbt.CompressedStreamTools;
  import net.minecraft.nbt.NBTTagCompound;
  import net.minecraft.nbt.NBTTagList;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
  
  public class ServerList
  {
--- 1,17 ----
  package net.minecraft.client.multiplayer;
  
  import java.io.File;
  import java.util.List;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ 
+ import com.google.common.collect.Lists;
+ 
  import net.minecraft.client.Minecraft;
  import net.minecraft.nbt.CompressedStreamTools;
  import net.minecraft.nbt.NBTTagCompound;
  import net.minecraft.nbt.NBTTagList;
  
  public class ServerList
  {
***************
*** 53,59 ****
          }
      }
  
!     /**
       * Runs getNBTCompound on each ServerData instance, puts everything into a "servers" NBT list and writes it to
       * servers.dat.
       */
--- 56,62 ----
          }
      }
  
! 	/**
       * Runs getNBTCompound on each ServerData instance, puts everything into a "servers" NBT list and writes it to
       * servers.dat.
       */
***************
*** 65,71 ****
  
              for (ServerData serverdata : this.servers)
              {
!                 nbttaglist.appendTag(serverdata.getNBTCompound());
              }
  
              NBTTagCompound nbttagcompound = new NBTTagCompound();
--- 68,74 ----
  
              for (ServerData serverdata : this.servers)
              {
!             	nbttaglist.appendTag(serverdata.getNBTCompound());
              }
  
              NBTTagCompound nbttagcompound = new NBTTagCompound();
diff -rc ./client/multiplayer/WorldClient.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/WorldClient.java
*** ./client/multiplayer/WorldClient.java	2021-04-03 11:27:26.611377000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/multiplayer/WorldClient.java	2019-05-30 22:29:16.865988000 -0700
***************
*** 34,39 ****
--- 34,44 ----
  import net.minecraft.world.storage.SaveDataMemoryStorage;
  import net.minecraft.world.storage.SaveHandlerMP;
  import net.minecraft.world.storage.WorldInfo;
+ import optifine.BlockPosM;
+ import optifine.Config;
+ import optifine.DynamicLights;
+ import optifine.PlayerControllerOF;
+ import optifine.Reflector;
  
  public class WorldClient extends World
  {
***************
*** 42,63 ****
  
      /** The ChunkProviderClient instance */
      private ChunkProviderClient clientChunkProvider;
!     private final Set<Entity> entityList = Sets.<Entity>newHashSet();
!     private final Set<Entity> entitySpawnQueue = Sets.<Entity>newHashSet();
      private final Minecraft mc = Minecraft.getMinecraft();
!     private final Set<ChunkCoordIntPair> previousActiveChunkSet = Sets.<ChunkCoordIntPair>newHashSet();
  
      public WorldClient(NetHandlerPlayClient p_i45063_1_, WorldSettings p_i45063_2_, int p_i45063_3_, EnumDifficulty p_i45063_4_, Profiler p_i45063_5_)
      {
          super(new SaveHandlerMP(), new WorldInfo(p_i45063_2_, "MpServer"), WorldProvider.getProviderForDimension(p_i45063_3_), p_i45063_5_, true);
          this.sendQueue = p_i45063_1_;
          this.getWorldInfo().setDifficulty(p_i45063_4_);
-         this.setSpawnPoint(new BlockPos(8, 64, 8));
          this.provider.registerWorld(this);
          this.chunkProvider = this.createChunkProvider();
          this.mapStorage = new SaveDataMemoryStorage();
          this.calculateInitialSkylight();
          this.calculateInitialWeather();
      }
  
      /**
--- 47,84 ----
  
      /** The ChunkProviderClient instance */
      private ChunkProviderClient clientChunkProvider;
! 
!     /** Contains all entities for this client, both spawned and non-spawned. */
!     private final Set entityList = Sets.newHashSet();
! 
!     /**
!      * Contains all entities for this client that were not spawned due to a non-present chunk. The game will attempt to
!      * spawn up to 10 pending entities with each subsequent tick until the spawn queue is empty.
!      */
!     private final Set entitySpawnQueue = Sets.newHashSet();
      private final Minecraft mc = Minecraft.getMinecraft();
!     private final Set previousActiveChunkSet = Sets.newHashSet();
!     private static final String __OBFID = "CL_00000882";
!     private BlockPosM randomTickPosM = new BlockPosM(0, 0, 0, 3);
!     private boolean playerUpdate = false;
  
      public WorldClient(NetHandlerPlayClient p_i45063_1_, WorldSettings p_i45063_2_, int p_i45063_3_, EnumDifficulty p_i45063_4_, Profiler p_i45063_5_)
      {
          super(new SaveHandlerMP(), new WorldInfo(p_i45063_2_, "MpServer"), WorldProvider.getProviderForDimension(p_i45063_3_), p_i45063_5_, true);
          this.sendQueue = p_i45063_1_;
          this.getWorldInfo().setDifficulty(p_i45063_4_);
          this.provider.registerWorld(this);
+         this.setSpawnPoint(new BlockPos(8, 64, 8));
          this.chunkProvider = this.createChunkProvider();
          this.mapStorage = new SaveDataMemoryStorage();
          this.calculateInitialSkylight();
          this.calculateInitialWeather();
+         Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, new Object[] {this});
+ 
+         if (this.mc.playerController != null && this.mc.playerController.getClass() == PlayerControllerMP.class)
+         {
+             this.mc.playerController = new PlayerControllerOF(this.mc, p_i45063_1_);
+         }
      }
  
      /**
***************
*** 293,316 ****
  
      public void doVoidFogParticles(int p_73029_1_, int p_73029_2_, int p_73029_3_)
      {
!         int i = 16;
          Random random = new Random();
          ItemStack itemstack = this.mc.thePlayer.getHeldItem();
          boolean flag = this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.CREATIVE && itemstack != null && Block.getBlockFromItem(itemstack.getItem()) == Blocks.barrier;
!         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
  
!         for (int j = 0; j < 1000; ++j)
          {
!             int k = p_73029_1_ + this.rand.nextInt(i) - this.rand.nextInt(i);
!             int l = p_73029_2_ + this.rand.nextInt(i) - this.rand.nextInt(i);
!             int i1 = p_73029_3_ + this.rand.nextInt(i) - this.rand.nextInt(i);
!             blockpos$mutableblockpos.func_181079_c(k, l, i1);
!             IBlockState iblockstate = this.getBlockState(blockpos$mutableblockpos);
!             iblockstate.getBlock().randomDisplayTick(this, blockpos$mutableblockpos, iblockstate, random);
  
              if (flag && iblockstate.getBlock() == Blocks.barrier)
              {
!                 this.spawnParticle(EnumParticleTypes.BARRIER, (double)((float)k + 0.5F), (double)((float)l + 0.5F), (double)((float)i1 + 0.5F), 0.0D, 0.0D, 0.0D, new int[0]);
              }
          }
      }
--- 314,337 ----
  
      public void doVoidFogParticles(int p_73029_1_, int p_73029_2_, int p_73029_3_)
      {
!         byte b0 = 16;
          Random random = new Random();
          ItemStack itemstack = this.mc.thePlayer.getHeldItem();
          boolean flag = this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.CREATIVE && itemstack != null && Block.getBlockFromItem(itemstack.getItem()) == Blocks.barrier;
!         BlockPosM blockposm = this.randomTickPosM;
  
!         for (int i = 0; i < 1000; ++i)
          {
!             int j = p_73029_1_ + this.rand.nextInt(b0) - this.rand.nextInt(b0);
!             int k = p_73029_2_ + this.rand.nextInt(b0) - this.rand.nextInt(b0);
!             int l = p_73029_3_ + this.rand.nextInt(b0) - this.rand.nextInt(b0);
!             blockposm.setXyz(j, k, l);
!             IBlockState iblockstate = this.getBlockState(blockposm);
!             iblockstate.getBlock().randomDisplayTick(this, blockposm, iblockstate, random);
  
              if (flag && iblockstate.getBlock() == Blocks.barrier)
              {
!                 this.spawnParticle(EnumParticleTypes.BARRIER, (double)((float)j + 0.5F), (double)((float)k + 0.5F), (double)((float)l + 0.5F), 0.0D, 0.0D, 0.0D, new int[0]);
              }
          }
      }
***************
*** 378,406 ****
      public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
      {
          CrashReportCategory crashreportcategory = super.addWorldInfoToCrashReport(report);
!         crashreportcategory.addCrashSectionCallable("Forced entities", new Callable<String>()
          {
              public String call()
              {
                  return WorldClient.this.entityList.size() + " total; " + WorldClient.this.entityList.toString();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Retry entities", new Callable<String>()
          {
              public String call()
              {
                  return WorldClient.this.entitySpawnQueue.size() + " total; " + WorldClient.this.entitySpawnQueue.toString();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Server brand", new Callable<String>()
          {
              public String call() throws Exception
              {
                  return WorldClient.this.mc.thePlayer.getClientBrand();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Server type", new Callable<String>()
          {
              public String call() throws Exception
              {
                  return WorldClient.this.mc.getIntegratedServer() == null ? "Non-integrated multiplayer server" : "Integrated singleplayer server";
--- 399,431 ----
      public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
      {
          CrashReportCategory crashreportcategory = super.addWorldInfoToCrashReport(report);
!         crashreportcategory.addCrashSectionCallable("Forced entities", new Callable()
          {
+             private static final String __OBFID = "CL_00000883";
              public String call()
              {
                  return WorldClient.this.entityList.size() + " total; " + WorldClient.this.entityList.toString();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Retry entities", new Callable()
          {
+             private static final String __OBFID = "CL_00000884";
              public String call()
              {
                  return WorldClient.this.entitySpawnQueue.size() + " total; " + WorldClient.this.entitySpawnQueue.toString();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Server brand", new Callable()
          {
+             private static final String __OBFID = "CL_00000885";
              public String call() throws Exception
              {
                  return WorldClient.this.mc.thePlayer.getClientBrand();
              }
          });
!         crashreportcategory.addCrashSectionCallable("Server type", new Callable()
          {
+             private static final String __OBFID = "CL_00000886";
              public String call() throws Exception
              {
                  return WorldClient.this.mc.getIntegratedServer() == null ? "Non-integrated multiplayer server" : "Integrated singleplayer server";
***************
*** 463,466 ****
--- 488,534 ----
  
          super.setWorldTime(time);
      }
+ 
+     public int getCombinedLight(BlockPos pos, int lightValue)
+     {
+         int i = super.getCombinedLight(pos, lightValue);
+ 
+         if (Config.isDynamicLights())
+         {
+             i = DynamicLights.getCombinedLight(pos, i);
+         }
+ 
+         return i;
+     }
+ 
+     /**
+      * Sets the block state at a given location. Flag 1 will cause a block update. Flag 2 will send the change to
+      * clients (you almost always want this). Flag 4 prevents the block from being re-rendered, if this is a client
+      * world. Flags can be added together.
+      */
+     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags)
+     {
+         this.playerUpdate = this.isPlayerActing();
+         boolean flag = super.setBlockState(pos, newState, flags);
+         this.playerUpdate = false;
+         return flag;
+     }
+ 
+     private boolean isPlayerActing()
+     {
+         if (this.mc.playerController instanceof PlayerControllerOF)
+         {
+             PlayerControllerOF playercontrollerof = (PlayerControllerOF)this.mc.playerController;
+             return playercontrollerof.isActing();
+         }
+         else
+         {
+             return false;
+         }
+     }
+ 
+     public boolean isPlayerUpdate()
+     {
+         return this.playerUpdate;
+     }
  }
diff -rc ./client/network/NetHandlerPlayClient.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/network/NetHandlerPlayClient.java
*** ./client/network/NetHandlerPlayClient.java	2021-04-03 11:27:26.685465000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/network/NetHandlerPlayClient.java	2020-11-12 22:02:53.940459200 -0800
***************
*** 1964,1970 ****
              scoreplayerteam.setTeamName(packetIn.func_149306_d());
              scoreplayerteam.setNamePrefix(packetIn.func_149311_e());
              scoreplayerteam.setNameSuffix(packetIn.func_149309_f());
!             scoreplayerteam.setChatFormat(EnumChatFormatting.func_175744_a(packetIn.func_179813_h()));
              scoreplayerteam.func_98298_a(packetIn.func_149308_i());
              Team.EnumVisible team$enumvisible = Team.EnumVisible.func_178824_a(packetIn.func_179814_i());
  
--- 1964,1970 ----
              scoreplayerteam.setTeamName(packetIn.func_149306_d());
              scoreplayerteam.setNamePrefix(packetIn.func_149311_e());
              scoreplayerteam.setNameSuffix(packetIn.func_149309_f());
!             scoreplayerteam.setChatFormat(EnumChatFormatting.fromID(packetIn.func_179813_h()));
              scoreplayerteam.func_98298_a(packetIn.func_149308_i());
              Team.EnumVisible team$enumvisible = Team.EnumVisible.func_178824_a(packetIn.func_179814_i());
  
Only in C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/particle: EffectRendere#
Only in C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/particle: EffectRendere~
diff -rc ./client/particle/EffectRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/particle/EffectRenderer.java
*** ./client/particle/EffectRenderer.java	2021-04-03 11:27:26.768466000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/particle/EffectRenderer.java	2019-05-30 22:29:16.985918000 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
+ import java.util.ArrayList;
  import java.util.List;
  import java.util.Map;
  import java.util.Random;
***************
*** 23,31 ****
--- 24,35 ----
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.EnumParticleTypes;
  import net.minecraft.util.MathHelper;
+ import net.minecraft.util.MovingObjectPosition;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.World;
+ import optifine.Config;
+ import optifine.Reflector;
  
  public class EffectRenderer
  {
***************
*** 33,45 ****
  
      /** Reference to the World object. */
      protected World worldObj;
!     private List<EntityFX>[][] fxLayers = new List[4][];
!     private List<EntityParticleEmitter> particleEmitters = Lists.<EntityParticleEmitter>newArrayList();
      private TextureManager renderer;
  
      /** RNG. */
      private Random rand = new Random();
!     private Map<Integer, IParticleFactory> particleTypes = Maps.<Integer, IParticleFactory>newHashMap();
  
      public EffectRenderer(World worldIn, TextureManager rendererIn)
      {
--- 37,50 ----
  
      /** Reference to the World object. */
      protected World worldObj;
!     private List[][] fxLayers = new List[4][];
!     private List particleEmitters = Lists.newArrayList();
      private TextureManager renderer;
  
      /** RNG. */
      private Random rand = new Random();
!     private Map particleTypes = Maps.newHashMap();
!     private static final String __OBFID = "CL_00000915";
  
      public EffectRenderer(World worldIn, TextureManager rendererIn)
      {
***************
*** 137,151 ****
  
      public void addEffect(EntityFX effect)
      {
!         int i = effect.getFXLayer();
!         int j = effect.getAlpha() != 1.0F ? 0 : 1;
! 
!         if (this.fxLayers[i][j].size() >= 4000)
          {
!             this.fxLayers[i][j].remove(0);
!         }
  
!         this.fxLayers[i][j].add(effect);
      }
  
      public void updateEffects()
--- 142,165 ----
  
      public void addEffect(EntityFX effect)
      {
!         if (effect != null)
          {
!             if (!(effect instanceof EntityFirework.SparkFX) || Config.isFireworkParticles())
!             {
!                 int i = effect.getFXLayer();
!                 int j = effect.getAlpha() != 1.0F ? 0 : 1;
  
!                 if (this.fxLayers[i][j].size() >= 4000)
!                 {
!                     this.fxLayers[i][j].remove(0);
!                 }
! 
!                 if (!(effect instanceof Barrier) || !this.reuseBarrierParticle(effect, this.fxLayers[i][j]))
!                 {
!                     this.fxLayers[i][j].add(effect);
!                 }
!             }
!         }
      }
  
      public void updateEffects()
***************
*** 155,173 ****
              this.updateEffectLayer(i);
          }
  
!         List<EntityParticleEmitter> list = Lists.<EntityParticleEmitter>newArrayList();
  
!         for (EntityParticleEmitter entityparticleemitter : this.particleEmitters)
          {
              entityparticleemitter.onUpdate();
  
              if (entityparticleemitter.isDead)
              {
!                 list.add(entityparticleemitter);
              }
          }
  
!         this.particleEmitters.removeAll(list);
      }
  
      private void updateEffectLayer(int p_178922_1_)
--- 169,188 ----
              this.updateEffectLayer(i);
          }
  
!         ArrayList arraylist = Lists.newArrayList();
  
!         for (Object entityparticleemitter0 : this.particleEmitters)
          {
+             EntityParticleEmitter entityparticleemitter = (EntityParticleEmitter) entityparticleemitter0;
              entityparticleemitter.onUpdate();
  
              if (entityparticleemitter.isDead)
              {
!                 arraylist.add(entityparticleemitter);
              }
          }
  
!         this.particleEmitters.removeAll(arraylist);
      }
  
      private void updateEffectLayer(int p_178922_1_)
***************
*** 178,186 ****
          }
      }
  
!     private void updateEffectAlphaLayer(List<EntityFX> p_178925_1_)
      {
!         List<EntityFX> list = Lists.<EntityFX>newArrayList();
  
          for (int i = 0; i < p_178925_1_.size(); ++i)
          {
--- 193,201 ----
          }
      }
  
!     private void updateEffectAlphaLayer(List p_178925_1_)
      {
!         ArrayList arraylist = Lists.newArrayList();
  
          for (int i = 0; i < p_178925_1_.size(); ++i)
          {
***************
*** 189,199 ****
  
              if (entityfx.isDead)
              {
!                 list.add(entityfx);
              }
          }
  
!         p_178925_1_.removeAll(list);
      }
  
      private void tickParticle(final EntityFX p_178923_1_)
--- 204,214 ----
  
              if (entityfx.isDead)
              {
!                 arraylist.add(entityfx);
              }
          }
  
!         p_178925_1_.removeAll(arraylist);
      }
  
      private void tickParticle(final EntityFX p_178923_1_)
***************
*** 207,221 ****
              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Ticking Particle");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being ticked");
              final int i = p_178923_1_.getFXLayer();
!             crashreportcategory.addCrashSectionCallable("Particle", new Callable<String>()
              {
                  public String call() throws Exception
                  {
                      return p_178923_1_.toString();
                  }
              });
!             crashreportcategory.addCrashSectionCallable("Particle Type", new Callable<String>()
              {
                  public String call() throws Exception
                  {
                      return i == 0 ? "MISC_TEXTURE" : (i == 1 ? "TERRAIN_TEXTURE" : (i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i));
--- 222,238 ----
              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Ticking Particle");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being ticked");
              final int i = p_178923_1_.getFXLayer();
!             crashreportcategory.addCrashSectionCallable("Particle", new Callable()
              {
+                 private static final String __OBFID = "CL_00000916";
                  public String call() throws Exception
                  {
                      return p_178923_1_.toString();
                  }
              });
!             crashreportcategory.addCrashSectionCallable("Particle Type", new Callable()
              {
+                 private static final String __OBFID = "CL_00000917";
                  public String call() throws Exception
                  {
                      return i == 0 ? "MISC_TEXTURE" : (i == 1 ? "TERRAIN_TEXTURE" : (i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i));
***************
*** 244,256 ****
  
          for (int i = 0; i < 3; ++i)
          {
!             for (int j = 0; j < 2; ++j)
!             {
!                 final int i_f = i;
  
!                 if (!this.fxLayers[i][j].isEmpty())
                  {
!                     switch (j)
                      {
                          case 0:
                              GlStateManager.depthMask(false);
--- 261,273 ----
  
          for (int i = 0; i < 3; ++i)
          {
!             final int j = i;
  
!             for (int k = 0; k < 2; ++k)
!             {
!                 if (!this.fxLayers[j][k].isEmpty())
                  {
!                     switch (k)
                      {
                          case 0:
                              GlStateManager.depthMask(false);
***************
*** 260,266 ****
                              GlStateManager.depthMask(true);
                      }
  
!                     switch (i)
                      {
                          case 0:
                          default:
--- 277,283 ----
                              GlStateManager.depthMask(true);
                      }
  
!                     switch (j)
                      {
                          case 0:
                          default:
***************
*** 276,284 ****
                      WorldRenderer worldrenderer = tessellator.getWorldRenderer();
                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  
!                     for (int k = 0; k < this.fxLayers[i][j].size(); ++k)
                      {
!                         final EntityFX entityfx = (EntityFX)this.fxLayers[i][j].get(k);
  
                          try
                          {
--- 293,301 ----
                      WorldRenderer worldrenderer = tessellator.getWorldRenderer();
                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  
!                     for (int l = 0; l < this.fxLayers[j][k].size(); ++l)
                      {
!                         final EntityFX entityfx = (EntityFX)this.fxLayers[j][k].get(l);
  
                          try
                          {
***************
*** 288,305 ****
                          {
                              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering Particle");
                              CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being rendered");
!                             crashreportcategory.addCrashSectionCallable("Particle", new Callable<String>()
                              {
                                  public String call() throws Exception
                                  {
                                      return entityfx.toString();
                                  }
                              });
!                             crashreportcategory.addCrashSectionCallable("Particle Type", new Callable<String>()
                              {
                                  public String call() throws Exception
                                  {
!                                     return i_f == 0 ? "MISC_TEXTURE" : (i_f == 1 ? "TERRAIN_TEXTURE" : (i_f == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i_f));
                                  }
                              });
                              throw new ReportedException(crashreport);
--- 305,324 ----
                          {
                              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering Particle");
                              CrashReportCategory crashreportcategory = crashreport.makeCategory("Particle being rendered");
!                             crashreportcategory.addCrashSectionCallable("Particle", new Callable()
                              {
+                                 private static final String __OBFID = "CL_00000918";
                                  public String call() throws Exception
                                  {
                                      return entityfx.toString();
                                  }
                              });
!                             crashreportcategory.addCrashSectionCallable("Particle Type", new Callable()
                              {
+                                 private static final String __OBFID = "CL_00000919";
                                  public String call() throws Exception
                                  {
!                                     return j == 0 ? "MISC_TEXTURE" : (j == 1 ? "TERRAIN_TEXTURE" : (j == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + j));
                                  }
                              });
                              throw new ReportedException(crashreport);
***************
*** 327,333 ****
  
          for (int i = 0; i < 2; ++i)
          {
!             List<EntityFX> list = this.fxLayers[3][i];
  
              if (!list.isEmpty())
              {
--- 346,352 ----
  
          for (int i = 0; i < 2; ++i)
          {
!             List list = this.fxLayers[3][i];
  
              if (!list.isEmpty())
              {
***************
*** 360,379 ****
  
      public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
      {
!         if (state.getBlock().getMaterial() != Material.air)
          {
              state = state.getBlock().getActualState(state, this.worldObj, pos);
!             int i = 4;
  
!             for (int j = 0; j < i; ++j)
              {
!                 for (int k = 0; k < i; ++k)
                  {
!                     for (int l = 0; l < i; ++l)
                      {
!                         double d0 = (double)pos.getX() + ((double)j + 0.5D) / (double)i;
!                         double d1 = (double)pos.getY() + ((double)k + 0.5D) / (double)i;
!                         double d2 = (double)pos.getZ() + ((double)l + 0.5D) / (double)i;
                          this.addEffect((new EntityDiggingFX(this.worldObj, d0, d1, d2, d0 - (double)pos.getX() - 0.5D, d1 - (double)pos.getY() - 0.5D, d2 - (double)pos.getZ() - 0.5D, state)).func_174846_a(pos));
                      }
                  }
--- 379,411 ----
  
      public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
      {
!         boolean flag;
! 
!         if (Reflector.ForgeBlock_addDestroyEffects.exists() && Reflector.ForgeBlock_isAir.exists())
!         {
!             Block block = state.getBlock();
!             Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, new Object[] {this.worldObj, pos});
!             flag = !Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, new Object[] {this.worldObj, pos}) && !Reflector.callBoolean(block, Reflector.ForgeBlock_addDestroyEffects, new Object[] {this.worldObj, pos, this});
!         }
!         else
!         {
!             flag = state.getBlock().getMaterial() != Material.air;
!         }
! 
!         if (flag)
          {
              state = state.getBlock().getActualState(state, this.worldObj, pos);
!             byte b0 = 4;
  
!             for (int i = 0; i < b0; ++i)
              {
!                 for (int j = 0; j < b0; ++j)
                  {
!                     for (int k = 0; k < b0; ++k)
                      {
!                         double d0 = (double)pos.getX() + ((double)i + 0.5D) / (double)b0;
!                         double d1 = (double)pos.getY() + ((double)j + 0.5D) / (double)b0;
!                         double d2 = (double)pos.getZ() + ((double)k + 0.5D) / (double)b0;
                          this.addEffect((new EntityDiggingFX(this.worldObj, d0, d1, d2, d0 - (double)pos.getX() - 0.5D, d1 - (double)pos.getY() - 0.5D, d2 - (double)pos.getZ() - 0.5D, state)).func_174846_a(pos));
                      }
                  }
***************
*** 469,472 ****
--- 501,529 ----
  
          return "" + i;
      }
+ 
+     private boolean reuseBarrierParticle(EntityFX p_reuseBarrierParticle_1_, List<EntityFX> p_reuseBarrierParticle_2_)
+     {
+         for (EntityFX entityfx : p_reuseBarrierParticle_2_)
+         {
+             if (entityfx instanceof Barrier && p_reuseBarrierParticle_1_.posX == entityfx.posX && p_reuseBarrierParticle_1_.posY == entityfx.posY && p_reuseBarrierParticle_1_.posZ == entityfx.posZ)
+             {
+                 entityfx.particleAge = 0;
+                 return true;
+             }
+         }
+ 
+         return false;
+     }
+ 
+     public void addBlockHitEffects(BlockPos p_addBlockHitEffects_1_, MovingObjectPosition p_addBlockHitEffects_2_)
+     {
+         Block block = this.worldObj.getBlockState(p_addBlockHitEffects_1_).getBlock();
+         boolean flag = Reflector.callBoolean(block, Reflector.ForgeBlock_addHitEffects, new Object[] {this.worldObj, p_addBlockHitEffects_2_, this});
+ 
+         if (block != null && !flag)
+         {
+             this.addBlockHitEffects(p_addBlockHitEffects_1_, p_addBlockHitEffects_2_.sideHit);
+         }
+     }
  }
diff -rc ./client/renderer/block/model/BakedQuad.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/BakedQuad.java
*** ./client/renderer/block/model/BakedQuad.java	2021-04-03 11:27:27.535305000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/BakedQuad.java	2019-05-30 22:29:17.923379000 -0700
***************
*** 1,26 ****
  package net.minecraft.client.renderer.block.model;
  
  import net.minecraft.util.EnumFacing;
  
! public class BakedQuad
  {
      /**
       * Joined 4 vertex records, each has 7 fields (x, y, z, shadeColor, u, v, <unused>), see
       * FaceBakery.storeVertexData()
       */
!     protected final int[] vertexData;
      protected final int tintIndex;
      protected final EnumFacing face;
  
      public BakedQuad(int[] vertexDataIn, int tintIndexIn, EnumFacing faceIn)
      {
          this.vertexData = vertexDataIn;
          this.tintIndex = tintIndexIn;
          this.face = faceIn;
      }
  
      public int[] getVertexData()
      {
          return this.vertexData;
      }
  
--- 1,61 ----
  package net.minecraft.client.renderer.block.model;
  
+ import net.minecraft.client.Minecraft;
+ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
  import net.minecraft.util.EnumFacing;
+ import net.minecraftforge.client.model.pipeline.IVertexConsumer;
+ import net.minecraftforge.client.model.pipeline.IVertexProducer;
+ import optifine.Config;
+ import optifine.Reflector;
  
! public class BakedQuad implements IVertexProducer
  {
      /**
       * Joined 4 vertex records, each has 7 fields (x, y, z, shadeColor, u, v, <unused>), see
       * FaceBakery.storeVertexData()
       */
!     protected int[] vertexData;
      protected final int tintIndex;
      protected final EnumFacing face;
+     private static final String __OBFID = "CL_00002512";
+     private TextureAtlasSprite sprite = null;
+     private int[] vertexDataSingle = null;
+ 
+     public BakedQuad(int[] p_i9_1_, int p_i9_2_, EnumFacing p_i9_3_, TextureAtlasSprite p_i9_4_)
+     {
+         this.vertexData = p_i9_1_;
+         this.tintIndex = p_i9_2_;
+         this.face = p_i9_3_;
+         this.sprite = p_i9_4_;
+         this.fixVertexData();
+     }
+ 
+     public TextureAtlasSprite getSprite()
+     {
+         if (this.sprite == null)
+         {
+             this.sprite = getSpriteByUv(this.getVertexData());
+         }
+ 
+         return this.sprite;
+     }
+ 
+     public String toString()
+     {
+         return "vertex: " + this.vertexData.length / 7 + ", tint: " + this.tintIndex + ", facing: " + this.face + ", sprite: " + this.sprite;
+     }
  
      public BakedQuad(int[] vertexDataIn, int tintIndexIn, EnumFacing faceIn)
      {
          this.vertexData = vertexDataIn;
          this.tintIndex = tintIndexIn;
          this.face = faceIn;
+         this.fixVertexData();
      }
  
      public int[] getVertexData()
      {
+         this.fixVertexData();
          return this.vertexData;
      }
  
***************
*** 38,41 ****
--- 73,180 ----
      {
          return this.face;
      }
+ 
+     public int[] getVertexDataSingle()
+     {
+         if (this.vertexDataSingle == null)
+         {
+             this.vertexDataSingle = makeVertexDataSingle(this.getVertexData(), this.getSprite());
+         }
+ 
+         return this.vertexDataSingle;
+     }
+ 
+     private static int[] makeVertexDataSingle(int[] p_makeVertexDataSingle_0_, TextureAtlasSprite p_makeVertexDataSingle_1_)
+     {
+         int[] aint = (int[])p_makeVertexDataSingle_0_.clone();
+         int i = p_makeVertexDataSingle_1_.sheetWidth / p_makeVertexDataSingle_1_.getIconWidth();
+         int j = p_makeVertexDataSingle_1_.sheetHeight / p_makeVertexDataSingle_1_.getIconHeight();
+         int k = aint.length / 4;
+ 
+         for (int l = 0; l < 4; ++l)
+         {
+             int i1 = l * k;
+             float f = Float.intBitsToFloat(aint[i1 + 4]);
+             float f1 = Float.intBitsToFloat(aint[i1 + 4 + 1]);
+             float f2 = p_makeVertexDataSingle_1_.toSingleU(f);
+             float f3 = p_makeVertexDataSingle_1_.toSingleV(f1);
+             aint[i1 + 4] = Float.floatToRawIntBits(f2);
+             aint[i1 + 4 + 1] = Float.floatToRawIntBits(f3);
+         }
+ 
+         return aint;
+     }
+ 
+     public void pipe(IVertexConsumer p_pipe_1_)
+     {
+         Reflector.callVoid(Reflector.LightUtil_putBakedQuad, new Object[] {p_pipe_1_, this});
+     }
+ 
+     private static TextureAtlasSprite getSpriteByUv(int[] p_getSpriteByUv_0_)
+     {
+         float f = 1.0F;
+         float f1 = 1.0F;
+         float f2 = 0.0F;
+         float f3 = 0.0F;
+         int i = p_getSpriteByUv_0_.length / 4;
+ 
+         for (int j = 0; j < 4; ++j)
+         {
+             int k = j * i;
+             float f4 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4]);
+             float f5 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4 + 1]);
+             f = Math.min(f, f4);
+             f1 = Math.min(f1, f5);
+             f2 = Math.max(f2, f4);
+             f3 = Math.max(f3, f5);
+         }
+ 
+         float f6 = (f + f2) / 2.0F;
+         float f7 = (f1 + f3) / 2.0F;
+         TextureAtlasSprite textureatlassprite = Minecraft.getMinecraft().getTextureMapBlocks().getIconByUV((double)f6, (double)f7);
+         return textureatlassprite;
+     }
+ 
+     private void fixVertexData()
+     {
+         if (Config.isShaders())
+         {
+             if (this.vertexData.length == 28)
+             {
+                 this.vertexData = expandVertexData(this.vertexData);
+             }
+         }
+         else if (this.vertexData.length == 56)
+         {
+             this.vertexData = compactVertexData(this.vertexData);
+         }
+     }
+ 
+     private static int[] expandVertexData(int[] p_expandVertexData_0_)
+     {
+         int i = p_expandVertexData_0_.length / 4;
+         int j = i * 2;
+         int[] aint = new int[j * 4];
+ 
+         for (int k = 0; k < 4; ++k)
+         {
+             System.arraycopy(p_expandVertexData_0_, k * i, aint, k * j, i);
+         }
+ 
+         return aint;
+     }
+ 
+     private static int[] compactVertexData(int[] p_compactVertexData_0_)
+     {
+         int i = p_compactVertexData_0_.length / 4;
+         int j = i / 2;
+         int[] aint = new int[j * 4];
+ 
+         for (int k = 0; k < 4; ++k)
+         {
+             System.arraycopy(p_compactVertexData_0_, k * i, aint, k * j, j);
+         }
+ 
+         return aint;
+     }
  }
diff -rc ./client/renderer/block/model/BreakingFour.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/BreakingFour.java
*** ./client/renderer/block/model/BreakingFour.java	2021-04-03 11:27:27.577628000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/BreakingFour.java	2019-05-30 22:29:17.978348000 -0700
***************
*** 2,11 ****
--- 2,13 ----
  
  import java.util.Arrays;
  import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+ import net.minecraft.util.EnumFacing;
  
  public class BreakingFour extends BakedQuad
  {
      private final TextureAtlasSprite texture;
+     private static final String __OBFID = "CL_00002492";
  
      public BreakingFour(BakedQuad p_i46217_1_, TextureAtlasSprite textureIn)
      {
***************
*** 24,69 ****
  
      private void func_178216_a(int p_178216_1_)
      {
!         int i = 7 * p_178216_1_;
!         float f = Float.intBitsToFloat(this.vertexData[i]);
!         float f1 = Float.intBitsToFloat(this.vertexData[i + 1]);
!         float f2 = Float.intBitsToFloat(this.vertexData[i + 2]);
          float f3 = 0.0F;
          float f4 = 0.0F;
  
!         switch (this.face)
          {
!             case DOWN:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f2) * 16.0F;
                  break;
  
!             case UP:
                  f3 = f * 16.0F;
                  f4 = f2 * 16.0F;
                  break;
  
!             case NORTH:
                  f3 = (1.0F - f) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case SOUTH:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case WEST:
                  f3 = f2 * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case EAST:
                  f3 = (1.0F - f2) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
          }
  
!         this.vertexData[i + 4] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)f3));
!         this.vertexData[i + 4 + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)f4));
      }
  }
--- 26,135 ----
  
      private void func_178216_a(int p_178216_1_)
      {
!         int i = this.vertexData.length / 4;
!         int j = i * p_178216_1_;
!         float f = Float.intBitsToFloat(this.vertexData[j]);
!         float f1 = Float.intBitsToFloat(this.vertexData[j + 1]);
!         float f2 = Float.intBitsToFloat(this.vertexData[j + 2]);
          float f3 = 0.0F;
          float f4 = 0.0F;
  
!         switch (BreakingFour.BreakingFour$1.field_178419_a[this.face.ordinal()])
          {
!             case 1:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f2) * 16.0F;
                  break;
  
!             case 2:
                  f3 = f * 16.0F;
                  f4 = f2 * 16.0F;
                  break;
  
!             case 3:
                  f3 = (1.0F - f) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 4:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 5:
                  f3 = f2 * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 6:
                  f3 = (1.0F - f2) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
          }
  
!         this.vertexData[j + 4] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)f3));
!         this.vertexData[j + 4 + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)f4));
!     }
! 
!     static final class BreakingFour$1
!     {
!         static final int[] field_178419_a = new int[EnumFacing.values().length];
!         private static final String __OBFID = "CL_00002491";
! 
!         static
!         {
!             try
!             {
!                 field_178419_a[EnumFacing.DOWN.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var6)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178419_a[EnumFacing.UP.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var5)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178419_a[EnumFacing.NORTH.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var4)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178419_a[EnumFacing.SOUTH.ordinal()] = 4;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178419_a[EnumFacing.WEST.ordinal()] = 5;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178419_a[EnumFacing.EAST.ordinal()] = 6;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
!         }
      }
  }
diff -rc ./client/renderer/block/model/FaceBakery.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/FaceBakery.java
*** ./client/renderer/block/model/FaceBakery.java	2021-04-03 11:27:27.585629000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/block/model/FaceBakery.java	2019-05-30 22:29:17.989728000 -0700
***************
*** 6,19 ****
--- 6,25 ----
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.Vec3i;
+ import net.minecraftforge.client.model.ITransformation;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  import org.lwjgl.util.vector.Vector4f;
+ import shadersmod.client.Shaders;
  
  public class FaceBakery
  {
      private static final float field_178418_a = 1.0F / (float)Math.cos(0.39269909262657166D) - 1.0F;
      private static final float field_178417_b = 1.0F / (float)Math.cos((Math.PI / 4D)) - 1.0F;
+     private static final String __OBFID = "CL_00002490";
  
      public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, ModelRotation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
      {
***************
*** 27,45 ****
  
          if (partRotation == null)
          {
!             this.func_178408_a(aint, enumfacing);
          }
  
!         return new BakedQuad(aint, face.tintIndex, enumfacing);
      }
  
!     private int[] makeQuadVertexData(BlockPartFace partFace, TextureAtlasSprite sprite, EnumFacing facing, float[] p_178405_4_, ModelRotation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
      {
!         int[] aint = new int[28];
  
!         for (int i = 0; i < 4; ++i)
          {
!             this.fillVertexData(aint, i, facing, partFace, p_178405_4_, sprite, modelRotationIn, partRotation, uvLocked, shade);
          }
  
          return aint;
--- 33,81 ----
  
          if (partRotation == null)
          {
!             this.applyFacing(aint, enumfacing);
          }
  
!         return new BakedQuad(aint, face.tintIndex, enumfacing, sprite);
      }
  
!     public BakedQuad makeBakedQuad(Vector3f p_makeBakedQuad_1_, Vector3f p_makeBakedQuad_2_, BlockPartFace p_makeBakedQuad_3_, TextureAtlasSprite p_makeBakedQuad_4_, EnumFacing p_makeBakedQuad_5_, ITransformation p_makeBakedQuad_6_, BlockPartRotation p_makeBakedQuad_7_, boolean p_makeBakedQuad_8_, boolean p_makeBakedQuad_9_)
      {
!         int[] aint = this.makeQuadVertexData(p_makeBakedQuad_3_, p_makeBakedQuad_4_, p_makeBakedQuad_5_, this.getPositionsDiv16(p_makeBakedQuad_1_, p_makeBakedQuad_2_), p_makeBakedQuad_6_, p_makeBakedQuad_7_, p_makeBakedQuad_8_, p_makeBakedQuad_9_);
!         EnumFacing enumfacing = getFacingFromVertexData(aint);
  
!         if (p_makeBakedQuad_8_)
          {
!             this.func_178409_a(aint, enumfacing, p_makeBakedQuad_3_.blockFaceUV, p_makeBakedQuad_4_);
!         }
! 
!         if (p_makeBakedQuad_7_ == null)
!         {
!             this.applyFacing(aint, enumfacing);
!         }
! 
!         if (Reflector.ForgeHooksClient_fillNormal.exists())
!         {
!             Reflector.callVoid(Reflector.ForgeHooksClient_fillNormal, new Object[] {aint, enumfacing});
!         }
! 
!         return new BakedQuad(aint, p_makeBakedQuad_3_.tintIndex, enumfacing, p_makeBakedQuad_4_);
!     }
! 
!     private int[] makeQuadVertexData(BlockPartFace p_makeQuadVertexData_1_, TextureAtlasSprite p_makeQuadVertexData_2_, EnumFacing p_makeQuadVertexData_3_, float[] p_makeQuadVertexData_4_, ITransformation p_makeQuadVertexData_5_, BlockPartRotation p_makeQuadVertexData_6_, boolean p_makeQuadVertexData_7_, boolean p_makeQuadVertexData_8_)
!     {
!         int i = 28;
! 
!         if (Config.isShaders())
!         {
!             i = 56;
!         }
! 
!         int[] aint = new int[i];
! 
!         for (int j = 0; j < 4; ++j)
!         {
!             this.fillVertexData(aint, j, p_makeQuadVertexData_3_, p_makeQuadVertexData_1_, p_makeQuadVertexData_4_, p_makeQuadVertexData_2_, p_makeQuadVertexData_5_, p_makeQuadVertexData_6_, p_makeQuadVertexData_7_, p_makeQuadVertexData_8_);
          }
  
          return aint;
***************
*** 54,73 ****
  
      private float getFaceBrightness(EnumFacing facing)
      {
!         switch (facing)
          {
!             case DOWN:
                  return 0.5F;
  
!             case UP:
                  return 1.0F;
  
!             case NORTH:
!             case SOUTH:
                  return 0.8F;
  
!             case WEST:
!             case EAST:
                  return 0.6F;
  
              default:
--- 90,124 ----
  
      private float getFaceBrightness(EnumFacing facing)
      {
!         switch (FaceBakery.FaceBakery$1.field_178400_a[facing.ordinal()])
          {
!             case 1:
!                 if (Config.isShaders())
!                 {
!                     return Shaders.blockLightLevel05;
!                 }
! 
                  return 0.5F;
  
!             case 2:
                  return 1.0F;
  
!             case 3:
!             case 4:
!                 if (Config.isShaders())
!                 {
!                     return Shaders.blockLightLevel08;
!                 }
! 
                  return 0.8F;
  
!             case 5:
!             case 6:
!                 if (Config.isShaders())
!                 {
!                     return Shaders.blockLightLevel06;
!                 }
! 
                  return 0.6F;
  
              default:
***************
*** 87,112 ****
          return afloat;
      }
  
!     private void fillVertexData(int[] faceData, int vertexIndex, EnumFacing facing, BlockPartFace partFace, float[] p_178402_5_, TextureAtlasSprite sprite, ModelRotation modelRotationIn, BlockPartRotation partRotation, boolean uvLocked, boolean shade)
      {
!         EnumFacing enumfacing = modelRotationIn.rotateFace(facing);
!         int i = shade ? this.getFaceShadeColor(enumfacing) : -1;
!         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(facing).func_179025_a(vertexIndex);
!         Vector3f vector3f = new Vector3f(p_178402_5_[enumfacedirection$vertexinformation.field_179184_a], p_178402_5_[enumfacedirection$vertexinformation.field_179182_b], p_178402_5_[enumfacedirection$vertexinformation.field_179183_c]);
!         this.func_178407_a(vector3f, partRotation);
!         int j = this.rotateVertex(vector3f, facing, vertexIndex, modelRotationIn, uvLocked);
!         this.storeVertexData(faceData, j, vertexIndex, vector3f, i, sprite, partFace.blockFaceUV);
      }
  
      private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
      {
!         int i = storeIndex * 7;
!         faceData[i] = Float.floatToRawIntBits(position.x);
!         faceData[i + 1] = Float.floatToRawIntBits(position.y);
!         faceData[i + 2] = Float.floatToRawIntBits(position.z);
!         faceData[i + 3] = shadeColor;
!         faceData[i + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.func_178348_a(vertexIndex)));
!         faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.func_178346_b(vertexIndex)));
      }
  
      private void func_178407_a(Vector3f p_178407_1_, BlockPartRotation partRotation)
--- 138,164 ----
          return afloat;
      }
  
!     private void fillVertexData(int[] p_fillVertexData_1_, int p_fillVertexData_2_, EnumFacing p_fillVertexData_3_, BlockPartFace p_fillVertexData_4_, float[] p_fillVertexData_5_, TextureAtlasSprite p_fillVertexData_6_, ITransformation p_fillVertexData_7_, BlockPartRotation p_fillVertexData_8_, boolean p_fillVertexData_9_, boolean p_fillVertexData_10_)
      {
!         EnumFacing enumfacing = p_fillVertexData_7_.rotate(p_fillVertexData_3_);
!         int i = p_fillVertexData_10_ ? this.getFaceShadeColor(enumfacing) : -1;
!         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_fillVertexData_3_).func_179025_a(p_fillVertexData_2_);
!         Vector3f vector3f = new Vector3f(p_fillVertexData_5_[enumfacedirection$vertexinformation.field_179184_a], p_fillVertexData_5_[enumfacedirection$vertexinformation.field_179182_b], p_fillVertexData_5_[enumfacedirection$vertexinformation.field_179183_c]);
!         this.func_178407_a(vector3f, p_fillVertexData_8_);
!         int j = this.rotateVertex(vector3f, p_fillVertexData_3_, p_fillVertexData_2_, p_fillVertexData_7_, p_fillVertexData_9_);
!         this.storeVertexData(p_fillVertexData_1_, j, p_fillVertexData_2_, vector3f, i, p_fillVertexData_6_, p_fillVertexData_4_.blockFaceUV);
      }
  
      private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
      {
!         int i = faceData.length / 4;
!         int j = storeIndex * i;
!         faceData[j] = Float.floatToRawIntBits(position.x);
!         faceData[j + 1] = Float.floatToRawIntBits(position.y);
!         faceData[j + 2] = Float.floatToRawIntBits(position.z);
!         faceData[j + 3] = shadeColor;
!         faceData[j + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.func_178348_a(vertexIndex)));
!         faceData[j + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.func_178346_b(vertexIndex)));
      }
  
      private void func_178407_a(Vector3f p_178407_1_, BlockPartRotation partRotation)
***************
*** 116,134 ****
              Matrix4f matrix4f = this.getMatrixIdentity();
              Vector3f vector3f = new Vector3f(0.0F, 0.0F, 0.0F);
  
!             switch (partRotation.axis)
              {
!                 case X:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
                      vector3f.set(0.0F, 1.0F, 1.0F);
                      break;
  
!                 case Y:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
                      vector3f.set(1.0F, 0.0F, 1.0F);
                      break;
  
!                 case Z:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
                      vector3f.set(1.0F, 1.0F, 0.0F);
              }
--- 168,186 ----
              Matrix4f matrix4f = this.getMatrixIdentity();
              Vector3f vector3f = new Vector3f(0.0F, 0.0F, 0.0F);
  
!             switch (FaceBakery.FaceBakery$1.field_178399_b[partRotation.axis.ordinal()])
              {
!                 case 1:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
                      vector3f.set(0.0F, 1.0F, 1.0F);
                      break;
  
!                 case 2:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f, matrix4f);
                      vector3f.set(1.0F, 0.0F, 1.0F);
                      break;
  
!                 case 3:
                      Matrix4f.rotate(partRotation.angle * 0.017453292F, new Vector3f(0.0F, 0.0F, 1.0F), matrix4f, matrix4f);
                      vector3f.set(1.0F, 1.0F, 0.0F);
              }
***************
*** 157,170 ****
  
      public int rotateVertex(Vector3f position, EnumFacing facing, int vertexIndex, ModelRotation modelRotationIn, boolean uvLocked)
      {
!         if (modelRotationIn == ModelRotation.X0_Y0)
          {
!             return vertexIndex;
          }
          else
          {
!             this.rotateScale(position, new Vector3f(0.5F, 0.5F, 0.5F), modelRotationIn.getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
!             return modelRotationIn.rotateVertex(facing, vertexIndex);
          }
      }
  
--- 209,235 ----
  
      public int rotateVertex(Vector3f position, EnumFacing facing, int vertexIndex, ModelRotation modelRotationIn, boolean uvLocked)
      {
!         return this.rotateVertex(position, facing, vertexIndex, modelRotationIn, uvLocked);
!     }
! 
!     public int rotateVertex(Vector3f p_rotateVertex_1_, EnumFacing p_rotateVertex_2_, int p_rotateVertex_3_, ITransformation p_rotateVertex_4_, boolean p_rotateVertex_5_)
!     {
!         if (p_rotateVertex_4_ == ModelRotation.X0_Y0)
          {
!             return p_rotateVertex_3_;
          }
          else
          {
!             if (Reflector.ForgeHooksClient_transform.exists())
!             {
!                 Reflector.call(Reflector.ForgeHooksClient_transform, new Object[] {p_rotateVertex_1_, p_rotateVertex_4_.getMatrix()});
!             }
!             else
!             {
!                 this.rotateScale(p_rotateVertex_1_, new Vector3f(0.5F, 0.5F, 0.5F), ((ModelRotation)p_rotateVertex_4_).getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
!             }
! 
!             return p_rotateVertex_4_.rotate(p_rotateVertex_2_, p_rotateVertex_3_);
          }
      }
  
***************
*** 187,195 ****
  
      public static EnumFacing getFacingFromVertexData(int[] faceData)
      {
          Vector3f vector3f = new Vector3f(Float.intBitsToFloat(faceData[0]), Float.intBitsToFloat(faceData[1]), Float.intBitsToFloat(faceData[2]));
!         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[7]), Float.intBitsToFloat(faceData[8]), Float.intBitsToFloat(faceData[9]));
!         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[14]), Float.intBitsToFloat(faceData[15]), Float.intBitsToFloat(faceData[16]));
          Vector3f vector3f3 = new Vector3f();
          Vector3f vector3f4 = new Vector3f();
          Vector3f vector3f5 = new Vector3f();
--- 252,263 ----
  
      public static EnumFacing getFacingFromVertexData(int[] faceData)
      {
+         int i = faceData.length / 4;
+         int j = i * 2;
+         int k = i * 3;
          Vector3f vector3f = new Vector3f(Float.intBitsToFloat(faceData[0]), Float.intBitsToFloat(faceData[1]), Float.intBitsToFloat(faceData[2]));
!         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[i]), Float.intBitsToFloat(faceData[i + 1]), Float.intBitsToFloat(faceData[i + 2]));
!         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[j]), Float.intBitsToFloat(faceData[j + 1]), Float.intBitsToFloat(faceData[j + 2]));
          Vector3f vector3f3 = new Vector3f();
          Vector3f vector3f4 = new Vector3f();
          Vector3f vector3f5 = new Vector3f();
***************
*** 216,229 ****
              }
          }
  
!         if (enumfacing == null)
          {
!             return EnumFacing.UP;
!         }
!         else
!         {
!             return enumfacing;
          }
      }
  
      public void func_178409_a(int[] p_178409_1_, EnumFacing facing, BlockFaceUV p_178409_3_, TextureAtlasSprite p_178409_4_)
--- 284,302 ----
              }
          }
  
!         if (f1 < 0.719F)
          {
!             if (enumfacing != EnumFacing.EAST && enumfacing != EnumFacing.WEST && enumfacing != EnumFacing.NORTH && enumfacing != EnumFacing.SOUTH)
!             {
!                 enumfacing = EnumFacing.UP;
!             }
!             else
!             {
!                 enumfacing = EnumFacing.NORTH;
!             }
          }
+ 
+         return enumfacing == null ? EnumFacing.UP : enumfacing;
      }
  
      public void func_178409_a(int[] p_178409_1_, EnumFacing facing, BlockFaceUV p_178409_3_, TextureAtlasSprite p_178409_4_)
***************
*** 234,243 ****
          }
      }
  
!     private void func_178408_a(int[] p_178408_1_, EnumFacing p_178408_2_)
      {
!         int[] aint = new int[p_178408_1_.length];
!         System.arraycopy(p_178408_1_, 0, aint, 0, p_178408_1_.length);
          float[] afloat = new float[EnumFacing.values().length];
          afloat[EnumFaceDirection.Constants.WEST_INDEX] = 999.0F;
          afloat[EnumFaceDirection.Constants.DOWN_INDEX] = 999.0F;
--- 307,316 ----
          }
      }
  
!     private void applyFacing(int[] p_applyFacing_1_, EnumFacing p_applyFacing_2_)
      {
!         int[] aint = new int[p_applyFacing_1_.length];
!         System.arraycopy(p_applyFacing_1_, 0, aint, 0, p_applyFacing_1_.length);
          float[] afloat = new float[EnumFacing.values().length];
          afloat[EnumFaceDirection.Constants.WEST_INDEX] = 999.0F;
          afloat[EnumFaceDirection.Constants.DOWN_INDEX] = 999.0F;
***************
*** 245,313 ****
          afloat[EnumFaceDirection.Constants.EAST_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.UP_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = -999.0F;
  
!         for (int i = 0; i < 4; ++i)
          {
!             int j = 7 * i;
!             float f = Float.intBitsToFloat(aint[j]);
!             float f1 = Float.intBitsToFloat(aint[j + 1]);
!             float f2 = Float.intBitsToFloat(aint[j + 2]);
  
!             if (f < afloat[EnumFaceDirection.Constants.WEST_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.WEST_INDEX] = f;
              }
  
!             if (f1 < afloat[EnumFaceDirection.Constants.DOWN_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.DOWN_INDEX] = f1;
              }
  
!             if (f2 < afloat[EnumFaceDirection.Constants.NORTH_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.NORTH_INDEX] = f2;
              }
  
!             if (f > afloat[EnumFaceDirection.Constants.EAST_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.EAST_INDEX] = f;
              }
  
!             if (f1 > afloat[EnumFaceDirection.Constants.UP_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.UP_INDEX] = f1;
              }
  
!             if (f2 > afloat[EnumFaceDirection.Constants.SOUTH_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = f2;
              }
          }
  
!         EnumFaceDirection enumfacedirection = EnumFaceDirection.getFacing(p_178408_2_);
  
!         for (int i1 = 0; i1 < 4; ++i1)
          {
!             int j1 = 7 * i1;
!             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.func_179025_a(i1);
              float f8 = afloat[enumfacedirection$vertexinformation.field_179184_a];
              float f3 = afloat[enumfacedirection$vertexinformation.field_179182_b];
              float f4 = afloat[enumfacedirection$vertexinformation.field_179183_c];
!             p_178408_1_[j1] = Float.floatToRawIntBits(f8);
!             p_178408_1_[j1 + 1] = Float.floatToRawIntBits(f3);
!             p_178408_1_[j1 + 2] = Float.floatToRawIntBits(f4);
! 
!             for (int k = 0; k < 4; ++k)
!             {
!                 int l = 7 * k;
!                 float f5 = Float.intBitsToFloat(aint[l]);
!                 float f6 = Float.intBitsToFloat(aint[l + 1]);
!                 float f7 = Float.intBitsToFloat(aint[l + 2]);
  
                  if (MathHelper.epsilonEquals(f8, f5) && MathHelper.epsilonEquals(f3, f6) && MathHelper.epsilonEquals(f4, f7))
                  {
!                     p_178408_1_[j1 + 4] = aint[l + 4];
!                     p_178408_1_[j1 + 4 + 1] = aint[l + 4 + 1];
                  }
              }
          }
--- 318,387 ----
          afloat[EnumFaceDirection.Constants.EAST_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.UP_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = -999.0F;
+         int j = p_applyFacing_1_.length / 4;
  
!         for (int k = 0; k < 4; ++k)
          {
!             int i = j * k;
!             float f1 = Float.intBitsToFloat(aint[i]);
!             float f2 = Float.intBitsToFloat(aint[i + 1]);
!             float f = Float.intBitsToFloat(aint[i + 2]);
  
!             if (f1 < afloat[EnumFaceDirection.Constants.WEST_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.WEST_INDEX] = f1;
              }
  
!             if (f2 < afloat[EnumFaceDirection.Constants.DOWN_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.DOWN_INDEX] = f2;
              }
  
!             if (f < afloat[EnumFaceDirection.Constants.NORTH_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.NORTH_INDEX] = f;
              }
  
!             if (f1 > afloat[EnumFaceDirection.Constants.EAST_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.EAST_INDEX] = f1;
              }
  
!             if (f2 > afloat[EnumFaceDirection.Constants.UP_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.UP_INDEX] = f2;
              }
  
!             if (f > afloat[EnumFaceDirection.Constants.SOUTH_INDEX])
              {
!                 afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = f;
              }
          }
  
!         EnumFaceDirection enumfacedirection = EnumFaceDirection.getFacing(p_applyFacing_2_);
  
!         for (int j1 = 0; j1 < 4; ++j1)
          {
!             int k1 = j * j1;
!             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.func_179025_a(j1);
              float f8 = afloat[enumfacedirection$vertexinformation.field_179184_a];
              float f3 = afloat[enumfacedirection$vertexinformation.field_179182_b];
              float f4 = afloat[enumfacedirection$vertexinformation.field_179183_c];
!             p_applyFacing_1_[k1] = Float.floatToRawIntBits(f8);
!             p_applyFacing_1_[k1 + 1] = Float.floatToRawIntBits(f3);
!             p_applyFacing_1_[k1 + 2] = Float.floatToRawIntBits(f4);
! 
!             for (int l = 0; l < 4; ++l)
!             {
!                 int i1 = j * l;
!                 float f5 = Float.intBitsToFloat(aint[i1]);
!                 float f6 = Float.intBitsToFloat(aint[i1 + 1]);
!                 float f7 = Float.intBitsToFloat(aint[i1 + 2]);
  
                  if (MathHelper.epsilonEquals(f8, f5) && MathHelper.epsilonEquals(f3, f6) && MathHelper.epsilonEquals(f4, f7))
                  {
!                     p_applyFacing_1_[k1 + 4] = aint[i1 + 4];
!                     p_applyFacing_1_[k1 + 4 + 1] = aint[i1 + 4 + 1];
                  }
              }
          }
***************
*** 315,324 ****
  
      private void func_178401_a(int p_178401_1_, int[] p_178401_2_, EnumFacing facing, BlockFaceUV p_178401_4_, TextureAtlasSprite p_178401_5_)
      {
!         int i = 7 * p_178401_1_;
!         float f = Float.intBitsToFloat(p_178401_2_[i]);
!         float f1 = Float.intBitsToFloat(p_178401_2_[i + 1]);
!         float f2 = Float.intBitsToFloat(p_178401_2_[i + 2]);
  
          if (f < -0.1F || f >= 1.1F)
          {
--- 389,399 ----
  
      private void func_178401_a(int p_178401_1_, int[] p_178401_2_, EnumFacing facing, BlockFaceUV p_178401_4_, TextureAtlasSprite p_178401_5_)
      {
!         int i = p_178401_2_.length / 4;
!         int j = i * p_178401_1_;
!         float f = Float.intBitsToFloat(p_178401_2_[j]);
!         float f1 = Float.intBitsToFloat(p_178401_2_[j + 1]);
!         float f2 = Float.intBitsToFloat(p_178401_2_[j + 2]);
  
          if (f < -0.1F || f >= 1.1F)
          {
***************
*** 338,377 ****
          float f3 = 0.0F;
          float f4 = 0.0F;
  
!         switch (facing)
          {
!             case DOWN:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f2) * 16.0F;
                  break;
  
!             case UP:
                  f3 = f * 16.0F;
                  f4 = f2 * 16.0F;
                  break;
  
!             case NORTH:
                  f3 = (1.0F - f) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case SOUTH:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case WEST:
                  f3 = f2 * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case EAST:
                  f3 = (1.0F - f2) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
          }
  
!         int j = p_178401_4_.func_178345_c(p_178401_1_) * 7;
!         p_178401_2_[j + 4] = Float.floatToRawIntBits(p_178401_5_.getInterpolatedU((double)f3));
!         p_178401_2_[j + 4 + 1] = Float.floatToRawIntBits(p_178401_5_.getInterpolatedV((double)f4));
      }
  }
--- 413,545 ----
          float f3 = 0.0F;
          float f4 = 0.0F;
  
!         switch (FaceBakery.FaceBakery$1.field_178400_a[facing.ordinal()])
          {
!             case 1:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f2) * 16.0F;
                  break;
  
!             case 2:
                  f3 = f * 16.0F;
                  f4 = f2 * 16.0F;
                  break;
  
!             case 3:
                  f3 = (1.0F - f) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 4:
                  f3 = f * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 5:
                  f3 = f2 * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
                  break;
  
!             case 6:
                  f3 = (1.0F - f2) * 16.0F;
                  f4 = (1.0F - f1) * 16.0F;
          }
  
!         int k = p_178401_4_.func_178345_c(p_178401_1_) * i;
!         p_178401_2_[k + 4] = Float.floatToRawIntBits(p_178401_5_.getInterpolatedU((double)f3));
!         p_178401_2_[k + 4 + 1] = Float.floatToRawIntBits(p_178401_5_.getInterpolatedV((double)f4));
!     }
! 
!     static final class FaceBakery$1
!     {
!         static final int[] field_178400_a;
!         static final int[] field_178399_b = new int[EnumFacing.Axis.values().length];
!         private static final String __OBFID = "CL_00002489";
! 
!         static
!         {
!             try
!             {
!                 field_178399_b[EnumFacing.Axis.X.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var9)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178399_b[EnumFacing.Axis.Y.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var8)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178399_b[EnumFacing.Axis.Z.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var7)
!             {
!                 ;
!             }
! 
!             field_178400_a = new int[EnumFacing.values().length];
! 
!             try
!             {
!                 field_178400_a[EnumFacing.DOWN.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var6)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178400_a[EnumFacing.UP.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var5)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178400_a[EnumFacing.NORTH.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var4)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178400_a[EnumFacing.SOUTH.ordinal()] = 4;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178400_a[EnumFacing.WEST.ordinal()] = 5;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178400_a[EnumFacing.EAST.ordinal()] = 6;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
!         }
      }
  }
diff -rc ./client/renderer/BlockFluidRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockFluidRenderer.java
*** ./client/renderer/BlockFluidRenderer.java	2021-04-03 11:27:27.189424000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockFluidRenderer.java	2019-05-30 22:29:17.438657000 -0700
***************
*** 10,20 ****
--- 10,23 ----
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.MathHelper;
  import net.minecraft.world.IBlockAccess;
+ import optifine.CustomColors;
+ import optifine.RenderEnv;
  
  public class BlockFluidRenderer
  {
      private TextureAtlasSprite[] atlasSpritesLava = new TextureAtlasSprite[2];
      private TextureAtlasSprite[] atlasSpritesWater = new TextureAtlasSprite[2];
+     private static final String __OBFID = "CL_00002519";
  
      public BlockFluidRenderer()
      {
***************
*** 35,47 ****
          BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
          blockliquid.setBlockBoundsBasedOnState(blockAccess, blockPosIn);
          TextureAtlasSprite[] atextureatlassprite = blockliquid.getMaterial() == Material.lava ? this.atlasSpritesLava : this.atlasSpritesWater;
!         int i = blockliquid.colorMultiplier(blockAccess, blockPosIn);
          float f = (float)(i >> 16 & 255) / 255.0F;
          float f1 = (float)(i >> 8 & 255) / 255.0F;
          float f2 = (float)(i & 255) / 255.0F;
          boolean flag = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.up(), EnumFacing.UP);
          boolean flag1 = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.down(), EnumFacing.DOWN);
!         boolean[] aboolean = new boolean[] {blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.north(), EnumFacing.NORTH), blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.south(), EnumFacing.SOUTH), blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.west(), EnumFacing.WEST), blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.east(), EnumFacing.EAST)};
  
          if (!flag && !flag1 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
          {
--- 38,55 ----
          BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
          blockliquid.setBlockBoundsBasedOnState(blockAccess, blockPosIn);
          TextureAtlasSprite[] atextureatlassprite = blockliquid.getMaterial() == Material.lava ? this.atlasSpritesLava : this.atlasSpritesWater;
!         RenderEnv renderenv = RenderEnv.getInstance(blockAccess, blockStateIn, blockPosIn);
!         int i = CustomColors.getFluidColor(blockAccess, blockStateIn, blockPosIn, renderenv);
          float f = (float)(i >> 16 & 255) / 255.0F;
          float f1 = (float)(i >> 8 & 255) / 255.0F;
          float f2 = (float)(i & 255) / 255.0F;
          boolean flag = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.up(), EnumFacing.UP);
          boolean flag1 = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.down(), EnumFacing.DOWN);
!         boolean[] aboolean = renderenv.getBorderFlags();
!         aboolean[0] = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.north(), EnumFacing.NORTH);
!         aboolean[1] = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.south(), EnumFacing.SOUTH);
!         aboolean[2] = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.west(), EnumFacing.WEST);
!         aboolean[3] = blockliquid.shouldSideBeRendered(blockAccess, blockPosIn.east(), EnumFacing.EAST);
  
          if (!flag && !flag1 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
          {
***************
*** 75,80 ****
--- 83,89 ----
                      textureatlassprite = atextureatlassprite[1];
                  }
  
+                 worldRendererIn.setSprite(textureatlassprite);
                  f7 -= f11;
                  f8 -= f11;
                  f9 -= f11;
***************
*** 84,136 ****
                  float f15;
                  float f16;
                  float f17;
-                 float f18;
                  float f19;
                  float f20;
  
                  if (f12 < -999.0F)
                  {
                      f13 = textureatlassprite.getInterpolatedU(0.0D);
                      f17 = textureatlassprite.getInterpolatedV(0.0D);
                      f14 = f13;
!                     f18 = textureatlassprite.getInterpolatedV(16.0D);
                      f15 = textureatlassprite.getInterpolatedU(16.0D);
!                     f19 = f18;
                      f16 = f15;
!                     f20 = f17;
                  }
                  else
                  {
!                     float f21 = MathHelper.sin(f12) * 0.25F;
!                     float f22 = MathHelper.cos(f12) * 0.25F;
!                     float f23 = 8.0F;
!                     f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
!                     f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
!                     f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
!                     f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
!                     f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
!                     f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
!                     f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
!                     f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
                  }
  
                  int k2 = blockliquid.getMixedBrightnessForBlock(blockAccess, blockPosIn);
                  int l2 = k2 >> 16 & 65535;
                  int i3 = k2 & 65535;
!                 float f24 = f4 * f;
!                 float f25 = f4 * f1;
!                 float f26 = f4 * f2;
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
  
                  if (blockliquid.func_176364_g(blockAccess, blockPosIn.up()))
                  {
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
                  }
              }
  
--- 93,145 ----
                  float f15;
                  float f16;
                  float f17;
                  float f19;
                  float f20;
+                 float f21;
  
                  if (f12 < -999.0F)
                  {
                      f13 = textureatlassprite.getInterpolatedU(0.0D);
                      f17 = textureatlassprite.getInterpolatedV(0.0D);
                      f14 = f13;
!                     f19 = textureatlassprite.getInterpolatedV(16.0D);
                      f15 = textureatlassprite.getInterpolatedU(16.0D);
!                     f20 = f19;
                      f16 = f15;
!                     f21 = f17;
                  }
                  else
                  {
!                     float f22 = MathHelper.sin(f12) * 0.25F;
!                     float f23 = MathHelper.cos(f12) * 0.25F;
!                     float f24 = 8.0F;
!                     f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f23 - f22) * 16.0F));
!                     f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f23 + f22) * 16.0F));
!                     f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f23 + f22) * 16.0F));
!                     f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f23 + f22) * 16.0F));
!                     f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f23 + f22) * 16.0F));
!                     f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (f23 - f22) * 16.0F));
!                     f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f23 - f22) * 16.0F));
!                     f21 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f23 - f22) * 16.0F));
                  }
  
                  int k2 = blockliquid.getMixedBrightnessForBlock(blockAccess, blockPosIn);
                  int l2 = k2 >> 16 & 65535;
                  int i3 = k2 & 65535;
!                 float f25 = f4 * f;
!                 float f26 = f4 * f1;
!                 float f18 = f4 * f2;
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f25, f26, f18, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f25, f26, f18, 1.0F).tex((double)f14, (double)f19).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f25, f26, f18, 1.0F).tex((double)f15, (double)f20).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f25, f26, f18, 1.0F).tex((double)f16, (double)f21).lightmap(l2, i3).endVertex();
  
                  if (blockliquid.func_176364_g(blockAccess, blockPosIn.up()))
                  {
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f25, f26, f18, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f25, f26, f18, 1.0F).tex((double)f16, (double)f21).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f25, f26, f18, 1.0F).tex((double)f15, (double)f20).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f25, f26, f18, 1.0F).tex((double)f14, (double)f19).lightmap(l2, i3).endVertex();
                  }
              }
  
***************
*** 140,227 ****
                  float f36 = atextureatlassprite[0].getMaxU();
                  float f37 = atextureatlassprite[0].getMinV();
                  float f38 = atextureatlassprite[0].getMaxV();
!                 int l1 = blockliquid.getMixedBrightnessForBlock(blockAccess, blockPosIn.down());
!                 int i2 = l1 >> 16 & 65535;
!                 int j2 = l1 & 65535;
!                 worldRendererIn.pos(d0, d1, d2 + 1.0D).color(f3, f3, f3, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0, d1, d2).color(f3, f3, f3, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2).color(f3, f3, f3, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(f3, f3, f3, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
                  flag2 = true;
              }
  
!             for (int i1 = 0; i1 < 4; ++i1)
              {
!                 int j1 = 0;
!                 int k1 = 0;
  
!                 if (i1 == 0)
                  {
!                     --k1;
                  }
  
!                 if (i1 == 1)
                  {
!                     ++k1;
                  }
  
!                 if (i1 == 2)
                  {
!                     --j1;
                  }
  
!                 if (i1 == 3)
                  {
!                     ++j1;
                  }
  
!                 BlockPos blockpos = blockPosIn.add(j1, 0, k1);
                  TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
  
!                 if (aboolean[i1])
                  {
-                     float f39;
-                     float f40;
                      double d3;
                      double d4;
                      double d5;
                      double d6;
  
!                     if (i1 == 0)
                      {
                          f39 = f7;
                          f40 = f10;
!                         d3 = d0;
!                         d5 = d0 + 1.0D;
!                         d4 = d2 + (double)f11;
                          d6 = d2 + (double)f11;
                      }
!                     else if (i1 == 1)
                      {
                          f39 = f9;
                          f40 = f8;
!                         d3 = d0 + 1.0D;
!                         d5 = d0;
!                         d4 = d2 + 1.0D - (double)f11;
                          d6 = d2 + 1.0D - (double)f11;
                      }
!                     else if (i1 == 2)
                      {
                          f39 = f8;
                          f40 = f7;
-                         d3 = d0 + (double)f11;
                          d5 = d0 + (double)f11;
!                         d4 = d2 + 1.0D;
!                         d6 = d2;
                      }
                      else
                      {
                          f39 = f10;
                          f40 = f9;
-                         d3 = d0 + 1.0D - (double)f11;
                          d5 = d0 + 1.0D - (double)f11;
!                         d4 = d2;
!                         d6 = d2 + 1.0D;
                      }
  
                      flag2 = true;
--- 149,237 ----
                  float f36 = atextureatlassprite[0].getMaxU();
                  float f37 = atextureatlassprite[0].getMinV();
                  float f38 = atextureatlassprite[0].getMaxV();
!                 int i1 = blockliquid.getMixedBrightnessForBlock(blockAccess, blockPosIn.down());
!                 int k1 = i1 >> 16 & 65535;
!                 int i2 = i1 & 65535;
!                 worldRendererIn.pos(d0, d1, d2 + 1.0D).color(f3, f3, f3, 1.0F).tex((double)f35, (double)f38).lightmap(k1, i2).endVertex();
!                 worldRendererIn.pos(d0, d1, d2).color(f3, f3, f3, 1.0F).tex((double)f35, (double)f37).lightmap(k1, i2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2).color(f3, f3, f3, 1.0F).tex((double)f36, (double)f37).lightmap(k1, i2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(f3, f3, f3, 1.0F).tex((double)f36, (double)f38).lightmap(k1, i2).endVertex();
                  flag2 = true;
              }
  
!             for (int j1 = 0; j1 < 4; ++j1)
              {
!                 int l1 = 0;
!                 int j2 = 0;
  
!                 if (j1 == 0)
                  {
!                     --j2;
                  }
  
!                 if (j1 == 1)
                  {
!                     ++j2;
                  }
  
!                 if (j1 == 2)
                  {
!                     --l1;
                  }
  
!                 if (j1 == 3)
                  {
!                     ++l1;
                  }
  
!                 BlockPos blockpos = blockPosIn.add(l1, 0, j2);
                  TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
+                 worldRendererIn.setSprite(textureatlassprite1);
  
!                 if (aboolean[j1])
                  {
                      double d3;
                      double d4;
+                     float f39;
+                     float f40;
                      double d5;
                      double d6;
  
!                     if (j1 == 0)
                      {
                          f39 = f7;
                          f40 = f10;
!                         d5 = d0;
!                         d3 = d0 + 1.0D;
                          d6 = d2 + (double)f11;
+                         d4 = d2 + (double)f11;
                      }
!                     else if (j1 == 1)
                      {
                          f39 = f9;
                          f40 = f8;
!                         d5 = d0 + 1.0D;
!                         d3 = d0;
                          d6 = d2 + 1.0D - (double)f11;
+                         d4 = d2 + 1.0D - (double)f11;
                      }
!                     else if (j1 == 2)
                      {
                          f39 = f8;
                          f40 = f7;
                          d5 = d0 + (double)f11;
!                         d3 = d0 + (double)f11;
!                         d6 = d2 + 1.0D;
!                         d4 = d2;
                      }
                      else
                      {
                          f39 = f10;
                          f40 = f9;
                          d5 = d0 + 1.0D - (double)f11;
!                         d3 = d0 + 1.0D - (double)f11;
!                         d6 = d2;
!                         d4 = d2 + 1.0D;
                      }
  
                      flag2 = true;
***************
*** 233,253 ****
                      int j = blockliquid.getMixedBrightnessForBlock(blockAccess, blockpos);
                      int k = j >> 16 & 65535;
                      int l = j & 65535;
!                     float f31 = i1 < 2 ? f5 : f6;
                      float f32 = f4 * f31 * f;
                      float f33 = f4 * f31 * f1;
                      float f34 = f4 * f31 * f2;
!                     worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
                  }
              }
  
              return flag2;
          }
      }
--- 243,264 ----
                      int j = blockliquid.getMixedBrightnessForBlock(blockAccess, blockpos);
                      int k = j >> 16 & 65535;
                      int l = j & 65535;
!                     float f31 = j1 < 2 ? f5 : f6;
                      float f32 = f4 * f31 * f;
                      float f33 = f4 * f31 * f1;
                      float f34 = f4 * f31 * f2;
!                     worldRendererIn.pos(d5, d1 + (double)f39, d6).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + (double)f40, d4).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + (double)f40, d4).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + (double)f39, d6).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
                  }
              }
  
+             worldRendererIn.setSprite((TextureAtlasSprite)null);
              return flag2;
          }
      }
diff -rc ./client/renderer/BlockModelRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockModelRenderer.java
*** ./client/renderer/BlockModelRenderer.java	2021-04-03 11:27:27.206422000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockModelRenderer.java	2019-05-30 22:29:17.458647000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import java.util.BitSet;
  import java.util.List;
  import net.minecraft.block.Block;
+ import net.minecraft.block.BlockLeavesBase;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.block.model.BakedQuad;
***************
*** 17,25 ****
--- 18,51 ----
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.Vec3i;
  import net.minecraft.world.IBlockAccess;
+ import optifine.BetterGrass;
+ import optifine.BetterSnow;
+ import optifine.Config;
+ import optifine.ConnectedTextures;
+ import optifine.CustomColors;
+ import optifine.NaturalTextures;
+ import optifine.Reflector;
+ import optifine.RenderEnv;
+ import optifine.SmartLeaves;
  
  public class BlockModelRenderer
  {
+     private static final String __OBFID = "CL_00002518";
+     private static float aoLightValueOpaque = 0.2F;
+ 
+     public static void updateAoLightValue()
+     {
+         aoLightValueOpaque = 1.0F - Config.getAmbientOcclusionLevel() * 0.8F;
+     }
+ 
+     public BlockModelRenderer()
+     {
+         if (Reflector.ForgeModContainer_forgeLightPipelineEnabled.exists())
+         {
+             Reflector.setFieldValue(Reflector.ForgeModContainer_forgeLightPipelineEnabled, Boolean.valueOf(false));
+         }
+     }
+ 
      public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, WorldRenderer worldRendererIn)
      {
          Block block = blockStateIn.getBlock();
***************
*** 34,40 ****
          try
          {
              Block block = blockStateIn.getBlock();
!             return flag ? this.renderModelAmbientOcclusion(blockAccessIn, modelIn, block, blockPosIn, worldRendererIn, checkSides) : this.renderModelStandard(blockAccessIn, modelIn, block, blockPosIn, worldRendererIn, checkSides);
          }
          catch (Throwable throwable)
          {
--- 60,72 ----
          try
          {
              Block block = blockStateIn.getBlock();
! 
!             if (Config.isTreesSmart() && blockStateIn.getBlock() instanceof BlockLeavesBase)
!             {
!                 modelIn = SmartLeaves.getLeavesModel(modelIn);
!             }
! 
!             return flag ? this.renderModelAmbientOcclusion(blockAccessIn, modelIn, block, blockStateIn, blockPosIn, worldRendererIn, checkSides) : this.renderModelStandard(blockAccessIn, modelIn, block, blockStateIn, blockPosIn, worldRendererIn, checkSides);
          }
          catch (Throwable throwable)
          {
***************
*** 48,128 ****
  
      public boolean renderModelAmbientOcclusion(IBlockAccess blockAccessIn, IBakedModel modelIn, Block blockIn, BlockPos blockPosIn, WorldRenderer worldRendererIn, boolean checkSides)
      {
          boolean flag = false;
!         float[] afloat = new float[EnumFacing.values().length * 2];
!         BitSet bitset = new BitSet(3);
!         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = new BlockModelRenderer.AmbientOcclusionFace();
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
!             List<BakedQuad> list = modelIn.getFaceQuads(enumfacing);
  
              if (!list.isEmpty())
              {
!                 BlockPos blockpos = blockPosIn.offset(enumfacing);
  
!                 if (!checkSides || blockIn.shouldSideBeRendered(blockAccessIn, blockpos, enumfacing))
                  {
!                     this.renderModelAmbientOcclusionQuads(blockAccessIn, blockIn, blockPosIn, worldRendererIn, list, afloat, bitset, blockmodelrenderer$ambientocclusionface);
                      flag = true;
                  }
              }
          }
  
!         List<BakedQuad> list1 = modelIn.getGeneralQuads();
  
          if (list1.size() > 0)
          {
!             this.renderModelAmbientOcclusionQuads(blockAccessIn, blockIn, blockPosIn, worldRendererIn, list1, afloat, bitset, blockmodelrenderer$ambientocclusionface);
              flag = true;
          }
  
          return flag;
      }
  
      public boolean renderModelStandard(IBlockAccess blockAccessIn, IBakedModel modelIn, Block blockIn, BlockPos blockPosIn, WorldRenderer worldRendererIn, boolean checkSides)
      {
          boolean flag = false;
!         BitSet bitset = new BitSet(3);
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
!             List<BakedQuad> list = modelIn.getFaceQuads(enumfacing);
  
              if (!list.isEmpty())
              {
!                 BlockPos blockpos = blockPosIn.offset(enumfacing);
  
!                 if (!checkSides || blockIn.shouldSideBeRendered(blockAccessIn, blockpos, enumfacing))
                  {
!                     int i = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos);
!                     this.renderModelStandardQuads(blockAccessIn, blockIn, blockPosIn, enumfacing, i, false, worldRendererIn, list, bitset);
                      flag = true;
                  }
              }
          }
  
!         List<BakedQuad> list1 = modelIn.getGeneralQuads();
  
          if (list1.size() > 0)
          {
!             this.renderModelStandardQuads(blockAccessIn, blockIn, blockPosIn, (EnumFacing)null, -1, true, worldRendererIn, list1, bitset);
              flag = true;
          }
  
          return flag;
      }
  
!     private void renderModelAmbientOcclusionQuads(IBlockAccess blockAccessIn, Block blockIn, BlockPos blockPosIn, WorldRenderer worldRendererIn, List<BakedQuad> listQuadsIn, float[] quadBounds, BitSet boundsFlags, BlockModelRenderer.AmbientOcclusionFace aoFaceIn)
      {
!         double d0 = (double)blockPosIn.getX();
!         double d1 = (double)blockPosIn.getY();
!         double d2 = (double)blockPosIn.getZ();
!         Block.EnumOffsetType block$enumoffsettype = blockIn.getOffsetType();
  
          if (block$enumoffsettype != Block.EnumOffsetType.NONE)
          {
!             long i = MathHelper.getPositionRandom(blockPosIn);
              d0 += ((double)((float)(i >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
              d2 += ((double)((float)(i >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D;
  
--- 80,216 ----
  
      public boolean renderModelAmbientOcclusion(IBlockAccess blockAccessIn, IBakedModel modelIn, Block blockIn, BlockPos blockPosIn, WorldRenderer worldRendererIn, boolean checkSides)
      {
+         return this.renderModelAmbientOcclusion(blockAccessIn, modelIn, blockIn, blockAccessIn.getBlockState(blockPosIn), blockPosIn, worldRendererIn, checkSides);
+     }
+ 
+     public boolean renderModelAmbientOcclusion(IBlockAccess p_renderModelAmbientOcclusion_1_, IBakedModel p_renderModelAmbientOcclusion_2_, Block p_renderModelAmbientOcclusion_3_, IBlockState p_renderModelAmbientOcclusion_4_, BlockPos p_renderModelAmbientOcclusion_5_, WorldRenderer p_renderModelAmbientOcclusion_6_, boolean p_renderModelAmbientOcclusion_7_)
+     {
          boolean flag = false;
!         RenderEnv renderenv = null;
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
!             List list = p_renderModelAmbientOcclusion_2_.getFaceQuads(enumfacing);
  
              if (!list.isEmpty())
              {
!                 BlockPos blockpos = p_renderModelAmbientOcclusion_5_.offset(enumfacing);
  
!                 if (!p_renderModelAmbientOcclusion_7_ || p_renderModelAmbientOcclusion_3_.shouldSideBeRendered(p_renderModelAmbientOcclusion_1_, blockpos, enumfacing))
                  {
!                     if (renderenv == null)
!                     {
!                         renderenv = RenderEnv.getInstance(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_4_, p_renderModelAmbientOcclusion_5_);
!                     }
! 
!                     if (!renderenv.isBreakingAnimation(list) && Config.isBetterGrass())
!                     {
!                         list = BetterGrass.getFaceQuads(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_3_, p_renderModelAmbientOcclusion_5_, enumfacing, list);
!                     }
! 
!                     this.renderModelAmbientOcclusionQuads(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_3_, p_renderModelAmbientOcclusion_5_, p_renderModelAmbientOcclusion_6_, list, renderenv);
                      flag = true;
                  }
              }
          }
  
!         List list1 = p_renderModelAmbientOcclusion_2_.getGeneralQuads();
  
          if (list1.size() > 0)
          {
!             if (renderenv == null)
!             {
!                 renderenv = RenderEnv.getInstance(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_4_, p_renderModelAmbientOcclusion_5_);
!             }
! 
!             this.renderModelAmbientOcclusionQuads(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_3_, p_renderModelAmbientOcclusion_5_, p_renderModelAmbientOcclusion_6_, list1, renderenv);
              flag = true;
          }
  
+         if (renderenv != null && Config.isBetterSnow() && !renderenv.isBreakingAnimation() && BetterSnow.shouldRender(p_renderModelAmbientOcclusion_1_, p_renderModelAmbientOcclusion_3_, p_renderModelAmbientOcclusion_4_, p_renderModelAmbientOcclusion_5_))
+         {
+             IBakedModel ibakedmodel = BetterSnow.getModelSnowLayer();
+             IBlockState iblockstate = BetterSnow.getStateSnowLayer();
+             this.renderModelAmbientOcclusion(p_renderModelAmbientOcclusion_1_, ibakedmodel, iblockstate.getBlock(), iblockstate, p_renderModelAmbientOcclusion_5_, p_renderModelAmbientOcclusion_6_, true);
+         }
+ 
          return flag;
      }
  
      public boolean renderModelStandard(IBlockAccess blockAccessIn, IBakedModel modelIn, Block blockIn, BlockPos blockPosIn, WorldRenderer worldRendererIn, boolean checkSides)
      {
+         return this.renderModelStandard(blockAccessIn, modelIn, blockIn, blockAccessIn.getBlockState(blockPosIn), blockPosIn, worldRendererIn, checkSides);
+     }
+ 
+     public boolean renderModelStandard(IBlockAccess p_renderModelStandard_1_, IBakedModel p_renderModelStandard_2_, Block p_renderModelStandard_3_, IBlockState p_renderModelStandard_4_, BlockPos p_renderModelStandard_5_, WorldRenderer p_renderModelStandard_6_, boolean p_renderModelStandard_7_)
+     {
          boolean flag = false;
!         RenderEnv renderenv = null;
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
!             List list = p_renderModelStandard_2_.getFaceQuads(enumfacing);
  
              if (!list.isEmpty())
              {
!                 BlockPos blockpos = p_renderModelStandard_5_.offset(enumfacing);
  
!                 if (!p_renderModelStandard_7_ || p_renderModelStandard_3_.shouldSideBeRendered(p_renderModelStandard_1_, blockpos, enumfacing))
                  {
!                     if (renderenv == null)
!                     {
!                         renderenv = RenderEnv.getInstance(p_renderModelStandard_1_, p_renderModelStandard_4_, p_renderModelStandard_5_);
!                     }
! 
!                     if (!renderenv.isBreakingAnimation(list) && Config.isBetterGrass())
!                     {
!                         list = BetterGrass.getFaceQuads(p_renderModelStandard_1_, p_renderModelStandard_3_, p_renderModelStandard_5_, enumfacing, list);
!                     }
! 
!                     int i = p_renderModelStandard_3_.getMixedBrightnessForBlock(p_renderModelStandard_1_, blockpos);
!                     this.renderModelStandardQuads(p_renderModelStandard_1_, p_renderModelStandard_3_, p_renderModelStandard_5_, enumfacing, i, false, p_renderModelStandard_6_, list, renderenv);
                      flag = true;
                  }
              }
          }
  
!         List list1 = p_renderModelStandard_2_.getGeneralQuads();
  
          if (list1.size() > 0)
          {
!             if (renderenv == null)
!             {
!                 renderenv = RenderEnv.getInstance(p_renderModelStandard_1_, p_renderModelStandard_4_, p_renderModelStandard_5_);
!             }
! 
!             this.renderModelStandardQuads(p_renderModelStandard_1_, p_renderModelStandard_3_, p_renderModelStandard_5_, (EnumFacing)null, -1, true, p_renderModelStandard_6_, list1, renderenv);
              flag = true;
          }
  
+         if (renderenv != null && Config.isBetterSnow() && !renderenv.isBreakingAnimation() && BetterSnow.shouldRender(p_renderModelStandard_1_, p_renderModelStandard_3_, p_renderModelStandard_4_, p_renderModelStandard_5_) && BetterSnow.shouldRender(p_renderModelStandard_1_, p_renderModelStandard_3_, p_renderModelStandard_4_, p_renderModelStandard_5_))
+         {
+             IBakedModel ibakedmodel = BetterSnow.getModelSnowLayer();
+             IBlockState iblockstate = BetterSnow.getStateSnowLayer();
+             this.renderModelStandard(p_renderModelStandard_1_, ibakedmodel, iblockstate.getBlock(), iblockstate, p_renderModelStandard_5_, p_renderModelStandard_6_, true);
+         }
+ 
          return flag;
      }
  
!     private void renderModelAmbientOcclusionQuads(IBlockAccess p_renderModelAmbientOcclusionQuads_1_, Block p_renderModelAmbientOcclusionQuads_2_, BlockPos p_renderModelAmbientOcclusionQuads_3_, WorldRenderer p_renderModelAmbientOcclusionQuads_4_, List p_renderModelAmbientOcclusionQuads_5_, RenderEnv p_renderModelAmbientOcclusionQuads_6_)
      {
!         float[] afloat = p_renderModelAmbientOcclusionQuads_6_.getQuadBounds();
!         BitSet bitset = p_renderModelAmbientOcclusionQuads_6_.getBoundsFlags();
!         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = p_renderModelAmbientOcclusionQuads_6_.getAoFace();
!         IBlockState iblockstate = p_renderModelAmbientOcclusionQuads_6_.getBlockState();
!         double d0 = (double)p_renderModelAmbientOcclusionQuads_3_.getX();
!         double d1 = (double)p_renderModelAmbientOcclusionQuads_3_.getY();
!         double d2 = (double)p_renderModelAmbientOcclusionQuads_3_.getZ();
!         Block.EnumOffsetType block$enumoffsettype = p_renderModelAmbientOcclusionQuads_2_.getOffsetType();
  
          if (block$enumoffsettype != Block.EnumOffsetType.NONE)
          {
!             long i = MathHelper.getPositionRandom(p_renderModelAmbientOcclusionQuads_3_);
              d0 += ((double)((float)(i >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
              d2 += ((double)((float)(i >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D;
  
***************
*** 132,147 ****
              }
          }
  
!         for (BakedQuad bakedquad : listQuadsIn)
          {
!             this.fillQuadBounds(blockIn, bakedquad.getVertexData(), bakedquad.getFace(), quadBounds, boundsFlags);
!             aoFaceIn.updateVertexBrightness(blockAccessIn, blockIn, blockPosIn, bakedquad.getFace(), quadBounds, boundsFlags);
!             worldRendererIn.addVertexData(bakedquad.getVertexData());
!             worldRendererIn.putBrightness4(aoFaceIn.vertexBrightness[0], aoFaceIn.vertexBrightness[1], aoFaceIn.vertexBrightness[2], aoFaceIn.vertexBrightness[3]);
  
!             if (bakedquad.hasTintIndex())
              {
!                 int j = blockIn.colorMultiplier(blockAccessIn, blockPosIn, bakedquad.getTintIndex());
  
                  if (EntityRenderer.anaglyphEnable)
                  {
--- 220,279 ----
              }
          }
  
!         for (Object bakedquad0 : p_renderModelAmbientOcclusionQuads_5_)
          {
!             BakedQuad bakedquad = (BakedQuad) bakedquad0;
  
!             if (!p_renderModelAmbientOcclusionQuads_6_.isBreakingAnimation(bakedquad))
!             {
!                 BakedQuad bakedquad1 = bakedquad;
! 
!                 if (Config.isConnectedTextures())
!                 {
!                     bakedquad = ConnectedTextures.getConnectedTexture(p_renderModelAmbientOcclusionQuads_1_, iblockstate, p_renderModelAmbientOcclusionQuads_3_, bakedquad, p_renderModelAmbientOcclusionQuads_6_);
!                 }
! 
!                 if (bakedquad == bakedquad1 && Config.isNaturalTextures())
!                 {
!                     bakedquad = NaturalTextures.getNaturalTexture(p_renderModelAmbientOcclusionQuads_3_, bakedquad);
!                 }
!             }
! 
!             this.fillQuadBounds(p_renderModelAmbientOcclusionQuads_2_, bakedquad.getVertexData(), bakedquad.getFace(), afloat, bitset);
!             blockmodelrenderer$ambientocclusionface.updateVertexBrightness(p_renderModelAmbientOcclusionQuads_1_, p_renderModelAmbientOcclusionQuads_2_, p_renderModelAmbientOcclusionQuads_3_, bakedquad.getFace(), afloat, bitset);
! 
!             if (p_renderModelAmbientOcclusionQuads_4_.isMultiTexture())
!             {
!                 p_renderModelAmbientOcclusionQuads_4_.addVertexData(bakedquad.getVertexDataSingle());
!                 p_renderModelAmbientOcclusionQuads_4_.putSprite(bakedquad.getSprite());
!             }
!             else
!             {
!                 p_renderModelAmbientOcclusionQuads_4_.addVertexData(bakedquad.getVertexData());
!             }
! 
!             p_renderModelAmbientOcclusionQuads_4_.putBrightness4(blockmodelrenderer$ambientocclusionface.vertexBrightness[0], blockmodelrenderer$ambientocclusionface.vertexBrightness[1], blockmodelrenderer$ambientocclusionface.vertexBrightness[2], blockmodelrenderer$ambientocclusionface.vertexBrightness[3]);
!             int k = CustomColors.getColorMultiplier(bakedquad, p_renderModelAmbientOcclusionQuads_2_, p_renderModelAmbientOcclusionQuads_1_, p_renderModelAmbientOcclusionQuads_3_, p_renderModelAmbientOcclusionQuads_6_);
! 
!             if (!bakedquad.hasTintIndex() && k == -1)
!             {
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
!             }
!             else
              {
!                 int j;
! 
!                 if (k != -1)
!                 {
!                     j = k;
!                 }
!                 else
!                 {
!                     j = p_renderModelAmbientOcclusionQuads_2_.colorMultiplier(p_renderModelAmbientOcclusionQuads_1_, p_renderModelAmbientOcclusionQuads_3_, bakedquad.getTintIndex());
!                 }
  
                  if (EntityRenderer.anaglyphEnable)
                  {
***************
*** 151,170 ****
                  float f = (float)(j >> 16 & 255) / 255.0F;
                  float f1 = (float)(j >> 8 & 255) / 255.0F;
                  float f2 = (float)(j & 255) / 255.0F;
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[0] * f, aoFaceIn.vertexColorMultiplier[0] * f1, aoFaceIn.vertexColorMultiplier[0] * f2, 4);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[1] * f, aoFaceIn.vertexColorMultiplier[1] * f1, aoFaceIn.vertexColorMultiplier[1] * f2, 3);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[2] * f, aoFaceIn.vertexColorMultiplier[2] * f1, aoFaceIn.vertexColorMultiplier[2] * f2, 2);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[3] * f, aoFaceIn.vertexColorMultiplier[3] * f1, aoFaceIn.vertexColorMultiplier[3] * f2, 1);
!             }
!             else
!             {
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[0], aoFaceIn.vertexColorMultiplier[0], aoFaceIn.vertexColorMultiplier[0], 4);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[1], aoFaceIn.vertexColorMultiplier[1], aoFaceIn.vertexColorMultiplier[1], 3);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[2], aoFaceIn.vertexColorMultiplier[2], aoFaceIn.vertexColorMultiplier[2], 2);
!                 worldRendererIn.putColorMultiplier(aoFaceIn.vertexColorMultiplier[3], aoFaceIn.vertexColorMultiplier[3], aoFaceIn.vertexColorMultiplier[3], 1);
              }
  
!             worldRendererIn.putPosition(d0, d1, d2);
          }
      }
  
--- 283,295 ----
                  float f = (float)(j >> 16 & 255) / 255.0F;
                  float f1 = (float)(j >> 8 & 255) / 255.0F;
                  float f2 = (float)(j & 255) / 255.0F;
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f2, 4);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f2, 3);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f2, 2);
!                 p_renderModelAmbientOcclusionQuads_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f2, 1);
              }
  
!             p_renderModelAmbientOcclusionQuads_4_.putPosition(d0, d1, d2);
          }
      }
  
***************
*** 176,187 ****
          float f3 = -32.0F;
          float f4 = -32.0F;
          float f5 = -32.0F;
  
!         for (int i = 0; i < 4; ++i)
          {
!             float f6 = Float.intBitsToFloat(vertexData[i * 7]);
!             float f7 = Float.intBitsToFloat(vertexData[i * 7 + 1]);
!             float f8 = Float.intBitsToFloat(vertexData[i * 7 + 2]);
              f = Math.min(f, f6);
              f1 = Math.min(f1, f7);
              f2 = Math.min(f2, f8);
--- 301,313 ----
          float f3 = -32.0F;
          float f4 = -32.0F;
          float f5 = -32.0F;
+         int i = vertexData.length / 4;
  
!         for (int j = 0; j < 4; ++j)
          {
!             float f6 = Float.intBitsToFloat(vertexData[j * i]);
!             float f7 = Float.intBitsToFloat(vertexData[j * i + 1]);
!             float f8 = Float.intBitsToFloat(vertexData[j * i + 2]);
              f = Math.min(f, f6);
              f1 = Math.min(f1, f7);
              f2 = Math.min(f2, f8);
***************
*** 198,258 ****
              quadBounds[EnumFacing.UP.getIndex()] = f4;
              quadBounds[EnumFacing.NORTH.getIndex()] = f2;
              quadBounds[EnumFacing.SOUTH.getIndex()] = f5;
!             quadBounds[EnumFacing.WEST.getIndex() + EnumFacing.values().length] = 1.0F - f;
!             quadBounds[EnumFacing.EAST.getIndex() + EnumFacing.values().length] = 1.0F - f3;
!             quadBounds[EnumFacing.DOWN.getIndex() + EnumFacing.values().length] = 1.0F - f1;
!             quadBounds[EnumFacing.UP.getIndex() + EnumFacing.values().length] = 1.0F - f4;
!             quadBounds[EnumFacing.NORTH.getIndex() + EnumFacing.values().length] = 1.0F - f2;
!             quadBounds[EnumFacing.SOUTH.getIndex() + EnumFacing.values().length] = 1.0F - f5;
          }
  
!         float f9 = 1.0E-4F;
!         float f10 = 0.9999F;
  
!         switch (facingIn)
          {
!             case DOWN:
                  boundsFlags.set(1, f >= 1.0E-4F || f2 >= 1.0E-4F || f3 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f1 < 1.0E-4F || blockIn.isFullCube()) && f1 == f4);
                  break;
  
!             case UP:
                  boundsFlags.set(1, f >= 1.0E-4F || f2 >= 1.0E-4F || f3 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f4 > 0.9999F || blockIn.isFullCube()) && f1 == f4);
                  break;
  
!             case NORTH:
                  boundsFlags.set(1, f >= 1.0E-4F || f1 >= 1.0E-4F || f3 <= 0.9999F || f4 <= 0.9999F);
                  boundsFlags.set(0, (f2 < 1.0E-4F || blockIn.isFullCube()) && f2 == f5);
                  break;
  
!             case SOUTH:
                  boundsFlags.set(1, f >= 1.0E-4F || f1 >= 1.0E-4F || f3 <= 0.9999F || f4 <= 0.9999F);
                  boundsFlags.set(0, (f5 > 0.9999F || blockIn.isFullCube()) && f2 == f5);
                  break;
  
!             case WEST:
                  boundsFlags.set(1, f1 >= 1.0E-4F || f2 >= 1.0E-4F || f4 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f < 1.0E-4F || blockIn.isFullCube()) && f == f3);
                  break;
  
!             case EAST:
                  boundsFlags.set(1, f1 >= 1.0E-4F || f2 >= 1.0E-4F || f4 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f3 > 0.9999F || blockIn.isFullCube()) && f == f3);
          }
      }
  
!     private void renderModelStandardQuads(IBlockAccess blockAccessIn, Block blockIn, BlockPos blockPosIn, EnumFacing faceIn, int brightnessIn, boolean ownBrightness, WorldRenderer worldRendererIn, List<BakedQuad> listQuadsIn, BitSet boundsFlags)
      {
!         double d0 = (double)blockPosIn.getX();
!         double d1 = (double)blockPosIn.getY();
!         double d2 = (double)blockPosIn.getZ();
!         Block.EnumOffsetType block$enumoffsettype = blockIn.getOffsetType();
  
          if (block$enumoffsettype != Block.EnumOffsetType.NONE)
          {
!             int i = blockPosIn.getX();
!             int j = blockPosIn.getZ();
              long k = (long)(i * 3129871) ^ (long)j * 116129781L;
              k = k * k * 42317861L + k * 11L;
              d0 += ((double)((float)(k >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
--- 324,386 ----
              quadBounds[EnumFacing.UP.getIndex()] = f4;
              quadBounds[EnumFacing.NORTH.getIndex()] = f2;
              quadBounds[EnumFacing.SOUTH.getIndex()] = f5;
!             quadBounds[EnumFacing.WEST.getIndex() + EnumFacing.VALUES.length] = 1.0F - f;
!             quadBounds[EnumFacing.EAST.getIndex() + EnumFacing.VALUES.length] = 1.0F - f3;
!             quadBounds[EnumFacing.DOWN.getIndex() + EnumFacing.VALUES.length] = 1.0F - f1;
!             quadBounds[EnumFacing.UP.getIndex() + EnumFacing.VALUES.length] = 1.0F - f4;
!             quadBounds[EnumFacing.NORTH.getIndex() + EnumFacing.VALUES.length] = 1.0F - f2;
!             quadBounds[EnumFacing.SOUTH.getIndex() + EnumFacing.VALUES.length] = 1.0F - f5;
          }
  
!         float f10 = 1.0E-4F;
!         float f9 = 0.9999F;
  
!         switch (BlockModelRenderer.BlockModelRenderer$1.field_178290_a[facingIn.ordinal()])
          {
!             case 1:
                  boundsFlags.set(1, f >= 1.0E-4F || f2 >= 1.0E-4F || f3 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f1 < 1.0E-4F || blockIn.isFullCube()) && f1 == f4);
                  break;
  
!             case 2:
                  boundsFlags.set(1, f >= 1.0E-4F || f2 >= 1.0E-4F || f3 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f4 > 0.9999F || blockIn.isFullCube()) && f1 == f4);
                  break;
  
!             case 3:
                  boundsFlags.set(1, f >= 1.0E-4F || f1 >= 1.0E-4F || f3 <= 0.9999F || f4 <= 0.9999F);
                  boundsFlags.set(0, (f2 < 1.0E-4F || blockIn.isFullCube()) && f2 == f5);
                  break;
  
!             case 4:
                  boundsFlags.set(1, f >= 1.0E-4F || f1 >= 1.0E-4F || f3 <= 0.9999F || f4 <= 0.9999F);
                  boundsFlags.set(0, (f5 > 0.9999F || blockIn.isFullCube()) && f2 == f5);
                  break;
  
!             case 5:
                  boundsFlags.set(1, f1 >= 1.0E-4F || f2 >= 1.0E-4F || f4 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f < 1.0E-4F || blockIn.isFullCube()) && f == f3);
                  break;
  
!             case 6:
                  boundsFlags.set(1, f1 >= 1.0E-4F || f2 >= 1.0E-4F || f4 <= 0.9999F || f5 <= 0.9999F);
                  boundsFlags.set(0, (f3 > 0.9999F || blockIn.isFullCube()) && f == f3);
          }
      }
  
!     private void renderModelStandardQuads(IBlockAccess p_renderModelStandardQuads_1_, Block p_renderModelStandardQuads_2_, BlockPos p_renderModelStandardQuads_3_, EnumFacing p_renderModelStandardQuads_4_, int p_renderModelStandardQuads_5_, boolean p_renderModelStandardQuads_6_, WorldRenderer p_renderModelStandardQuads_7_, List p_renderModelStandardQuads_8_, RenderEnv p_renderModelStandardQuads_9_)
      {
!         BitSet bitset = p_renderModelStandardQuads_9_.getBoundsFlags();
!         IBlockState iblockstate = p_renderModelStandardQuads_9_.getBlockState();
!         double d0 = (double)p_renderModelStandardQuads_3_.getX();
!         double d1 = (double)p_renderModelStandardQuads_3_.getY();
!         double d2 = (double)p_renderModelStandardQuads_3_.getZ();
!         Block.EnumOffsetType block$enumoffsettype = p_renderModelStandardQuads_2_.getOffsetType();
  
          if (block$enumoffsettype != Block.EnumOffsetType.NONE)
          {
!             int i = p_renderModelStandardQuads_3_.getX();
!             int j = p_renderModelStandardQuads_3_.getZ();
              long k = (long)(i * 3129871) ^ (long)j * 116129781L;
              k = k * k * 42317861L + k * 11L;
              d0 += ((double)((float)(k >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D;
***************
*** 264,283 ****
              }
          }
  
!         for (BakedQuad bakedquad : listQuadsIn)
          {
!             if (ownBrightness)
              {
!                 this.fillQuadBounds(blockIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, boundsFlags);
!                 brightnessIn = boundsFlags.get(0) ? blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn.offset(bakedquad.getFace())) : blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn);
              }
  
!             worldRendererIn.addVertexData(bakedquad.getVertexData());
!             worldRendererIn.putBrightness4(brightnessIn, brightnessIn, brightnessIn, brightnessIn);
  
!             if (bakedquad.hasTintIndex())
              {
!                 int l = blockIn.colorMultiplier(blockAccessIn, blockPosIn, bakedquad.getTintIndex());
  
                  if (EntityRenderer.anaglyphEnable)
                  {
--- 392,447 ----
              }
          }
  
!         for (Object bakedquad0 : p_renderModelStandardQuads_8_)
          {
!             BakedQuad bakedquad = (BakedQuad) bakedquad0;
! 
!             if (!p_renderModelStandardQuads_9_.isBreakingAnimation(bakedquad))
!             {
!                 BakedQuad bakedquad1 = bakedquad;
! 
!                 if (Config.isConnectedTextures())
!                 {
!                     bakedquad = ConnectedTextures.getConnectedTexture(p_renderModelStandardQuads_1_, iblockstate, p_renderModelStandardQuads_3_, bakedquad, p_renderModelStandardQuads_9_);
!                 }
! 
!                 if (bakedquad == bakedquad1 && Config.isNaturalTextures())
!                 {
!                     bakedquad = NaturalTextures.getNaturalTexture(p_renderModelStandardQuads_3_, bakedquad);
!                 }
!             }
! 
!             if (p_renderModelStandardQuads_6_)
              {
!                 this.fillQuadBounds(p_renderModelStandardQuads_2_, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitset);
!                 p_renderModelStandardQuads_5_ = bitset.get(0) ? p_renderModelStandardQuads_2_.getMixedBrightnessForBlock(p_renderModelStandardQuads_1_, p_renderModelStandardQuads_3_.offset(bakedquad.getFace())) : p_renderModelStandardQuads_2_.getMixedBrightnessForBlock(p_renderModelStandardQuads_1_, p_renderModelStandardQuads_3_);
              }
  
!             if (p_renderModelStandardQuads_7_.isMultiTexture())
!             {
!                 p_renderModelStandardQuads_7_.addVertexData(bakedquad.getVertexDataSingle());
!                 p_renderModelStandardQuads_7_.putSprite(bakedquad.getSprite());
!             }
!             else
!             {
!                 p_renderModelStandardQuads_7_.addVertexData(bakedquad.getVertexData());
!             }
  
!             p_renderModelStandardQuads_7_.putBrightness4(p_renderModelStandardQuads_5_, p_renderModelStandardQuads_5_, p_renderModelStandardQuads_5_, p_renderModelStandardQuads_5_);
!             int i1 = CustomColors.getColorMultiplier(bakedquad, p_renderModelStandardQuads_2_, p_renderModelStandardQuads_1_, p_renderModelStandardQuads_3_, p_renderModelStandardQuads_9_);
! 
!             if (bakedquad.hasTintIndex() || i1 != -1)
              {
!                 int l;
! 
!                 if (i1 != -1)
!                 {
!                     l = i1;
!                 }
!                 else
!                 {
!                     l = p_renderModelStandardQuads_2_.colorMultiplier(p_renderModelStandardQuads_1_, p_renderModelStandardQuads_3_, bakedquad.getTintIndex());
!                 }
  
                  if (EntityRenderer.anaglyphEnable)
                  {
***************
*** 287,305 ****
                  float f = (float)(l >> 16 & 255) / 255.0F;
                  float f1 = (float)(l >> 8 & 255) / 255.0F;
                  float f2 = (float)(l & 255) / 255.0F;
!                 worldRendererIn.putColorMultiplier(f, f1, f2, 4);
!                 worldRendererIn.putColorMultiplier(f, f1, f2, 3);
!                 worldRendererIn.putColorMultiplier(f, f1, f2, 2);
!                 worldRendererIn.putColorMultiplier(f, f1, f2, 1);
              }
  
!             worldRendererIn.putPosition(d0, d1, d2);
          }
      }
  
      public void renderModelBrightnessColor(IBakedModel bakedModel, float p_178262_2_, float p_178262_3_, float p_178262_4_, float p_178262_5_)
      {
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              this.renderModelBrightnessColorQuads(p_178262_2_, p_178262_3_, p_178262_4_, p_178262_5_, bakedModel.getFaceQuads(enumfacing));
          }
--- 451,469 ----
                  float f = (float)(l >> 16 & 255) / 255.0F;
                  float f1 = (float)(l >> 8 & 255) / 255.0F;
                  float f2 = (float)(l & 255) / 255.0F;
!                 p_renderModelStandardQuads_7_.putColorMultiplier(f, f1, f2, 4);
!                 p_renderModelStandardQuads_7_.putColorMultiplier(f, f1, f2, 3);
!                 p_renderModelStandardQuads_7_.putColorMultiplier(f, f1, f2, 2);
!                 p_renderModelStandardQuads_7_.putColorMultiplier(f, f1, f2, 1);
              }
  
!             p_renderModelStandardQuads_7_.putPosition(d0, d1, d2);
          }
      }
  
      public void renderModelBrightnessColor(IBakedModel bakedModel, float p_178262_2_, float p_178262_3_, float p_178262_4_, float p_178262_5_)
      {
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              this.renderModelBrightnessColorQuads(p_178262_2_, p_178262_3_, p_178262_4_, p_178262_5_, bakedModel.getFaceQuads(enumfacing));
          }
***************
*** 331,343 ****
          this.renderModelBrightnessColor(p_178266_1_, p_178266_3_, f, f1, f2);
      }
  
!     private void renderModelBrightnessColorQuads(float p_178264_1_, float p_178264_2_, float p_178264_3_, float p_178264_4_, List<BakedQuad> p_178264_5_)
      {
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
  
!         for (BakedQuad bakedquad : p_178264_5_)
          {
              worldrenderer.begin(7, DefaultVertexFormats.ITEM);
              worldrenderer.addVertexData(bakedquad.getVertexData());
  
--- 495,508 ----
          this.renderModelBrightnessColor(p_178266_1_, p_178266_3_, f, f1, f2);
      }
  
!     private void renderModelBrightnessColorQuads(float p_178264_1_, float p_178264_2_, float p_178264_3_, float p_178264_4_, List p_178264_5_)
      {
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
  
!         for (Object bakedquad0 : p_178264_5_)
          {
+             BakedQuad bakedquad = (BakedQuad) bakedquad0;
              worldrenderer.begin(7, DefaultVertexFormats.ITEM);
              worldrenderer.addVertexData(bakedquad.getVertexData());
  
***************
*** 356,365 ****
          }
      }
  
!     class AmbientOcclusionFace
      {
          private final float[] vertexColorMultiplier = new float[4];
          private final int[] vertexBrightness = new int[4];
  
          public void updateVertexBrightness(IBlockAccess blockAccessIn, Block blockIn, BlockPos blockPosIn, EnumFacing facingIn, float[] quadBounds, BitSet boundsFlags)
          {
--- 521,607 ----
          }
      }
  
!     public static float fixAoLightValue(float p_fixAoLightValue_0_)
!     {
!         return p_fixAoLightValue_0_ == 0.2F ? aoLightValueOpaque : p_fixAoLightValue_0_;
!     }
! 
!     static final class BlockModelRenderer$1
!     {
!         static final int[] field_178290_a = new int[EnumFacing.values().length];
!         private static final String __OBFID = "CL_00002517";
! 
!         static
!         {
!             try
!             {
!                 field_178290_a[EnumFacing.DOWN.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var6)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178290_a[EnumFacing.UP.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var5)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178290_a[EnumFacing.NORTH.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var4)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178290_a[EnumFacing.SOUTH.ordinal()] = 4;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178290_a[EnumFacing.WEST.ordinal()] = 5;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178290_a[EnumFacing.EAST.ordinal()] = 6;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
!         }
!     }
! 
!     public static class AmbientOcclusionFace
      {
          private final float[] vertexColorMultiplier = new float[4];
          private final int[] vertexBrightness = new int[4];
+         private static final String __OBFID = "CL_00002515";
+ 
+         public AmbientOcclusionFace(BlockModelRenderer p_i46235_1_)
+         {
+         }
+ 
+         public AmbientOcclusionFace()
+         {
+         }
  
          public void updateVertexBrightness(IBlockAccess blockAccessIn, Block blockIn, BlockPos blockPosIn, EnumFacing facingIn, float[] quadBounds, BitSet boundsFlags)
          {
***************
*** 373,382 ****
              int j = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos2);
              int k = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos3);
              int l = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos4);
!             float f = blockAccessIn.getBlockState(blockpos1).getBlock().getAmbientOcclusionLightValue();
!             float f1 = blockAccessIn.getBlockState(blockpos2).getBlock().getAmbientOcclusionLightValue();
!             float f2 = blockAccessIn.getBlockState(blockpos3).getBlock().getAmbientOcclusionLightValue();
!             float f3 = blockAccessIn.getBlockState(blockpos4).getBlock().getAmbientOcclusionLightValue();
              boolean flag = blockAccessIn.getBlockState(blockpos1.offset(facingIn)).getBlock().isTranslucent();
              boolean flag1 = blockAccessIn.getBlockState(blockpos2.offset(facingIn)).getBlock().isTranslucent();
              boolean flag2 = blockAccessIn.getBlockState(blockpos3.offset(facingIn)).getBlock().isTranslucent();
--- 615,624 ----
              int j = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos2);
              int k = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos3);
              int l = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos4);
!             float f = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos1).getBlock().getAmbientOcclusionLightValue());
!             float f1 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos2).getBlock().getAmbientOcclusionLightValue());
!             float f2 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos3).getBlock().getAmbientOcclusionLightValue());
!             float f3 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos4).getBlock().getAmbientOcclusionLightValue());
              boolean flag = blockAccessIn.getBlockState(blockpos1.offset(facingIn)).getBlock().isTranslucent();
              boolean flag1 = blockAccessIn.getBlockState(blockpos2.offset(facingIn)).getBlock().isTranslucent();
              boolean flag2 = blockAccessIn.getBlockState(blockpos3.offset(facingIn)).getBlock().isTranslucent();
***************
*** 392,398 ****
              else
              {
                  BlockPos blockpos5 = blockpos1.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[2]);
!                 f4 = blockAccessIn.getBlockState(blockpos5).getBlock().getAmbientOcclusionLightValue();
                  i1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos5);
              }
  
--- 634,640 ----
              else
              {
                  BlockPos blockpos5 = blockpos1.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[2]);
!                 f4 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos5).getBlock().getAmbientOcclusionLightValue());
                  i1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos5);
              }
  
***************
*** 407,413 ****
              else
              {
                  BlockPos blockpos6 = blockpos1.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[3]);
!                 f5 = blockAccessIn.getBlockState(blockpos6).getBlock().getAmbientOcclusionLightValue();
                  j1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos6);
              }
  
--- 649,655 ----
              else
              {
                  BlockPos blockpos6 = blockpos1.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[3]);
!                 f5 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos6).getBlock().getAmbientOcclusionLightValue());
                  j1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos6);
              }
  
***************
*** 422,428 ****
              else
              {
                  BlockPos blockpos7 = blockpos2.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[2]);
!                 f6 = blockAccessIn.getBlockState(blockpos7).getBlock().getAmbientOcclusionLightValue();
                  k1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos7);
              }
  
--- 664,670 ----
              else
              {
                  BlockPos blockpos7 = blockpos2.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[2]);
!                 f6 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos7).getBlock().getAmbientOcclusionLightValue());
                  k1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos7);
              }
  
***************
*** 437,454 ****
              else
              {
                  BlockPos blockpos8 = blockpos2.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[3]);
!                 f7 = blockAccessIn.getBlockState(blockpos8).getBlock().getAmbientOcclusionLightValue();
                  l1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos8);
              }
  
!             int i3 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn);
  
              if (boundsFlags.get(0) || !blockAccessIn.getBlockState(blockPosIn.offset(facingIn)).getBlock().isOpaqueCube())
              {
!                 i3 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn.offset(facingIn));
              }
  
              float f8 = boundsFlags.get(0) ? blockAccessIn.getBlockState(blockpos).getBlock().getAmbientOcclusionLightValue() : blockAccessIn.getBlockState(blockPosIn).getBlock().getAmbientOcclusionLightValue();
              BlockModelRenderer.VertexTranslations blockmodelrenderer$vertextranslations = BlockModelRenderer.VertexTranslations.getVertexTranslations(facingIn);
  
              if (boundsFlags.get(1) && blockmodelrenderer$enumneighborinfo.field_178289_i)
--- 679,697 ----
              else
              {
                  BlockPos blockpos8 = blockpos2.offset(blockmodelrenderer$enumneighborinfo.field_178276_g[3]);
!                 f7 = BlockModelRenderer.fixAoLightValue(blockAccessIn.getBlockState(blockpos8).getBlock().getAmbientOcclusionLightValue());
                  l1 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockpos8);
              }
  
!             int i2 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn);
  
              if (boundsFlags.get(0) || !blockAccessIn.getBlockState(blockPosIn.offset(facingIn)).getBlock().isOpaqueCube())
              {
!                 i2 = blockIn.getMixedBrightnessForBlock(blockAccessIn, blockPosIn.offset(facingIn));
              }
  
              float f8 = boundsFlags.get(0) ? blockAccessIn.getBlockState(blockpos).getBlock().getAmbientOcclusionLightValue() : blockAccessIn.getBlockState(blockPosIn).getBlock().getAmbientOcclusionLightValue();
+             f8 = BlockModelRenderer.fixAoLightValue(f8);
              BlockModelRenderer.VertexTranslations blockmodelrenderer$vertextranslations = BlockModelRenderer.VertexTranslations.getVertexTranslations(facingIn);
  
              if (boundsFlags.get(1) && blockmodelrenderer$enumneighborinfo.field_178289_i)
***************
*** 477,490 ****
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178200_h] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178201_i] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178198_j] = f29 * f25 + f30 * f26 + f31 * f27 + f32 * f28;
!                 int i2 = this.getAoBrightness(l, i, j1, i3);
!                 int j2 = this.getAoBrightness(k, i, i1, i3);
!                 int k2 = this.getAoBrightness(k, j, k1, i3);
!                 int l2 = this.getAoBrightness(l, j, l1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178191_g] = this.getVertexBrightness(i2, j2, k2, l2, f13, f14, f15, f16);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178200_h] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178201_i] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178198_j] = this.getVertexBrightness(i2, j2, k2, l2, f25, f26, f27, f28);
              }
              else
              {
--- 720,733 ----
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178200_h] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178201_i] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178198_j] = f29 * f25 + f30 * f26 + f31 * f27 + f32 * f28;
!                 int j2 = this.getAoBrightness(l, i, j1, i2);
!                 int k2 = this.getAoBrightness(k, i, i1, i2);
!                 int l2 = this.getAoBrightness(k, j, k1, i2);
!                 int i3 = this.getAoBrightness(l, j, l1, i2);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178191_g] = this.getVertexBrightness(j2, k2, l2, i3, f13, f14, f15, f16);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178200_h] = this.getVertexBrightness(j2, k2, l2, i3, f17, f18, f19, f20);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178201_i] = this.getVertexBrightness(j2, k2, l2, i3, f21, f22, f23, f24);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178198_j] = this.getVertexBrightness(j2, k2, l2, i3, f25, f26, f27, f28);
              }
              else
              {
***************
*** 492,501 ****
                  float f10 = (f2 + f + f4 + f8) * 0.25F;
                  float f11 = (f2 + f1 + f6 + f8) * 0.25F;
                  float f12 = (f3 + f1 + f7 + f8) * 0.25F;
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178191_g] = this.getAoBrightness(l, i, j1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178200_h] = this.getAoBrightness(k, i, i1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178201_i] = this.getAoBrightness(k, j, k1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178198_j] = this.getAoBrightness(l, j, l1, i3);
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178191_g] = f9;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178200_h] = f10;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178201_i] = f11;
--- 735,744 ----
                  float f10 = (f2 + f + f4 + f8) * 0.25F;
                  float f11 = (f2 + f1 + f6 + f8) * 0.25F;
                  float f12 = (f3 + f1 + f7 + f8) * 0.25F;
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178191_g] = this.getAoBrightness(l, i, j1, i2);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178200_h] = this.getAoBrightness(k, i, i1, i2);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178201_i] = this.getAoBrightness(k, j, k1, i2);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.field_178198_j] = this.getAoBrightness(l, j, l1, i2);
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178191_g] = f9;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178200_h] = f10;
                  this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.field_178201_i] = f11;
***************
*** 533,544 ****
  
      public static enum EnumNeighborInfo
      {
!         DOWN(new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.5F, false, new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0]),
!         UP(new EnumFacing[]{EnumFacing.EAST, EnumFacing.WEST, EnumFacing.NORTH, EnumFacing.SOUTH}, 1.0F, false, new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0], new BlockModelRenderer.Orientation[0]),
!         NORTH(new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.EAST, EnumFacing.WEST}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST}),
!         SOUTH(new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.DOWN, EnumFacing.UP}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST}),
!         WEST(new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH}),
!         EAST(new EnumFacing[]{EnumFacing.DOWN, EnumFacing.UP, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH});
  
          protected final EnumFacing[] field_178276_g;
          protected final float field_178288_h;
--- 776,787 ----
  
      public static enum EnumNeighborInfo
      {
!         DOWN("DOWN", 0, new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.5F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH}),
!         UP("UP", 1, new EnumFacing[]{EnumFacing.EAST, EnumFacing.WEST, EnumFacing.NORTH, EnumFacing.SOUTH}, 1.0F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.SOUTH}),
!         NORTH("NORTH", 2, new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.EAST, EnumFacing.WEST}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST}),
!         SOUTH("SOUTH", 3, new EnumFacing[]{EnumFacing.WEST, EnumFacing.EAST, EnumFacing.DOWN, EnumFacing.UP}, 0.8F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_WEST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.WEST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.WEST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.EAST}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_EAST, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.EAST, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.EAST}),
!         WEST("WEST", 4, new EnumFacing[]{EnumFacing.UP, EnumFacing.DOWN, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH}),
!         EAST("EAST", 5, new EnumFacing[]{EnumFacing.DOWN, EnumFacing.UP, EnumFacing.NORTH, EnumFacing.SOUTH}, 0.6F, true, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.SOUTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.DOWN, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.NORTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_NORTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.NORTH}, new BlockModelRenderer.Orientation[]{BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.SOUTH, BlockModelRenderer.Orientation.FLIP_UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.FLIP_SOUTH, BlockModelRenderer.Orientation.UP, BlockModelRenderer.Orientation.SOUTH});
  
          protected final EnumFacing[] field_178276_g;
          protected final float field_178288_h;
***************
*** 548,563 ****
          protected final BlockModelRenderer.Orientation[] field_178284_l;
          protected final BlockModelRenderer.Orientation[] field_178285_m;
          private static final BlockModelRenderer.EnumNeighborInfo[] field_178282_n = new BlockModelRenderer.EnumNeighborInfo[6];
  
!         private EnumNeighborInfo(EnumFacing[] p_i46236_3_, float p_i46236_4_, boolean p_i46236_5_, BlockModelRenderer.Orientation[] p_i46236_6_, BlockModelRenderer.Orientation[] p_i46236_7_, BlockModelRenderer.Orientation[] p_i46236_8_, BlockModelRenderer.Orientation[] p_i46236_9_)
          {
!             this.field_178276_g = p_i46236_3_;
!             this.field_178288_h = p_i46236_4_;
!             this.field_178289_i = p_i46236_5_;
!             this.field_178286_j = p_i46236_6_;
!             this.field_178287_k = p_i46236_7_;
!             this.field_178284_l = p_i46236_8_;
!             this.field_178285_m = p_i46236_9_;
          }
  
          public static BlockModelRenderer.EnumNeighborInfo getNeighbourInfo(EnumFacing p_178273_0_)
--- 791,808 ----
          protected final BlockModelRenderer.Orientation[] field_178284_l;
          protected final BlockModelRenderer.Orientation[] field_178285_m;
          private static final BlockModelRenderer.EnumNeighborInfo[] field_178282_n = new BlockModelRenderer.EnumNeighborInfo[6];
+         private static final BlockModelRenderer.EnumNeighborInfo[] $VALUES = new BlockModelRenderer.EnumNeighborInfo[]{DOWN, UP, NORTH, SOUTH, WEST, EAST};
+         private static final String __OBFID = "CL_00002516";
  
!         private EnumNeighborInfo(String p_i6_3_, int p_i6_4_, EnumFacing[] p_i6_5_, float p_i6_6_, boolean p_i6_7_, BlockModelRenderer.Orientation[] p_i6_8_, BlockModelRenderer.Orientation[] p_i6_9_, BlockModelRenderer.Orientation[] p_i6_10_, BlockModelRenderer.Orientation[] p_i6_11_)
          {
!             this.field_178276_g = p_i6_5_;
!             this.field_178288_h = p_i6_6_;
!             this.field_178289_i = p_i6_7_;
!             this.field_178286_j = p_i6_8_;
!             this.field_178287_k = p_i6_9_;
!             this.field_178284_l = p_i6_10_;
!             this.field_178285_m = p_i6_11_;
          }
  
          public static BlockModelRenderer.EnumNeighborInfo getNeighbourInfo(EnumFacing p_178273_0_)
***************
*** 577,624 ****
  
      public static enum Orientation
      {
!         DOWN(EnumFacing.DOWN, false),
!         UP(EnumFacing.UP, false),
!         NORTH(EnumFacing.NORTH, false),
!         SOUTH(EnumFacing.SOUTH, false),
!         WEST(EnumFacing.WEST, false),
!         EAST(EnumFacing.EAST, false),
!         FLIP_DOWN(EnumFacing.DOWN, true),
!         FLIP_UP(EnumFacing.UP, true),
!         FLIP_NORTH(EnumFacing.NORTH, true),
!         FLIP_SOUTH(EnumFacing.SOUTH, true),
!         FLIP_WEST(EnumFacing.WEST, true),
!         FLIP_EAST(EnumFacing.EAST, true);
  
          protected final int field_178229_m;
  
!         private Orientation(EnumFacing p_i46233_3_, boolean p_i46233_4_)
          {
!             this.field_178229_m = p_i46233_3_.getIndex() + (p_i46233_4_ ? EnumFacing.values().length : 0);
          }
      }
  
      static enum VertexTranslations
      {
!         DOWN(0, 1, 2, 3),
!         UP(2, 3, 0, 1),
!         NORTH(3, 0, 1, 2),
!         SOUTH(0, 1, 2, 3),
!         WEST(3, 0, 1, 2),
!         EAST(1, 2, 3, 0);
  
          private final int field_178191_g;
          private final int field_178200_h;
          private final int field_178201_i;
          private final int field_178198_j;
          private static final BlockModelRenderer.VertexTranslations[] field_178199_k = new BlockModelRenderer.VertexTranslations[6];
  
!         private VertexTranslations(int p_i46234_3_, int p_i46234_4_, int p_i46234_5_, int p_i46234_6_)
          {
!             this.field_178191_g = p_i46234_3_;
!             this.field_178200_h = p_i46234_4_;
!             this.field_178201_i = p_i46234_5_;
!             this.field_178198_j = p_i46234_6_;
          }
  
          public static BlockModelRenderer.VertexTranslations getVertexTranslations(EnumFacing p_178184_0_)
--- 822,873 ----
  
      public static enum Orientation
      {
!         DOWN("DOWN", 0, EnumFacing.DOWN, false),
!         UP("UP", 1, EnumFacing.UP, false),
!         NORTH("NORTH", 2, EnumFacing.NORTH, false),
!         SOUTH("SOUTH", 3, EnumFacing.SOUTH, false),
!         WEST("WEST", 4, EnumFacing.WEST, false),
!         EAST("EAST", 5, EnumFacing.EAST, false),
!         FLIP_DOWN("FLIP_DOWN", 6, EnumFacing.DOWN, true),
!         FLIP_UP("FLIP_UP", 7, EnumFacing.UP, true),
!         FLIP_NORTH("FLIP_NORTH", 8, EnumFacing.NORTH, true),
!         FLIP_SOUTH("FLIP_SOUTH", 9, EnumFacing.SOUTH, true),
!         FLIP_WEST("FLIP_WEST", 10, EnumFacing.WEST, true),
!         FLIP_EAST("FLIP_EAST", 11, EnumFacing.EAST, true);
  
          protected final int field_178229_m;
+         private static final BlockModelRenderer.Orientation[] $VALUES = new BlockModelRenderer.Orientation[]{DOWN, UP, NORTH, SOUTH, WEST, EAST, FLIP_DOWN, FLIP_UP, FLIP_NORTH, FLIP_SOUTH, FLIP_WEST, FLIP_EAST};
+         private static final String __OBFID = "CL_00002513";
  
!         private Orientation(String p_i8_3_, int p_i8_4_, EnumFacing p_i8_5_, boolean p_i8_6_)
          {
!             this.field_178229_m = p_i8_5_.getIndex() + (p_i8_6_ ? EnumFacing.values().length : 0);
          }
      }
  
      static enum VertexTranslations
      {
!         DOWN("DOWN", 0, 0, 1, 2, 3),
!         UP("UP", 1, 2, 3, 0, 1),
!         NORTH("NORTH", 2, 3, 0, 1, 2),
!         SOUTH("SOUTH", 3, 0, 1, 2, 3),
!         WEST("WEST", 4, 3, 0, 1, 2),
!         EAST("EAST", 5, 1, 2, 3, 0);
  
          private final int field_178191_g;
          private final int field_178200_h;
          private final int field_178201_i;
          private final int field_178198_j;
          private static final BlockModelRenderer.VertexTranslations[] field_178199_k = new BlockModelRenderer.VertexTranslations[6];
+         private static final BlockModelRenderer.VertexTranslations[] $VALUES = new BlockModelRenderer.VertexTranslations[]{DOWN, UP, NORTH, SOUTH, WEST, EAST};
+         private static final String __OBFID = "CL_00002514";
  
!         private VertexTranslations(String p_i7_3_, int p_i7_4_, int p_i7_5_, int p_i7_6_, int p_i7_7_, int p_i7_8_)
          {
!             this.field_178191_g = p_i7_5_;
!             this.field_178200_h = p_i7_6_;
!             this.field_178201_i = p_i7_7_;
!             this.field_178198_j = p_i7_8_;
          }
  
          public static BlockModelRenderer.VertexTranslations getVertexTranslations(EnumFacing p_178184_0_)
diff -rc ./client/renderer/BlockRendererDispatcher.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockRendererDispatcher.java
*** ./client/renderer/BlockRendererDispatcher.java	2021-04-03 11:27:27.245425000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/BlockRendererDispatcher.java	2019-05-30 22:29:17.518613000 -0700
***************
*** 12,21 ****
--- 12,25 ----
  import net.minecraft.crash.CrashReport;
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.util.BlockPos;
+ import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ReportedException;
  import net.minecraft.world.IBlockAccess;
  import net.minecraft.world.WorldType;
+ import optifine.Config;
+ import optifine.Reflector;
+ import shadersmod.client.SVertexBuilder;
  
  public class BlockRendererDispatcher implements IResourceManagerReloadListener
  {
***************
*** 24,29 ****
--- 28,34 ----
      private final BlockModelRenderer blockModelRenderer = new BlockModelRenderer();
      private final ChestRenderer chestRenderer = new ChestRenderer();
      private final BlockFluidRenderer fluidRenderer = new BlockFluidRenderer();
+     private static final String __OBFID = "CL_00002520";
  
      public BlockRendererDispatcher(BlockModelShapes blockModelShapesIn, GameSettings gameSettingsIn)
      {
***************
*** 45,50 ****
--- 50,74 ----
          {
              state = block.getActualState(state, blockAccess, pos);
              IBakedModel ibakedmodel = this.blockModelShapes.getModelForState(state);
+ 
+             if (Reflector.ISmartBlockModel.isInstance(ibakedmodel))
+             {
+                 IBlockState iblockstate = (IBlockState)Reflector.call(block, Reflector.ForgeBlock_getExtendedState, new Object[] {state, blockAccess, pos});
+ 
+                 for (EnumWorldBlockLayer enumworldblocklayer : EnumWorldBlockLayer.values())
+                 {
+                     if (Reflector.callBoolean(block, Reflector.ForgeBlock_canRenderInLayer, new Object[] {enumworldblocklayer}))
+                     {
+                         Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, new Object[] {enumworldblocklayer});
+                         IBakedModel ibakedmodel2 = (IBakedModel)Reflector.call(ibakedmodel, Reflector.ISmartBlockModel_handleBlockState, new Object[] {iblockstate});
+                         IBakedModel ibakedmodel3 = (new SimpleBakedModel.Builder(ibakedmodel2, texture)).makeBakedModel();
+                         this.blockModelRenderer.renderModel(blockAccess, ibakedmodel3, state, pos, Tessellator.getInstance().getWorldRenderer());
+                     }
+                 }
+ 
+                 return;
+             }
+ 
              IBakedModel ibakedmodel1 = (new SimpleBakedModel.Builder(ibakedmodel, texture)).makeBakedModel();
              this.blockModelRenderer.renderModel(blockAccess, ibakedmodel1, state, pos, Tessellator.getInstance().getWorldRenderer());
          }
***************
*** 65,78 ****
                  switch (i)
                  {
                      case 1:
!                         return this.fluidRenderer.renderFluid(blockAccess, state, pos, worldRendererIn);
  
                      case 2:
                          return false;
  
                      case 3:
                          IBakedModel ibakedmodel = this.getModelFromBlockState(state, blockAccess, pos);
!                         return this.blockModelRenderer.renderModel(blockAccess, ibakedmodel, state, pos, worldRendererIn);
  
                      default:
                          return false;
--- 89,127 ----
                  switch (i)
                  {
                      case 1:
!                         if (Config.isShaders())
!                         {
!                             SVertexBuilder.pushEntity(state, pos, blockAccess, worldRendererIn);
!                         }
! 
!                         boolean flag1 = this.fluidRenderer.renderFluid(blockAccess, state, pos, worldRendererIn);
! 
!                         if (Config.isShaders())
!                         {
!                             SVertexBuilder.popEntity(worldRendererIn);
!                         }
! 
!                         return flag1;
  
                      case 2:
                          return false;
  
                      case 3:
                          IBakedModel ibakedmodel = this.getModelFromBlockState(state, blockAccess, pos);
! 
!                         if (Config.isShaders())
!                         {
!                             SVertexBuilder.pushEntity(state, pos, blockAccess, worldRendererIn);
!                         }
! 
!                         boolean flag = this.blockModelRenderer.renderModel(blockAccess, ibakedmodel, state, pos, worldRendererIn);
! 
!                         if (Config.isShaders())
!                         {
!                             SVertexBuilder.popEntity(worldRendererIn);
!                         }
! 
!                         return flag;
  
                      default:
                          return false;
***************
*** 115,121 ****
              {
                  state = block.getActualState(state, worldIn, pos);
              }
!             catch (Exception var6)
              {
                  ;
              }
--- 164,170 ----
              {
                  state = block.getActualState(state, worldIn, pos);
              }
!             catch (Exception var7)
              {
                  ;
              }
***************
*** 128,133 ****
--- 177,188 ----
              ibakedmodel = ((WeightedBakedModel)ibakedmodel).getAlternativeModel(MathHelper.getPositionRandom(pos));
          }
  
+         if (Reflector.ISmartBlockModel.isInstance(ibakedmodel))
+         {
+             IBlockState iblockstate = (IBlockState)Reflector.call(block, Reflector.ForgeBlock_getExtendedState, new Object[] {state, worldIn, pos});
+             ibakedmodel = (IBakedModel)Reflector.call(ibakedmodel, Reflector.ISmartBlockModel_handleBlockState, new Object[] {iblockstate});
+         }
+ 
          return ibakedmodel;
      }
  
diff -rc ./client/renderer/chunk/RenderChunk.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/chunk/RenderChunk.java
*** ./client/renderer/chunk/RenderChunk.java	2021-04-03 11:27:27.762224000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/chunk/RenderChunk.java	2019-05-30 22:29:18.212213000 -0700
***************
*** 1,15 ****
  package net.minecraft.client.renderer.chunk;
  
- import com.google.common.collect.Maps;
  import com.google.common.collect.Sets;
  import java.nio.FloatBuffer;
  import java.util.EnumMap;
  import java.util.HashSet;
  import java.util.Set;
  import java.util.concurrent.locks.ReentrantLock;
  import net.minecraft.block.Block;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.BlockRendererDispatcher;
  import net.minecraft.client.renderer.GLAllocation;
  import net.minecraft.client.renderer.GlStateManager;
--- 1,18 ----
  package net.minecraft.client.renderer.chunk;
  
  import com.google.common.collect.Sets;
  import java.nio.FloatBuffer;
  import java.util.EnumMap;
  import java.util.HashSet;
+ import java.util.Iterator;
  import java.util.Set;
  import java.util.concurrent.locks.ReentrantLock;
  import net.minecraft.block.Block;
+ import net.minecraft.block.BlockCactus;
+ import net.minecraft.block.BlockRedstoneWire;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
+ import net.minecraft.client.multiplayer.WorldClient;
  import net.minecraft.client.renderer.BlockRendererDispatcher;
  import net.minecraft.client.renderer.GLAllocation;
  import net.minecraft.client.renderer.GlStateManager;
***************
*** 26,33 ****
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.EnumWorldBlockLayer;
- import net.minecraft.world.IBlockAccess;
  import net.minecraft.world.World;
  
  public class RenderChunk
  {
--- 29,40 ----
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.world.World;
+ import optifine.BlockPosM;
+ import optifine.Config;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import shadersmod.client.SVertexBuilder;
  
  public class RenderChunk
  {
***************
*** 39,52 ****
      private final ReentrantLock lockCompileTask = new ReentrantLock();
      private final ReentrantLock lockCompiledChunk = new ReentrantLock();
      private ChunkCompileTaskGenerator compileTask = null;
!     private final Set<TileEntity> field_181056_j = Sets.<TileEntity>newHashSet();
      private final int index;
      private final FloatBuffer modelviewMatrix = GLAllocation.createDirectFloatBuffer(16);
      private final VertexBuffer[] vertexBuffers = new VertexBuffer[EnumWorldBlockLayer.values().length];
      public AxisAlignedBB boundingBox;
      private int frameIndex = -1;
      private boolean needsUpdate = true;
!     private EnumMap<EnumFacing, BlockPos> field_181702_p = Maps.newEnumMap(EnumFacing.class);
  
      public RenderChunk(World worldIn, RenderGlobal renderGlobalIn, BlockPos blockPosIn, int indexIn)
      {
--- 46,66 ----
      private final ReentrantLock lockCompileTask = new ReentrantLock();
      private final ReentrantLock lockCompiledChunk = new ReentrantLock();
      private ChunkCompileTaskGenerator compileTask = null;
!     private final Set field_181056_j = Sets.newHashSet();
      private final int index;
      private final FloatBuffer modelviewMatrix = GLAllocation.createDirectFloatBuffer(16);
      private final VertexBuffer[] vertexBuffers = new VertexBuffer[EnumWorldBlockLayer.values().length];
      public AxisAlignedBB boundingBox;
      private int frameIndex = -1;
      private boolean needsUpdate = true;
!     private EnumMap field_181702_p;
!     private static final String __OBFID = "CL_00002452";
!     private BlockPos[] positionOffsets16 = new BlockPos[EnumFacing.VALUES.length];
!     private static EnumWorldBlockLayer[] ENUM_WORLD_BLOCK_LAYERS = EnumWorldBlockLayer.values();
!     private EnumWorldBlockLayer[] blockLayersSingle = new EnumWorldBlockLayer[1];
!     private boolean isMipmaps = Config.isMipmaps();
!     private boolean fixBlockLayer = !Reflector.BetterFoliageClient.exists();
!     private boolean playerUpdate = false;
  
      public RenderChunk(World worldIn, RenderGlobal renderGlobalIn, BlockPos blockPosIn, int indexIn)
      {
***************
*** 91,103 ****
          this.stopCompileTask();
          this.position = pos;
          this.boundingBox = new AxisAlignedBB(pos, pos.add(16, 16, 16));
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
!             this.field_181702_p.put(enumfacing, pos.offset(enumfacing, 16));
          }
- 
-         this.initModelviewMatrix();
      }
  
      public void resortTransparency(float x, float y, float z, ChunkCompileTaskGenerator generator)
--- 105,116 ----
          this.stopCompileTask();
          this.position = pos;
          this.boundingBox = new AxisAlignedBB(pos, pos.add(16, 16, 16));
+         this.initModelviewMatrix();
  
!         for (int i = 0; i < this.positionOffsets16.length; ++i)
          {
!             this.positionOffsets16[i] = null;
          }
      }
  
      public void resortTransparency(float x, float y, float z, ChunkCompileTaskGenerator generator)
***************
*** 106,125 ****
  
          if (compiledchunk.getState() != null && !compiledchunk.isLayerEmpty(EnumWorldBlockLayer.TRANSLUCENT))
          {
!             this.preRenderBlocks(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(EnumWorldBlockLayer.TRANSLUCENT), this.position);
!             generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(EnumWorldBlockLayer.TRANSLUCENT).setVertexState(compiledchunk.getState());
!             this.postRenderBlocks(EnumWorldBlockLayer.TRANSLUCENT, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(EnumWorldBlockLayer.TRANSLUCENT), compiledchunk);
          }
      }
  
      public void rebuildChunk(float x, float y, float z, ChunkCompileTaskGenerator generator)
      {
          CompiledChunk compiledchunk = new CompiledChunk();
!         int i = 1;
          BlockPos blockpos = this.position;
          BlockPos blockpos1 = blockpos.add(15, 15, 15);
          generator.getLock().lock();
!         IBlockAccess iblockaccess;
  
          try
          {
--- 119,139 ----
  
          if (compiledchunk.getState() != null && !compiledchunk.isLayerEmpty(EnumWorldBlockLayer.TRANSLUCENT))
          {
!             WorldRenderer worldrenderer = generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(EnumWorldBlockLayer.TRANSLUCENT);
!             this.preRenderBlocks(worldrenderer, this.position);
!             worldrenderer.setVertexState(compiledchunk.getState());
!             this.postRenderBlocks(EnumWorldBlockLayer.TRANSLUCENT, x, y, z, worldrenderer, compiledchunk);
          }
      }
  
      public void rebuildChunk(float x, float y, float z, ChunkCompileTaskGenerator generator)
      {
          CompiledChunk compiledchunk = new CompiledChunk();
!         boolean flag = true;
          BlockPos blockpos = this.position;
          BlockPos blockpos1 = blockpos.add(15, 15, 15);
          generator.getLock().lock();
!         RegionRenderCache regionrendercache;
  
          try
          {
***************
*** 128,134 ****
                  return;
              }
  
!             iblockaccess = new RegionRenderCache(this.world, blockpos.add(-1, -1, -1), blockpos1.add(1, 1, 1), 1);
              generator.setCompiledChunk(compiledchunk);
          }
          finally
--- 142,159 ----
                  return;
              }
  
!             if (this.world == null)
!             {
!                 return;
!             }
! 
!             regionrendercache = this.createRegionRenderCache(this.world, blockpos.add(-1, -1, -1), blockpos1.add(1, 1, 1), 1);
! 
!             if (Reflector.MinecraftForgeClient_onRebuildChunk.exists())
!             {
!                 Reflector.call(Reflector.MinecraftForgeClient_onRebuildChunk, new Object[] {this.world, this.position, regionrendercache});
!             }
! 
              generator.setCompiledChunk(compiledchunk);
          }
          finally
***************
*** 136,164 ****
              generator.getLock().unlock();
          }
  
!         VisGraph lvt_10_1_ = new VisGraph();
!         HashSet lvt_11_1_ = Sets.newHashSet();
  
!         if (!iblockaccess.extendedLevelsInChunkCache())
          {
              ++renderChunksUpdated;
!             boolean[] aboolean = new boolean[EnumWorldBlockLayer.values().length];
              BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
  
!             for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(blockpos, blockpos1))
              {
!                 IBlockState iblockstate = iblockaccess.getBlockState(blockpos$mutableblockpos);
                  Block block = iblockstate.getBlock();
  
                  if (block.isOpaqueCube())
                  {
!                     lvt_10_1_.func_178606_a(blockpos$mutableblockpos);
                  }
  
!                 if (block.hasTileEntity())
                  {
!                     TileEntity tileentity = iblockaccess.getTileEntity(new BlockPos(blockpos$mutableblockpos));
!                     TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
  
                      if (tileentity != null && tileentityspecialrenderer != null)
                      {
--- 161,194 ----
              generator.getLock().unlock();
          }
  
!         VisGraph var10 = new VisGraph();
!         HashSet var11 = Sets.newHashSet();
  
!         if (!regionrendercache.extendedLevelsInChunkCache())
          {
              ++renderChunksUpdated;
!             boolean[] aboolean = new boolean[ENUM_WORLD_BLOCK_LAYERS.length];
              BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
+             Iterator iterator = BlockPosM.getAllInBoxMutable(blockpos, blockpos1).iterator();
+             boolean flag1 = Reflector.ForgeBlock_hasTileEntity.exists();
+             boolean flag2 = Reflector.ForgeBlock_canRenderInLayer.exists();
+             boolean flag3 = Reflector.ForgeHooksClient_setRenderLayer.exists();
  
!             while (iterator.hasNext())
              {
!                 BlockPosM blockposm = (BlockPosM)iterator.next();
!                 IBlockState iblockstate = regionrendercache.getBlockState(blockposm);
                  Block block = iblockstate.getBlock();
  
                  if (block.isOpaqueCube())
                  {
!                     var10.func_178606_a(blockposm);
                  }
  
!                 if (ReflectorForge.blockHasTileEntity(iblockstate))
                  {
!                     TileEntity tileentity = regionrendercache.getTileEntity(new BlockPos(blockposm));
!                     TileEntitySpecialRenderer tileentityspecialrenderer = TileEntityRendererDispatcher.instance.getSpecialRenderer(tileentity);
  
                      if (tileentity != null && tileentityspecialrenderer != null)
                      {
***************
*** 166,219 ****
  
                          if (tileentityspecialrenderer.func_181055_a())
                          {
!                             lvt_11_1_.add(tileentity);
                          }
                      }
                  }
  
!                 EnumWorldBlockLayer enumworldblocklayer1 = block.getBlockLayer();
!                 int j = enumworldblocklayer1.ordinal();
  
!                 if (block.getRenderType() != -1)
                  {
!                     WorldRenderer worldrenderer = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(j);
  
!                     if (!compiledchunk.isLayerStarted(enumworldblocklayer1))
                      {
!                         compiledchunk.setLayerStarted(enumworldblocklayer1);
!                         this.preRenderBlocks(worldrenderer, blockpos);
                      }
  
!                     aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, blockpos$mutableblockpos, iblockaccess, worldrenderer);
                  }
              }
  
!             for (EnumWorldBlockLayer enumworldblocklayer : EnumWorldBlockLayer.values())
              {
!                 if (aboolean[enumworldblocklayer.ordinal()])
                  {
!                     compiledchunk.setLayerUsed(enumworldblocklayer);
                  }
  
!                 if (compiledchunk.isLayerStarted(enumworldblocklayer))
                  {
!                     this.postRenderBlocks(enumworldblocklayer, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(enumworldblocklayer), compiledchunk);
                  }
              }
          }
  
!         compiledchunk.setVisibility(lvt_10_1_.computeVisibility());
          this.lockCompileTask.lock();
  
          try
          {
!             Set<TileEntity> set = Sets.newHashSet(lvt_11_1_);
!             Set<TileEntity> set1 = Sets.newHashSet(this.field_181056_j);
!             set.removeAll(this.field_181056_j);
!             set1.removeAll(lvt_11_1_);
              this.field_181056_j.clear();
!             this.field_181056_j.addAll(lvt_11_1_);
!             this.renderGlobal.func_181023_a(set1, set);
          }
          finally
          {
--- 196,291 ----
  
                          if (tileentityspecialrenderer.func_181055_a())
                          {
!                             var11.add(tileentity);
                          }
                      }
                  }
  
!                 EnumWorldBlockLayer[] aenumworldblocklayer;
  
!                 if (flag2)
                  {
!                     aenumworldblocklayer = ENUM_WORLD_BLOCK_LAYERS;
!                 }
!                 else
!                 {
!                     aenumworldblocklayer = this.blockLayersSingle;
!                     aenumworldblocklayer[0] = block.getBlockLayer();
!                 }
! 
!                 for (int i = 0; i < aenumworldblocklayer.length; ++i)
!                 {
!                     EnumWorldBlockLayer enumworldblocklayer = aenumworldblocklayer[i];
  
!                     if (flag2)
                      {
!                         boolean flag4 = Reflector.callBoolean(block, Reflector.ForgeBlock_canRenderInLayer, new Object[] {enumworldblocklayer});
! 
!                         if (!flag4)
!                         {
!                             continue;
!                         }
                      }
  
!                     if (flag3)
!                     {
!                         Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, new Object[] {enumworldblocklayer});
!                     }
! 
!                     if (this.fixBlockLayer)
!                     {
!                         enumworldblocklayer = this.fixBlockLayer(block, enumworldblocklayer);
!                     }
! 
!                     int j = enumworldblocklayer.ordinal();
! 
!                     if (block.getRenderType() != -1)
!                     {
!                         WorldRenderer worldrenderer = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(j);
!                         worldrenderer.setBlockLayer(enumworldblocklayer);
! 
!                         if (!compiledchunk.isLayerStarted(enumworldblocklayer))
!                         {
!                             compiledchunk.setLayerStarted(enumworldblocklayer);
!                             this.preRenderBlocks(worldrenderer, blockpos);
!                         }
! 
!                         aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, blockposm, regionrendercache, worldrenderer);
!                     }
                  }
              }
  
!             for (EnumWorldBlockLayer enumworldblocklayer1 : ENUM_WORLD_BLOCK_LAYERS)
              {
!                 if (aboolean[enumworldblocklayer1.ordinal()])
                  {
!                     compiledchunk.setLayerUsed(enumworldblocklayer1);
                  }
  
!                 if (compiledchunk.isLayerStarted(enumworldblocklayer1))
                  {
!                     if (Config.isShaders())
!                     {
!                         SVertexBuilder.calcNormalChunkLayer(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(enumworldblocklayer1));
!                     }
! 
!                     this.postRenderBlocks(enumworldblocklayer1, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(enumworldblocklayer1), compiledchunk);
                  }
              }
          }
  
!         compiledchunk.setVisibility(var10.computeVisibility());
          this.lockCompileTask.lock();
  
          try
          {
!             HashSet hashset1 = Sets.newHashSet(var11);
!             HashSet hashset2 = Sets.newHashSet(this.field_181056_j);
!             hashset1.removeAll(this.field_181056_j);
!             hashset2.removeAll(var11);
              this.field_181056_j.clear();
!             this.field_181056_j.addAll(var11);
!             this.renderGlobal.func_181023_a(hashset2, hashset1);
          }
          finally
          {
***************
*** 266,297 ****
      public ChunkCompileTaskGenerator makeCompileTaskTransparency()
      {
          this.lockCompileTask.lock();
!         ChunkCompileTaskGenerator chunkcompiletaskgenerator;
  
          try
          {
!             if (this.compileTask == null || this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.PENDING)
              {
!                 if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
!                 {
!                     this.compileTask.finish();
!                     this.compileTask = null;
!                 }
  
!                 this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY);
!                 this.compileTask.setCompiledChunk(this.compiledChunk);
!                 chunkcompiletaskgenerator = this.compileTask;
!                 return chunkcompiletaskgenerator;
              }
  
!             chunkcompiletaskgenerator = null;
          }
          finally
          {
              this.lockCompileTask.unlock();
          }
  
!         return chunkcompiletaskgenerator;
      }
  
      private void preRenderBlocks(WorldRenderer worldRendererIn, BlockPos pos)
--- 338,370 ----
      public ChunkCompileTaskGenerator makeCompileTaskTransparency()
      {
          this.lockCompileTask.lock();
!         ChunkCompileTaskGenerator chunkcompiletaskgenerator1;
  
          try
          {
!             if (this.compileTask != null && this.compileTask.getStatus() == ChunkCompileTaskGenerator.Status.PENDING)
              {
!                 ChunkCompileTaskGenerator chunkcompiletaskgenerator2 = null;
!                 return chunkcompiletaskgenerator2;
!             }
  
!             if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
!             {
!                 this.compileTask.finish();
!                 this.compileTask = null;
              }
  
!             this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY);
!             this.compileTask.setCompiledChunk(this.compiledChunk);
!             ChunkCompileTaskGenerator chunkcompiletaskgenerator = this.compileTask;
!             chunkcompiletaskgenerator1 = chunkcompiletaskgenerator;
          }
          finally
          {
              this.lockCompileTask.unlock();
          }
  
!         return chunkcompiletaskgenerator1;
      }
  
      private void preRenderBlocks(WorldRenderer worldRendererIn, BlockPos pos)
***************
*** 375,380 ****
--- 448,465 ----
      public void setNeedsUpdate(boolean needsUpdateIn)
      {
          this.needsUpdate = needsUpdateIn;
+ 
+         if (this.needsUpdate)
+         {
+             if (this.isWorldPlayerUpdate())
+             {
+                 this.playerUpdate = true;
+             }
+         }
+         else
+         {
+             this.playerUpdate = false;
+         }
      }
  
      public boolean isNeedsUpdate()
***************
*** 384,389 ****
  
      public BlockPos func_181701_a(EnumFacing p_181701_1_)
      {
!         return (BlockPos)this.field_181702_p.get(p_181701_1_);
      }
  }
--- 469,538 ----
  
      public BlockPos func_181701_a(EnumFacing p_181701_1_)
      {
!         return this.getPositionOffset16(p_181701_1_);
!     }
! 
!     public BlockPos getPositionOffset16(EnumFacing p_getPositionOffset16_1_)
!     {
!         int i = p_getPositionOffset16_1_.getIndex();
!         BlockPos blockpos = this.positionOffsets16[i];
! 
!         if (blockpos == null)
!         {
!             blockpos = this.getPosition().offset(p_getPositionOffset16_1_, 16);
!             this.positionOffsets16[i] = blockpos;
!         }
! 
!         return blockpos;
!     }
! 
!     private boolean isWorldPlayerUpdate()
!     {
!         if (this.world instanceof WorldClient)
!         {
!             WorldClient worldclient = (WorldClient)this.world;
!             return worldclient.isPlayerUpdate();
!         }
!         else
!         {
!             return false;
!         }
!     }
! 
!     public boolean isPlayerUpdate()
!     {
!         return this.playerUpdate;
!     }
! 
!     protected RegionRenderCache createRegionRenderCache(World p_createRegionRenderCache_1_, BlockPos p_createRegionRenderCache_2_, BlockPos p_createRegionRenderCache_3_, int p_createRegionRenderCache_4_)
!     {
!         return new RegionRenderCache(p_createRegionRenderCache_1_, p_createRegionRenderCache_2_, p_createRegionRenderCache_3_, p_createRegionRenderCache_4_);
!     }
! 
!     private EnumWorldBlockLayer fixBlockLayer(Block p_fixBlockLayer_1_, EnumWorldBlockLayer p_fixBlockLayer_2_)
!     {
!         if (this.isMipmaps)
!         {
!             if (p_fixBlockLayer_2_ == EnumWorldBlockLayer.CUTOUT)
!             {
!                 if (p_fixBlockLayer_1_ instanceof BlockRedstoneWire)
!                 {
!                     return p_fixBlockLayer_2_;
!                 }
! 
!                 if (p_fixBlockLayer_1_ instanceof BlockCactus)
!                 {
!                     return p_fixBlockLayer_2_;
!                 }
! 
!                 return EnumWorldBlockLayer.CUTOUT_MIPPED;
!             }
!         }
!         else if (p_fixBlockLayer_2_ == EnumWorldBlockLayer.CUTOUT_MIPPED)
!         {
!             return EnumWorldBlockLayer.CUTOUT;
!         }
! 
!         return p_fixBlockLayer_2_;
      }
  }
diff -rc ./client/renderer/chunk/VisGraph.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/chunk/VisGraph.java
*** ./client/renderer/chunk/VisGraph.java	2021-04-03 11:27:27.788494000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/chunk/VisGraph.java	2019-05-30 22:29:18.246194000 -0700
***************
*** 1,13 ****
  package net.minecraft.client.renderer.chunk;
  
! import com.google.common.collect.Lists;
  import java.util.BitSet;
  import java.util.EnumSet;
- import java.util.Queue;
  import java.util.Set;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumFacing;
! import net.minecraft.util.IntegerCache;
  
  public class VisGraph
  {
--- 1,13 ----
  package net.minecraft.client.renderer.chunk;
  
! import java.util.ArrayDeque;
  import java.util.BitSet;
  import java.util.EnumSet;
  import java.util.Set;
+ 
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumFacing;
! import optifine.IntegerCache;
  
  public class VisGraph
  {
***************
*** 17,22 ****
--- 17,23 ----
      private final BitSet field_178612_d = new BitSet(4096);
      private static final int[] field_178613_e = new int[1352];
      private int field_178611_f = 4096;
+     private static final String __OBFID = "CL_00002450";
  
      public void func_178606_a(BlockPos pos)
      {
***************
*** 60,98 ****
          return setvisibility;
      }
  
!     public Set<EnumFacing> func_178609_b(BlockPos pos)
      {
          return this.func_178604_a(getIndex(pos));
      }
  
!     private Set<EnumFacing> func_178604_a(int p_178604_1_)
      {
!         Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
!         Queue<Integer> queue = Lists.<Integer>newLinkedList();
!         queue.add(IntegerCache.func_181756_a(p_178604_1_));
          this.field_178612_d.set(p_178604_1_, true);
  
!         while (!((Queue)queue).isEmpty())
          {
!             int i = ((Integer)queue.poll()).intValue();
!             this.func_178610_a(i, set);
  
!             for (EnumFacing enumfacing : EnumFacing.values())
              {
                  int j = this.func_178603_a(i, enumfacing);
  
                  if (j >= 0 && !this.field_178612_d.get(j))
                  {
                      this.field_178612_d.set(j, true);
!                     queue.add(IntegerCache.func_181756_a(j));
                  }
              }
          }
  
!         return set;
      }
  
!     private void func_178610_a(int p_178610_1_, Set<EnumFacing> p_178610_2_)
      {
          int i = p_178610_1_ >> 0 & 15;
  
--- 61,99 ----
          return setvisibility;
      }
  
!     public Set func_178609_b(BlockPos pos)
      {
          return this.func_178604_a(getIndex(pos));
      }
  
!     private Set func_178604_a(int p_178604_1_)
      {
!         EnumSet enumset = EnumSet.noneOf(EnumFacing.class);
!         ArrayDeque arraydeque = new ArrayDeque(384);
!         arraydeque.add(IntegerCache.valueOf(p_178604_1_));
          this.field_178612_d.set(p_178604_1_, true);
  
!         while (!arraydeque.isEmpty())
          {
!             int i = ((Integer)arraydeque.poll()).intValue();
!             this.func_178610_a(i, enumset);
  
!             for (EnumFacing enumfacing : EnumFacing.VALUES)
              {
                  int j = this.func_178603_a(i, enumfacing);
  
                  if (j >= 0 && !this.field_178612_d.get(j))
                  {
                      this.field_178612_d.set(j, true);
!                     arraydeque.add(IntegerCache.valueOf(j));
                  }
              }
          }
  
!         return enumset;
      }
  
!     private void func_178610_a(int p_178610_1_, Set p_178610_2_)
      {
          int i = p_178610_1_ >> 0 & 15;
  
***************
*** 130,138 ****
  
      private int func_178603_a(int p_178603_1_, EnumFacing p_178603_2_)
      {
!         switch (p_178603_2_)
          {
!             case DOWN:
                  if ((p_178603_1_ >> 8 & 15) == 0)
                  {
                      return -1;
--- 131,139 ----
  
      private int func_178603_a(int p_178603_1_, EnumFacing p_178603_2_)
      {
!         switch (VisGraph.VisGraph$1.field_178617_a[p_178603_2_.ordinal()])
          {
!             case 1:
                  if ((p_178603_1_ >> 8 & 15) == 0)
                  {
                      return -1;
***************
*** 140,146 ****
  
                  return p_178603_1_ - field_178615_c;
  
!             case UP:
                  if ((p_178603_1_ >> 8 & 15) == 15)
                  {
                      return -1;
--- 141,147 ----
  
                  return p_178603_1_ - field_178615_c;
  
!             case 2:
                  if ((p_178603_1_ >> 8 & 15) == 15)
                  {
                      return -1;
***************
*** 148,154 ****
  
                  return p_178603_1_ + field_178615_c;
  
!             case NORTH:
                  if ((p_178603_1_ >> 4 & 15) == 0)
                  {
                      return -1;
--- 149,155 ----
  
                  return p_178603_1_ + field_178615_c;
  
!             case 3:
                  if ((p_178603_1_ >> 4 & 15) == 0)
                  {
                      return -1;
***************
*** 156,162 ****
  
                  return p_178603_1_ - field_178614_b;
  
!             case SOUTH:
                  if ((p_178603_1_ >> 4 & 15) == 15)
                  {
                      return -1;
--- 157,163 ----
  
                  return p_178603_1_ - field_178614_b;
  
!             case 4:
                  if ((p_178603_1_ >> 4 & 15) == 15)
                  {
                      return -1;
***************
*** 164,170 ****
  
                  return p_178603_1_ + field_178614_b;
  
!             case WEST:
                  if ((p_178603_1_ >> 0 & 15) == 0)
                  {
                      return -1;
--- 165,171 ----
  
                  return p_178603_1_ + field_178614_b;
  
!             case 5:
                  if ((p_178603_1_ >> 0 & 15) == 0)
                  {
                      return -1;
***************
*** 172,178 ****
  
                  return p_178603_1_ - field_178616_a;
  
!             case EAST:
                  if ((p_178603_1_ >> 0 & 15) == 15)
                  {
                      return -1;
--- 173,179 ----
  
                  return p_178603_1_ - field_178616_a;
  
!             case 6:
                  if ((p_178603_1_ >> 0 & 15) == 15)
                  {
                      return -1;
***************
*** 187,208 ****
  
      static
      {
          int i = 0;
-         int j = 15;
-         int k = 0;
  
!         for (int l = 0; l < 16; ++l)
          {
!             for (int i1 = 0; i1 < 16; ++i1)
              {
!                 for (int j1 = 0; j1 < 16; ++j1)
                  {
!                     if (l == 0 || l == 15 || i1 == 0 || i1 == 15 || j1 == 0 || j1 == 15)
                      {
!                         field_178613_e[k++] = getIndex(l, i1, j1);
                      }
                  }
              }
          }
      }
  }
--- 188,272 ----
  
      static
      {
+         boolean flag = false;
+         boolean flag1 = true;
          int i = 0;
  
!         for (int j = 0; j < 16; ++j)
          {
!             for (int k = 0; k < 16; ++k)
              {
!                 for (int l = 0; l < 16; ++l)
                  {
!                     if (j == 0 || j == 15 || k == 0 || k == 15 || l == 0 || l == 15)
                      {
!                         field_178613_e[i++] = getIndex(j, k, l);
                      }
                  }
              }
          }
      }
+ 
+     static final class VisGraph$1
+     {
+         static final int[] field_178617_a = new int[EnumFacing.values().length];
+         private static final String __OBFID = "CL_00002449";
+ 
+         static
+         {
+             try
+             {
+                 field_178617_a[EnumFacing.DOWN.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var6)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178617_a[EnumFacing.UP.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var5)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178617_a[EnumFacing.NORTH.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178617_a[EnumFacing.SOUTH.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178617_a[EnumFacing.WEST.ordinal()] = 5;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178617_a[EnumFacing.EAST.ordinal()] = 6;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/renderer/culling/ClippingHelper.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/culling/ClippingHelper.java
*** ./client/renderer/culling/ClippingHelper.java	2021-04-03 11:27:27.795429000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/culling/ClippingHelper.java	2019-05-30 22:29:18.258187000 -0700
***************
*** 6,15 ****
      public float[] projectionMatrix = new float[16];
      public float[] modelviewMatrix = new float[16];
      public float[] clippingMatrix = new float[16];
  
!     private double dot(float[] p_178624_1_, double p_178624_2_, double p_178624_4_, double p_178624_6_)
      {
!         return (double)p_178624_1_[0] * p_178624_2_ + (double)p_178624_1_[1] * p_178624_4_ + (double)p_178624_1_[2] * p_178624_6_ + (double)p_178624_1_[3];
      }
  
      /**
--- 6,16 ----
      public float[] projectionMatrix = new float[16];
      public float[] modelviewMatrix = new float[16];
      public float[] clippingMatrix = new float[16];
+     private static final String __OBFID = "CL_00000977";
  
!     private float dot(float[] p_dot_1_, float p_dot_2_, float p_dot_3_, float p_dot_4_)
      {
!         return p_dot_1_[0] * p_dot_2_ + p_dot_1_[1] * p_dot_3_ + p_dot_1_[2] * p_dot_4_ + p_dot_1_[3];
      }
  
      /**
***************
*** 17,27 ****
       */
      public boolean isBoxInFrustum(double p_78553_1_, double p_78553_3_, double p_78553_5_, double p_78553_7_, double p_78553_9_, double p_78553_11_)
      {
          for (int i = 0; i < 6; ++i)
          {
              float[] afloat = this.frustum[i];
  
!             if (this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_11_) <= 0.0D)
              {
                  return false;
              }
--- 18,35 ----
       */
      public boolean isBoxInFrustum(double p_78553_1_, double p_78553_3_, double p_78553_5_, double p_78553_7_, double p_78553_9_, double p_78553_11_)
      {
+         float f = (float)p_78553_1_;
+         float f1 = (float)p_78553_3_;
+         float f2 = (float)p_78553_5_;
+         float f3 = (float)p_78553_7_;
+         float f4 = (float)p_78553_9_;
+         float f5 = (float)p_78553_11_;
+ 
          for (int i = 0; i < 6; ++i)
          {
              float[] afloat = this.frustum[i];
  
!             if (this.dot(afloat, f, f1, f2) <= 0.0F && this.dot(afloat, f3, f1, f2) <= 0.0F && this.dot(afloat, f, f4, f2) <= 0.0F && this.dot(afloat, f3, f4, f2) <= 0.0F && this.dot(afloat, f, f1, f5) <= 0.0F && this.dot(afloat, f3, f1, f5) <= 0.0F && this.dot(afloat, f, f4, f5) <= 0.0F && this.dot(afloat, f3, f4, f5) <= 0.0F)
              {
                  return false;
              }
diff -rc ./client/renderer/entity/layers/LayerArmorBase.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerArmorBase.java
*** ./client/renderer/entity/layers/LayerArmorBase.java	2021-04-03 11:27:28.352181000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerArmorBase.java	2020-12-15 17:16:45.896180000 -0800
***************
*** 1,29 ****
  package net.minecraft.client.renderer.entity.layers;
  
  import com.google.common.collect.Maps;
  import java.util.Map;
  import net.minecraft.client.model.ModelBase;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RendererLivingEntity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.item.ItemArmor;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.ResourceLocation;
  
  public abstract class LayerArmorBase<T extends ModelBase> implements LayerRenderer<EntityLivingBase>
  {
      protected static final ResourceLocation ENCHANTED_ITEM_GLINT_RES = new ResourceLocation("textures/misc/enchanted_item_glint.png");
!     protected T field_177189_c;
!     protected T field_177186_d;
!     private final RendererLivingEntity<?> renderer;
      private float alpha = 1.0F;
      private float colorR = 1.0F;
      private float colorG = 1.0F;
      private float colorB = 1.0F;
      private boolean field_177193_i;
!     private static final Map<String, ResourceLocation> ARMOR_TEXTURE_RES_MAP = Maps.<String, ResourceLocation>newHashMap();
  
!     public LayerArmorBase(RendererLivingEntity<?> rendererIn)
      {
          this.renderer = rendererIn;
          this.initArmor();
--- 1,39 ----
  package net.minecraft.client.renderer.entity.layers;
  
  import com.google.common.collect.Maps;
+ 
+ import clientname.mods.ModInstances;
+ 
  import java.util.Map;
  import net.minecraft.client.model.ModelBase;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RendererLivingEntity;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.item.ItemArmor;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
  
  public abstract class LayerArmorBase<T extends ModelBase> implements LayerRenderer<EntityLivingBase>
  {
      protected static final ResourceLocation ENCHANTED_ITEM_GLINT_RES = new ResourceLocation("textures/misc/enchanted_item_glint.png");
!     protected ModelBase field_177189_c;
!     protected ModelBase field_177186_d;
!     private final RendererLivingEntity renderer;
      private float alpha = 1.0F;
      private float colorR = 1.0F;
      private float colorG = 1.0F;
      private float colorB = 1.0F;
      private boolean field_177193_i;
!     private static final Map ARMOR_TEXTURE_RES_MAP = Maps.newHashMap();
!     private static final String __OBFID = "CL_00002428";
  
!     public LayerArmorBase(RendererLivingEntity rendererIn)
      {
          this.renderer = rendererIn;
          this.initArmor();
***************
*** 49,84 ****
          if (itemstack != null && itemstack.getItem() instanceof ItemArmor)
          {
              ItemArmor itemarmor = (ItemArmor)itemstack.getItem();
!             T t = this.func_177175_a(armorSlot);
!             t.setModelAttributes(this.renderer.getMainModel());
!             t.setLivingAnimations(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_4_);
!             this.func_177179_a(t, armorSlot);
              boolean flag = this.isSlotForLeggings(armorSlot);
-             this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
  
!             switch (itemarmor.getArmorMaterial())
              {
!                 case LEATHER:
                      int i = itemarmor.getColor(itemstack);
                      float f = (float)(i >> 16 & 255) / 255.0F;
                      float f1 = (float)(i >> 8 & 255) / 255.0F;
                      float f2 = (float)(i & 255) / 255.0F;
                      GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
!                     t.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
!                     this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
  
!                 case CHAIN:
!                 case IRON:
!                 case GOLD:
!                 case DIAMOND:
!                     GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
!                     t.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
! 
!                 default:
!                     if (!this.field_177193_i && itemstack.isItemEnchanted())
                      {
!                         this.func_177183_a(entitylivingbaseIn, t, p_177182_2_, p_177182_3_, p_177182_4_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
                      }
              }
          }
      }
--- 59,143 ----
          if (itemstack != null && itemstack.getItem() instanceof ItemArmor)
          {
              ItemArmor itemarmor = (ItemArmor)itemstack.getItem();
!             ModelBase modelbase = this.func_177175_a(armorSlot);
!             modelbase.setModelAttributes(this.renderer.getMainModel());
!             modelbase.setLivingAnimations(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_4_);
! 
!             if (Reflector.ForgeHooksClient.exists())
!             {
!                 modelbase = this.getArmorModelHook(entitylivingbaseIn, itemstack, armorSlot, modelbase);
!             }
! 
!             this.func_177179_a((T) modelbase, armorSlot);
              boolean flag = this.isSlotForLeggings(armorSlot);
  
!             if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, flag ? 2 : 1, (String)null))
!             {
!                 if (Reflector.ForgeHooksClient_getArmorTexture.exists())
!                 {
!                     this.renderer.bindTexture(this.getArmorResource(entitylivingbaseIn, itemstack, flag ? 2 : 1, (String)null));
!                 }
!                 else
!                 {
!                     this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
!                 }
!             }
! 
!             if (Reflector.ForgeHooksClient_getArmorTexture.exists())
!             {
!                 int j = itemarmor.getColor(itemstack);
! 
!                 if (j != -1)
!                 {
!                     float f3 = (float)(j >> 16 & 255) / 255.0F;
!                     float f4 = (float)(j >> 8 & 255) / 255.0F;
!                     float f5 = (float)(j & 255) / 255.0F;
!                     GlStateManager.color(this.colorR * f3, this.colorG * f4, this.colorB * f5, this.alpha);
!                     modelbase.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
! 
!                     if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, flag ? 2 : 1, "overlay"))
!                     {
!                         this.renderer.bindTexture(this.getArmorResource(entitylivingbaseIn, itemstack, flag ? 2 : 1, "overlay"));
!                     }
!                 }
! 
!                 GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
!                 modelbase.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
! 
!                 if (!this.field_177193_i && itemstack.isItemEnchanted() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entitylivingbaseIn, itemstack, modelbase, p_177182_2_, p_177182_3_, p_177182_4_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_)))
!                 {
!                     this.func_177183_a(entitylivingbaseIn, modelbase, p_177182_2_, p_177182_3_, p_177182_4_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
!                 }
! 
!                 return;
!             }
! 
!             switch (LayerArmorBase.LayerArmorBase$1.field_178747_a[itemarmor.getArmorMaterial().ordinal()])
              {
!                 case 1:
                      int i = itemarmor.getColor(itemstack);
                      float f = (float)(i >> 16 & 255) / 255.0F;
                      float f1 = (float)(i >> 8 & 255) / 255.0F;
                      float f2 = (float)(i & 255) / 255.0F;
                      GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
!                     modelbase.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
  
!                     if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, flag ? 2 : 1, "overlay"))
                      {
!                         this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
                      }
+ 
+                 case 2:
+                 case 3:
+                 case 4:
+                 case 5:
+                     GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
+                     modelbase.render(entitylivingbaseIn, p_177182_2_, p_177182_3_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
+             }
+ 
+             if (!this.field_177193_i && itemstack.isItemEnchanted() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entitylivingbaseIn, itemstack, modelbase, p_177182_2_, p_177182_3_, p_177182_4_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_)))
+             {
+                 this.func_177183_a(entitylivingbaseIn, modelbase, p_177182_2_, p_177182_3_, p_177182_4_, p_177182_5_, p_177182_6_, p_177182_7_, p_177182_8_);
              }
          }
      }
***************
*** 88,96 ****
          return entitylivingbaseIn.getCurrentArmor(armorSlot - 1);
      }
  
!     public T func_177175_a(int p_177175_1_)
      {
!         return (T)(this.isSlotForLeggings(p_177175_1_) ? this.field_177189_c : this.field_177186_d);
      }
  
      private boolean isSlotForLeggings(int armorSlot)
--- 147,155 ----
          return entitylivingbaseIn.getCurrentArmor(armorSlot - 1);
      }
  
!     public ModelBase func_177175_a(int p_177175_1_)
      {
!         return this.isSlotForLeggings(p_177175_1_) ? this.field_177189_c : this.field_177186_d;
      }
  
      private boolean isSlotForLeggings(int armorSlot)
***************
*** 98,136 ****
          return armorSlot == 2;
      }
  
!     private void func_177183_a(EntityLivingBase entitylivingbaseIn, T modelbaseIn, float p_177183_3_, float p_177183_4_, float p_177183_5_, float p_177183_6_, float p_177183_7_, float p_177183_8_, float p_177183_9_)
      {
!         float f = (float)entitylivingbaseIn.ticksExisted + p_177183_5_;
!         this.renderer.bindTexture(ENCHANTED_ITEM_GLINT_RES);
!         GlStateManager.enableBlend();
!         GlStateManager.depthFunc(514);
!         GlStateManager.depthMask(false);
!         float f1 = 0.5F;
!         GlStateManager.color(f1, f1, f1, 1.0F);
! 
!         for (int i = 0; i < 2; ++i)
!         {
!             GlStateManager.disableLighting();
!             GlStateManager.blendFunc(768, 1);
!             float f2 = 0.76F;
!             GlStateManager.color(0.5F * f2, 0.25F * f2, 0.8F * f2, 1.0F);
!             GlStateManager.matrixMode(5890);
!             GlStateManager.loadIdentity();
!             float f3 = 0.33333334F;
!             GlStateManager.scale(f3, f3, f3);
!             GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
!             GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
!             GlStateManager.matrixMode(5888);
!             modelbaseIn.render(entitylivingbaseIn, p_177183_3_, p_177183_4_, p_177183_6_, p_177183_7_, p_177183_8_, p_177183_9_);
!         }
! 
!         GlStateManager.matrixMode(5890);
!         GlStateManager.loadIdentity();
!         GlStateManager.matrixMode(5888);
!         GlStateManager.enableLighting();
!         GlStateManager.depthMask(true);
!         GlStateManager.depthFunc(515);
!         GlStateManager.disableBlend();
      }
  
      private ResourceLocation getArmorResource(ItemArmor p_177181_1_, boolean p_177181_2_)
--- 157,214 ----
          return armorSlot == 2;
      }
  
!     private void func_177183_a(EntityLivingBase entitylivingbaseIn, ModelBase modelbaseIn, float p_177183_3_, float p_177183_4_, float p_177183_5_, float p_177183_6_, float p_177183_7_, float p_177183_8_, float p_177183_9_)
      {
!         if (!Config.isCustomItems() || CustomItems.isUseGlint())
!         {
!             if (!Config.isShaders() || !Shaders.isShadowPass)
!             {
!                 float f = (float)entitylivingbaseIn.ticksExisted + p_177183_5_;
!                 this.renderer.bindTexture(ENCHANTED_ITEM_GLINT_RES);
! 
!                 if (Config.isShaders())
!                 {
!                     ShadersRender.renderEnchantedGlintBegin();
!                 }
! 
!                 GlStateManager.enableBlend();
!                 GlStateManager.depthFunc(514);
!                 GlStateManager.depthMask(false);
!                 float f1 = 0.5F;
!                 GlStateManager.color(f1, f1, f1, 1.0F);
!                 
!                 float[] customGlintColor = ModInstances.getModGlintColor().getColor().getRGBColorComponents(null);
! 
!                 for (int i = 0; i < 2; ++i)
!                 {
!                     GlStateManager.disableLighting();
!                     GlStateManager.blendFunc(768, 1);
!                     float f2 = 0.76F;
!                     GlStateManager.color(customGlintColor[0], customGlintColor[1], customGlintColor[2], 1.0F);
!                     GlStateManager.matrixMode(5890);
!                     GlStateManager.loadIdentity();
!                     float f3 = 0.33333334F;
!                     GlStateManager.scale(f3, f3, f3);
!                     GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
!                     GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
!                     GlStateManager.matrixMode(5888);
!                     modelbaseIn.render(entitylivingbaseIn, p_177183_3_, p_177183_4_, p_177183_6_, p_177183_7_, p_177183_8_, p_177183_9_);
!                 }
! 
!                 GlStateManager.matrixMode(5890);
!                 GlStateManager.loadIdentity();
!                 GlStateManager.matrixMode(5888);
!                 GlStateManager.enableLighting();
!                 GlStateManager.depthMask(true);
!                 GlStateManager.depthFunc(515);
!                 GlStateManager.disableBlend();
! 
!                 if (Config.isShaders())
!                 {
!                     ShadersRender.renderEnchantedGlintEnd();
!                 }
!             }
!         }
      }
  
      private ResourceLocation getArmorResource(ItemArmor p_177181_1_, boolean p_177181_2_)
***************
*** 155,158 ****
--- 233,321 ----
      protected abstract void initArmor();
  
      protected abstract void func_177179_a(T p_177179_1_, int p_177179_2_);
+ 
+     protected ModelBase getArmorModelHook(EntityLivingBase p_getArmorModelHook_1_, ItemStack p_getArmorModelHook_2_, int p_getArmorModelHook_3_, ModelBase p_getArmorModelHook_4_)
+     {
+         return p_getArmorModelHook_4_;
+     }
+ 
+     public ResourceLocation getArmorResource(Entity p_getArmorResource_1_, ItemStack p_getArmorResource_2_, int p_getArmorResource_3_, String p_getArmorResource_4_)
+     {
+         ItemArmor itemarmor = (ItemArmor)p_getArmorResource_2_.getItem();
+         String s = itemarmor.getArmorMaterial().getName();
+         String s1 = "minecraft";
+         int i = s.indexOf(58);
+ 
+         if (i != -1)
+         {
+             s1 = s.substring(0, i);
+             s = s.substring(i + 1);
+         }
+ 
+         String s2 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", new Object[] {s1, s, Integer.valueOf(p_getArmorResource_3_ == 2 ? 2 : 1), p_getArmorResource_4_ == null ? "" : String.format("_%s", new Object[]{p_getArmorResource_4_})});
+         s2 = Reflector.callString(Reflector.ForgeHooksClient_getArmorTexture, new Object[] {p_getArmorResource_1_, p_getArmorResource_2_, s2, Integer.valueOf(p_getArmorResource_3_), p_getArmorResource_4_});
+         ResourceLocation resourcelocation = (ResourceLocation)ARMOR_TEXTURE_RES_MAP.get(s2);
+ 
+         if (resourcelocation == null)
+         {
+             resourcelocation = new ResourceLocation(s2);
+             ARMOR_TEXTURE_RES_MAP.put(s2, resourcelocation);
+         }
+ 
+         return resourcelocation;
+     }
+ 
+     static final class LayerArmorBase$1
+     {
+         static final int[] field_178747_a = new int[ItemArmor.ArmorMaterial.values().length];
+         private static final String __OBFID = "CL_00002427";
+ 
+         static
+         {
+             try
+             {
+                 field_178747_a[ItemArmor.ArmorMaterial.LEATHER.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var5)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178747_a[ItemArmor.ArmorMaterial.CHAIN.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178747_a[ItemArmor.ArmorMaterial.IRON.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178747_a[ItemArmor.ArmorMaterial.GOLD.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178747_a[ItemArmor.ArmorMaterial.DIAMOND.ordinal()] = 5;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/renderer/entity/layers/LayerCape.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerCape.java
*** ./client/renderer/entity/layers/LayerCape.java	2021-04-03 11:27:28.375795000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerCape.java	2019-10-22 21:24:43.387594700 -0700
***************
*** 3,14 ****
--- 3,16 ----
  import net.minecraft.client.entity.AbstractClientPlayer;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RenderPlayer;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.player.EnumPlayerModelParts;
  import net.minecraft.util.MathHelper;
  
  public class LayerCape implements LayerRenderer<AbstractClientPlayer>
  {
      private final RenderPlayer playerRenderer;
+     private static final String __OBFID = "CL_00002425";
  
      public LayerCape(RenderPlayer playerRendererIn)
      {
***************
*** 39,50 ****
--- 41,58 ----
                  f2 = 0.0F;
              }
  
+             if (f2 > 165.0F)
+             {
+                 f2 = 165.0F;
+             }
+ 
              float f4 = entitylivingbaseIn.prevCameraYaw + (entitylivingbaseIn.cameraYaw - entitylivingbaseIn.prevCameraYaw) * partialTicks;
              f1 = f1 + MathHelper.sin((entitylivingbaseIn.prevDistanceWalkedModified + (entitylivingbaseIn.distanceWalkedModified - entitylivingbaseIn.prevDistanceWalkedModified) * partialTicks) * 6.0F) * 32.0F * f4;
  
              if (entitylivingbaseIn.isSneaking())
              {
                  f1 += 25.0F;
+                 GlStateManager.translate(0.0F, 0.142F, -0.0178F);
              }
  
              GlStateManager.rotate(6.0F + f2 / 2.0F + f1, 1.0F, 0.0F, 0.0F);
diff -rc ./client/renderer/entity/layers/LayerEnderDragonEyes.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java
*** ./client/renderer/entity/layers/LayerEnderDragonEyes.java	2021-04-03 11:27:28.416445000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java	2019-10-22 21:25:02.133587500 -0700
***************
*** 3,15 ****
--- 3,19 ----
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.entity.RenderDragon;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.boss.EntityDragon;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerEnderDragonEyes implements LayerRenderer<EntityDragon>
  {
      private static final ResourceLocation TEXTURE = new ResourceLocation("textures/entity/enderdragon/dragon_eyes.png");
      private final RenderDragon dragonRenderer;
+     private static final String __OBFID = "CL_00002419";
  
      public LayerEnderDragonEyes(RenderDragon dragonRendererIn)
      {
***************
*** 24,35 ****
          GlStateManager.blendFunc(1, 1);
          GlStateManager.disableLighting();
          GlStateManager.depthFunc(514);
!         int i = 61680;
!         int j = i % 65536;
!         int k = i / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.dragonRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
          this.dragonRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.disableBlend();
--- 28,45 ----
          GlStateManager.blendFunc(1, 1);
          GlStateManager.disableLighting();
          GlStateManager.depthFunc(514);
!         char c0 = 61680;
!         int i = c0 % 65536;
!         int j = c0 / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)i / 1.0F, (float)j / 1.0F);
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
          this.dragonRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
          this.dragonRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.disableBlend();
diff -rc ./client/renderer/entity/layers/LayerEndermanEyes.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerEndermanEyes.java
*** ./client/renderer/entity/layers/LayerEndermanEyes.java	2021-04-03 11:27:28.424483000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerEndermanEyes.java	2019-10-22 21:25:20.948588000 -0700
***************
*** 3,15 ****
--- 3,19 ----
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.entity.RenderEnderman;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.monster.EntityEnderman;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerEndermanEyes implements LayerRenderer<EntityEnderman>
  {
      private static final ResourceLocation field_177203_a = new ResourceLocation("textures/entity/enderman/enderman_eyes.png");
      private final RenderEnderman endermanRenderer;
+     private static final String __OBFID = "CL_00002418";
  
      public LayerEndermanEyes(RenderEnderman endermanRendererIn)
      {
***************
*** 24,35 ****
          GlStateManager.blendFunc(1, 1);
          GlStateManager.disableLighting();
          GlStateManager.depthMask(!entitylivingbaseIn.isInvisible());
!         int i = 61680;
!         int j = i % 65536;
!         int k = i / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.endermanRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
          this.endermanRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.depthMask(true);
--- 28,45 ----
          GlStateManager.blendFunc(1, 1);
          GlStateManager.disableLighting();
          GlStateManager.depthMask(!entitylivingbaseIn.isInvisible());
!         char c0 = 61680;
!         int i = c0 % 65536;
!         int j = c0 / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)i / 1.0F, (float)j / 1.0F);
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
          this.endermanRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
          this.endermanRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.depthMask(true);
diff -rc ./client/renderer/entity/layers/LayerSheepWool.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerSheepWool.java
*** ./client/renderer/entity/layers/LayerSheepWool.java	2021-04-03 11:27:28.484459000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerSheepWool.java	2019-10-22 21:25:38.046718700 -0700
***************
*** 3,17 ****
--- 3,21 ----
  import net.minecraft.client.model.ModelSheep1;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RenderSheep;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.passive.EntitySheep;
  import net.minecraft.item.EnumDyeColor;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class LayerSheepWool implements LayerRenderer<EntitySheep>
  {
      private static final ResourceLocation TEXTURE = new ResourceLocation("textures/entity/sheep/sheep_fur.png");
      private final RenderSheep sheepRenderer;
      private final ModelSheep1 sheepModel = new ModelSheep1();
+     private static final String __OBFID = "CL_00002413";
  
      public LayerSheepWool(RenderSheep sheepRendererIn)
      {
***************
*** 26,32 ****
  
              if (entitylivingbaseIn.hasCustomName() && "jeb_".equals(entitylivingbaseIn.getCustomNameTag()))
              {
!                 int i1 = 25;
                  int i = entitylivingbaseIn.ticksExisted / 25 + entitylivingbaseIn.getEntityId();
                  int j = EnumDyeColor.values().length;
                  int k = i % j;
--- 30,36 ----
  
              if (entitylivingbaseIn.hasCustomName() && "jeb_".equals(entitylivingbaseIn.getCustomNameTag()))
              {
!                 boolean flag = true;
                  int i = entitylivingbaseIn.ticksExisted / 25 + entitylivingbaseIn.getEntityId();
                  int j = EnumDyeColor.values().length;
                  int k = i % j;
***************
*** 34,44 ****
--- 38,61 ----
                  float f = ((float)(entitylivingbaseIn.ticksExisted % 25) + partialTicks) / 25.0F;
                  float[] afloat1 = EntitySheep.func_175513_a(EnumDyeColor.byMetadata(k));
                  float[] afloat2 = EntitySheep.func_175513_a(EnumDyeColor.byMetadata(l));
+ 
+                 if (Config.isCustomColors())
+                 {
+                     afloat1 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(k), afloat1);
+                     afloat2 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(l), afloat2);
+                 }
+ 
                  GlStateManager.color(afloat1[0] * (1.0F - f) + afloat2[0] * f, afloat1[1] * (1.0F - f) + afloat2[1] * f, afloat1[2] * (1.0F - f) + afloat2[2] * f);
              }
              else
              {
                  float[] afloat = EntitySheep.func_175513_a(entitylivingbaseIn.getFleeceColor());
+ 
+                 if (Config.isCustomColors())
+                 {
+                     afloat = CustomColors.getSheepColors(entitylivingbaseIn.getFleeceColor(), afloat);
+                 }
+ 
                  GlStateManager.color(afloat[0], afloat[1], afloat[2]);
              }
  
***************
*** 52,55 ****
--- 69,73 ----
      {
          return true;
      }
+ 
  }
diff -rc ./client/renderer/entity/layers/LayerSpiderEyes.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerSpiderEyes.java
*** ./client/renderer/entity/layers/LayerSpiderEyes.java	2021-04-03 11:27:28.507420000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerSpiderEyes.java	2019-10-22 21:26:08.147514500 -0700
***************
*** 3,15 ****
--- 3,19 ----
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.entity.RenderSpider;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.monster.EntitySpider;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerSpiderEyes implements LayerRenderer<EntitySpider>
  {
      private static final ResourceLocation SPIDER_EYES = new ResourceLocation("textures/entity/spider_eyes.png");
      private final RenderSpider spiderRenderer;
+     private static final String __OBFID = "CL_00002410";
  
      public LayerSpiderEyes(RenderSpider spiderRendererIn)
      {
***************
*** 32,47 ****
              GlStateManager.depthMask(true);
          }
  
!         int i = 61680;
!         int j = i % 65536;
!         int k = i / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.spiderRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
!         i = entitylivingbaseIn.getBrightnessForRender(partialTicks);
!         j = i % 65536;
!         k = i / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
          this.spiderRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.disableBlend();
          GlStateManager.enableAlpha();
--- 36,57 ----
              GlStateManager.depthMask(true);
          }
  
!         char c0 = 61680;
!         int i = c0 % 65536;
!         int j = c0 / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)i / 1.0F, (float)j / 1.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
          this.spiderRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
!         int k = entitylivingbaseIn.getBrightnessForRender(partialTicks);
!         i = k % 65536;
!         j = k / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)i / 1.0F, (float)j / 1.0F);
          this.spiderRenderer.func_177105_a(entitylivingbaseIn, partialTicks);
          GlStateManager.disableBlend();
          GlStateManager.enableAlpha();
***************
*** 51,54 ****
--- 61,65 ----
      {
          return false;
      }
+ 
  }
diff -rc ./client/renderer/entity/layers/LayerWolfCollar.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerWolfCollar.java
*** ./client/renderer/entity/layers/LayerWolfCollar.java	2021-04-03 11:27:28.527405000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/layers/LayerWolfCollar.java	2019-10-22 21:25:53.196083200 -0700
***************
*** 2,16 ****
--- 2,20 ----
  
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RenderWolf;
+ import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.passive.EntitySheep;
  import net.minecraft.entity.passive.EntityWolf;
  import net.minecraft.item.EnumDyeColor;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class LayerWolfCollar implements LayerRenderer<EntityWolf>
  {
      private static final ResourceLocation WOLF_COLLAR = new ResourceLocation("textures/entity/wolf/wolf_collar.png");
      private final RenderWolf wolfRenderer;
+     private static final String __OBFID = "CL_00002405";
  
      public LayerWolfCollar(RenderWolf wolfRendererIn)
      {
***************
*** 24,29 ****
--- 28,39 ----
              this.wolfRenderer.bindTexture(WOLF_COLLAR);
              EnumDyeColor enumdyecolor = EnumDyeColor.byMetadata(entitylivingbaseIn.getCollarColor().getMetadata());
              float[] afloat = EntitySheep.func_175513_a(enumdyecolor);
+ 
+             if (Config.isCustomColors())
+             {
+                 afloat = CustomColors.getWolfCollarColors(enumdyecolor, afloat);
+             }
+ 
              GlStateManager.color(afloat[0], afloat[1], afloat[2]);
              this.wolfRenderer.getMainModel().render(entitylivingbaseIn, p_177141_2_, p_177141_3_, p_177141_5_, p_177141_6_, p_177141_7_, scale);
          }
diff -rc ./client/renderer/entity/Render.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/Render.java
*** ./client/renderer/entity/Render.java	2021-04-03 11:27:27.838504000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/Render.java	2021-03-28 22:55:42.919679000 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import net.minecraft.block.Block;
  import net.minecraft.client.Minecraft;
+ import net.minecraft.client.entity.AbstractClientPlayer;
  import net.minecraft.client.gui.FontRenderer;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.Tessellator;
***************
*** 18,25 ****
--- 19,32 ----
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.World;
+ import optifine.Config;
+ 
  import org.lwjgl.opengl.GL11;
  
+ import clientname.event.impl.EventNametagRender;
+ import clientname.event.impl.EventTabRenderPlayer;
+ import shadersmod.client.Shaders;
+ 
  public abstract class Render<T extends Entity>
  {
      private static final ResourceLocation shadowTextures = new ResourceLocation("textures/misc/shadow.png");
***************
*** 30,35 ****
--- 37,43 ----
       * Determines the darkness of the object's shadow. Higher value makes a darker shadow.
       */
      protected float shadowOpaque = 1.0F;
+     private static final String __OBFID = "CL_00000992";
  
      protected Render(RenderManager renderManager)
      {
***************
*** 166,219 ****
       */
      private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
      {
!         GlStateManager.enableBlend();
!         GlStateManager.blendFunc(770, 771);
!         this.renderManager.renderEngine.bindTexture(shadowTextures);
!         World world = this.getWorldFromRenderManager();
!         GlStateManager.depthMask(false);
!         float f = this.shadowSize;
! 
!         if (entityIn instanceof EntityLiving)
          {
!             EntityLiving entityliving = (EntityLiving)entityIn;
!             f *= entityliving.getRenderSizeModifier();
  
!             if (entityliving.isChild())
              {
!                 f *= 0.5F;
!             }
!         }
  
!         double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!         double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!         double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!         int i = MathHelper.floor_double(d5 - (double)f);
!         int j = MathHelper.floor_double(d5 + (double)f);
!         int k = MathHelper.floor_double(d0 - (double)f);
!         int l = MathHelper.floor_double(d0);
!         int i1 = MathHelper.floor_double(d1 - (double)f);
!         int j1 = MathHelper.floor_double(d1 + (double)f);
!         double d2 = x - d5;
!         double d3 = y - d0;
!         double d4 = z - d1;
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!         for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
!         {
!             Block block = world.getBlockState(blockpos.down()).getBlock();
  
!             if (block.getRenderType() != -1 && world.getLightFromNeighbors(blockpos) > 3)
              {
!                 this.func_180549_a(block, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
              }
-         }
  
!         tessellator.draw();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.disableBlend();
!         GlStateManager.depthMask(true);
      }
  
      /**
--- 174,230 ----
       */
      private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
      {
!         if (!Config.isShaders() || !Shaders.shouldSkipDefaultShadow)
          {
!             GlStateManager.enableBlend();
!             GlStateManager.blendFunc(770, 771);
!             this.renderManager.renderEngine.bindTexture(shadowTextures);
!             World world = this.getWorldFromRenderManager();
!             GlStateManager.depthMask(false);
!             float f = this.shadowSize;
  
!             if (entityIn instanceof EntityLiving)
              {
!                 EntityLiving entityliving = (EntityLiving)entityIn;
!                 f *= entityliving.getRenderSizeModifier();
  
!                 if (entityliving.isChild())
!                 {
!                     f *= 0.5F;
!                 }
!             }
  
!             double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!             double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!             double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!             int i = MathHelper.floor_double(d5 - (double)f);
!             int j = MathHelper.floor_double(d5 + (double)f);
!             int k = MathHelper.floor_double(d0 - (double)f);
!             int l = MathHelper.floor_double(d0);
!             int i1 = MathHelper.floor_double(d1 - (double)f);
!             int j1 = MathHelper.floor_double(d1 + (double)f);
!             double d2 = x - d5;
!             double d3 = y - d0;
!             double d4 = z - d1;
!             Tessellator tessellator = Tessellator.getInstance();
!             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!             for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
              {
!                 Block block = world.getBlockState(blockpos.down()).getBlock();
! 
!                 if (block.getRenderType() != -1 && world.getLightFromNeighbors(blockpos) > 3)
!                 {
!                     this.func_180549_a(block, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
!                 }
              }
  
!             tessellator.draw();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.disableBlend();
!             GlStateManager.depthMask(true);
!         }
      }
  
      /**
***************
*** 354,379 ****
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
              Tessellator tessellator = Tessellator.getInstance();
              WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             int i = 0;
  
              if (str.equals("deadmau5"))
              {
!                 i = -10;
              }
  
!             int j = fontrenderer.getStringWidth(str) / 2;
              GlStateManager.disableTexture2D();
              worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!             worldrenderer.pos((double)(-j - 1), (double)(-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(-j - 1), (double)(8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(j + 1), (double)(8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(j + 1), (double)(-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
              tessellator.draw();
              GlStateManager.enableTexture2D();
!             fontrenderer.drawString(str, -fontrenderer.getStringWidth(str) / 2, i, 553648127);
              GlStateManager.enableDepth();
              GlStateManager.depthMask(true);
!             fontrenderer.drawString(str, -fontrenderer.getStringWidth(str) / 2, i, -1);
              GlStateManager.enableLighting();
              GlStateManager.disableBlend();
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
--- 365,398 ----
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
              Tessellator tessellator = Tessellator.getInstance();
              WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             byte b0 = 0;
  
              if (str.equals("deadmau5"))
              {
!                 b0 = -10;
              }
  
!             int i = fontrenderer.getStringWidth(str) / 2;
              GlStateManager.disableTexture2D();
              worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!             worldrenderer.pos((double)(-i - 1), (double)(-1 + b0), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(-i - 1), (double)(8 + b0), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(i + 1), (double)(8 + b0), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!             worldrenderer.pos((double)(i + 1), (double)(-1 + b0), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
              tessellator.draw();
              GlStateManager.enableTexture2D();
!             
!             //client stuff
!             if(entityIn instanceof AbstractClientPlayer) {
!             	new EventNametagRender((AbstractClientPlayer)entityIn).call();
!             }
!             
!             
!             
!             fontrenderer.drawString(str, -fontrenderer.getStringWidth(str) / 2, b0, 553648127);
              GlStateManager.enableDepth();
              GlStateManager.depthMask(true);
!             fontrenderer.drawString(str, -fontrenderer.getStringWidth(str) / 2, b0, -1);
              GlStateManager.enableLighting();
              GlStateManager.disableBlend();
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
diff -rc ./client/renderer/entity/RenderDragon.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderDragon.java
*** ./client/renderer/entity/RenderDragon.java	2021-04-03 11:27:27.946486000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderDragon.java	2019-05-30 22:29:18.410100000 -0700
***************
*** 8,13 ****
--- 8,14 ----
  import net.minecraft.client.renderer.entity.layers.LayerEnderDragonDeath;
  import net.minecraft.client.renderer.entity.layers.LayerEnderDragonEyes;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.boss.BossStatus;
  import net.minecraft.entity.boss.EntityDragon;
  import net.minecraft.util.MathHelper;
diff -rc ./client/renderer/entity/RenderEnderman.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderEnderman.java
*** ./client/renderer/entity/RenderEnderman.java	2021-04-03 11:27:27.954486000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderEnderman.java	2019-05-30 22:29:18.419094000 -0700
***************
*** 5,10 ****
--- 5,11 ----
  import net.minecraft.client.model.ModelEnderman;
  import net.minecraft.client.renderer.entity.layers.LayerEndermanEyes;
  import net.minecraft.client.renderer.entity.layers.LayerHeldBlock;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.monster.EntityEnderman;
  import net.minecraft.util.ResourceLocation;
  
diff -rc ./client/renderer/entity/RendererLivingEntity.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RendererLivingEntity.java
*** ./client/renderer/entity/RendererLivingEntity.java	2021-04-03 11:27:27.988539000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RendererLivingEntity.java	2019-05-30 22:29:18.463069000 -0700
***************
*** 15,20 ****
--- 15,21 ----
  import net.minecraft.client.renderer.entity.layers.LayerRenderer;
  import net.minecraft.client.renderer.texture.DynamicTexture;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.player.EntityPlayer;
  import net.minecraft.entity.player.EnumPlayerModelParts;
***************
*** 22,30 ****
--- 23,35 ----
  import net.minecraft.scoreboard.Team;
  import net.minecraft.util.EnumChatFormatting;
  import net.minecraft.util.MathHelper;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.Shaders;
  
  public abstract class RendererLivingEntity<T extends EntityLivingBase> extends Render<T>
  {
***************
*** 32,39 ****
      private static final DynamicTexture field_177096_e = new DynamicTexture(16, 16);
      protected ModelBase mainModel;
      protected FloatBuffer brightnessBuffer = GLAllocation.createDirectFloatBuffer(4);
!     protected List<LayerRenderer<T>> layerRenderers = Lists.<LayerRenderer<T>>newArrayList();
      protected boolean renderOutlines = false;
  
      public RendererLivingEntity(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
      {
--- 37,47 ----
      private static final DynamicTexture field_177096_e = new DynamicTexture(16, 16);
      protected ModelBase mainModel;
      protected FloatBuffer brightnessBuffer = GLAllocation.createDirectFloatBuffer(4);
!     protected List<LayerRenderer<T>> layerRenderers = Lists.newArrayList();
      protected boolean renderOutlines = false;
+     private static final String __OBFID = "CL_00001012";
+     public static float NAME_TAG_RANGE = 64.0F;
+     public static float NAME_TAG_RANGE_SNEAK = 32.0F;
  
      public RendererLivingEntity(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
      {
***************
*** 42,48 ****
          this.shadowSize = shadowSizeIn;
      }
  
!     protected <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
      {
          return this.layerRenderers.add((LayerRenderer<T>)layer);
      }
--- 50,56 ----
          this.shadowSize = shadowSizeIn;
      }
  
!     public <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
      {
          return this.layerRenderers.add((LayerRenderer<T>)layer);
      }
***************
*** 91,207 ****
       */
      public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         GlStateManager.pushMatrix();
!         GlStateManager.disableCull();
!         this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
!         this.mainModel.isRiding = entity.isRiding();
!         this.mainModel.isChild = entity.isChild();
! 
!         try
!         {
!             float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
!             float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
!             float f2 = f1 - f;
! 
!             if (entity.isRiding() && entity.ridingEntity instanceof EntityLivingBase)
!             {
!                 EntityLivingBase entitylivingbase = (EntityLivingBase)entity.ridingEntity;
!                 f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
!                 f2 = f1 - f;
!                 float f3 = MathHelper.wrapAngleTo180_float(f2);
  
!                 if (f3 < -85.0F)
                  {
!                     f3 = -85.0F;
                  }
  
!                 if (f3 >= 85.0F)
                  {
!                     f3 = 85.0F;
                  }
  
!                 f = f1 - f3;
! 
!                 if (f3 * f3 > 2500.0F)
                  {
!                     f += f3 * 0.2F;
                  }
-             }
  
!             float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
!             this.renderLivingAt(entity, x, y, z);
!             float f8 = this.handleRotationFloat(entity, partialTicks);
!             this.rotateCorpse(entity, f8, f, partialTicks);
!             GlStateManager.enableRescaleNormal();
!             GlStateManager.scale(-1.0F, -1.0F, 1.0F);
!             this.preRenderCallback(entity, partialTicks);
!             float f4 = 0.0625F;
!             GlStateManager.translate(0.0F, -1.5078125F, 0.0F);
!             float f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
!             float f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
  
!             if (entity.isChild())
!             {
!                 f6 *= 3.0F;
!             }
  
!             if (f5 > 1.0F)
!             {
!                 f5 = 1.0F;
!             }
  
!             GlStateManager.enableAlpha();
!             this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
!             this.mainModel.setRotationAngles(f6, f5, f8, f2, f7, 0.0625F, entity);
  
!             if (this.renderOutlines)
!             {
!                 boolean flag1 = this.setScoreTeamColor(entity);
!                 this.renderModel(entity, f6, f5, f8, f2, f7, 0.0625F);
  
!                 if (flag1)
!                 {
!                     this.unsetScoreTeamColor();
                  }
              }
!             else
              {
!                 boolean flag = this.setDoRenderBrightness(entity, partialTicks);
!                 this.renderModel(entity, f6, f5, f8, f2, f7, 0.0625F);
! 
!                 if (flag)
!                 {
!                     this.unsetBrightness();
!                 }
! 
!                 GlStateManager.depthMask(true);
! 
!                 if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                 {
!                     this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, 0.0625F);
!                 }
              }
  
!             GlStateManager.disableRescaleNormal();
!         }
!         catch (Exception exception)
!         {
!             logger.error((String)"Couldn\'t render entity", (Throwable)exception);
!         }
  
!         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
!         GlStateManager.enableTexture2D();
!         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
!         GlStateManager.enableCull();
!         GlStateManager.popMatrix();
  
!         if (!this.renderOutlines)
!         {
!             super.doRender(entity, x, y, z, entityYaw, partialTicks);
          }
      }
  
!     protected boolean setScoreTeamColor(T entityLivingBaseIn)
      {
          int i = 16777215;
  
--- 99,229 ----
       */
      public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         if (!Reflector.RenderLivingEvent_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Pre_Constructor, new Object[] {entity, this, Double.valueOf(x), Double.valueOf(y), Double.valueOf(z)}))
!         {
!             GlStateManager.pushMatrix();
!             GlStateManager.disableCull();
!             this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
!             this.mainModel.isRiding = entity.isRiding();
! 
!             if (Reflector.ForgeEntity_shouldRiderSit.exists())
!             {
!                 this.mainModel.isRiding = entity.isRiding() && entity.ridingEntity != null && Reflector.callBoolean(entity.ridingEntity, Reflector.ForgeEntity_shouldRiderSit, new Object[0]);
!             }
! 
!             this.mainModel.isChild = entity.isChild();
  
!             try
!             {
!                 float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
!                 float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
!                 float f2 = f1 - f;
! 
!                 if (this.mainModel.isRiding && entity.ridingEntity instanceof EntityLivingBase)
                  {
!                     EntityLivingBase entitylivingbase = (EntityLivingBase)entity.ridingEntity;
!                     f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
!                     f2 = f1 - f;
!                     float f3 = MathHelper.wrapAngleTo180_float(f2);
! 
!                     if (f3 < -85.0F)
!                     {
!                         f3 = -85.0F;
!                     }
! 
!                     if (f3 >= 85.0F)
!                     {
!                         f3 = 85.0F;
!                     }
! 
!                     f = f1 - f3;
! 
!                     if (f3 * f3 > 2500.0F)
!                     {
!                         f += f3 * 0.2F;
!                     }
                  }
  
!                 float f8 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
!                 this.renderLivingAt(entity, x, y, z);
!                 float f7 = this.handleRotationFloat(entity, partialTicks);
!                 this.rotateCorpse(entity, f7, f, partialTicks);
!                 GlStateManager.enableRescaleNormal();
!                 GlStateManager.scale(-1.0F, -1.0F, 1.0F);
!                 this.preRenderCallback(entity, partialTicks);
!                 float f4 = 0.0625F;
!                 GlStateManager.translate(0.0F, -1.5078125F, 0.0F);
!                 float f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
!                 float f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
! 
!                 if (entity.isChild())
                  {
!                     f6 *= 3.0F;
                  }
  
!                 if (f5 > 1.0F)
                  {
!                     f5 = 1.0F;
                  }
  
!                 GlStateManager.enableAlpha();
!                 this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
!                 this.mainModel.setRotationAngles(f6, f5, f7, f2, f8, 0.0625F, entity);
  
!                 if (this.renderOutlines)
!                 {
!                     boolean flag1 = this.setScoreTeamColor(entity);
!                     this.renderModel(entity, f6, f5, f7, f2, f8, 0.0625F);
  
!                     if (flag1)
!                     {
!                         this.unsetScoreTeamColor();
!                     }
!                 }
!                 else
!                 {
!                     boolean flag = this.setDoRenderBrightness(entity, partialTicks);
!                     this.renderModel(entity, f6, f5, f7, f2, f8, 0.0625F);
  
!                     if (flag)
!                     {
!                         this.unsetBrightness();
!                     }
  
!                     GlStateManager.depthMask(true);
  
!                     if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                     {
!                         this.renderLayers(entity, f6, f5, partialTicks, f7, f2, f8, 0.0625F);
!                     }
                  }
+ 
+                 GlStateManager.disableRescaleNormal();
              }
!             catch (Exception exception)
              {
!                 logger.error((String)"Couldn\'t render entity", (Throwable)exception);
              }
  
!             GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
!             GlStateManager.enableTexture2D();
!             GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
!             GlStateManager.enableCull();
!             GlStateManager.popMatrix();
  
!             if (!this.renderOutlines)
!             {
!                 super.doRender(entity, x, y, z, entityYaw, partialTicks);
!             }
  
!             if (!Reflector.RenderLivingEvent_Post_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Post_Constructor, new Object[] {entity, this, Double.valueOf(x), Double.valueOf(y), Double.valueOf(z)}))
!             {
!                 ;
!             }
          }
      }
  
!     protected boolean setScoreTeamColor(EntityLivingBase entityLivingBaseIn)
      {
          int i = 16777215;
  
***************
*** 334,339 ****
--- 356,366 ----
                  this.brightnessBuffer.put(0.0F);
                  this.brightnessBuffer.put(0.0F);
                  this.brightnessBuffer.put(0.3F);
+ 
+                 if (Config.isShaders())
+                 {
+                     Shaders.setEntityColor(1.0F, 0.0F, 0.0F, 0.3F);
+                 }
              }
              else
              {
***************
*** 345,350 ****
--- 372,382 ----
                  this.brightnessBuffer.put(f3);
                  this.brightnessBuffer.put(f4);
                  this.brightnessBuffer.put(1.0F - f1);
+ 
+                 if (Config.isShaders())
+                 {
+                     Shaders.setEntityColor(f2, f3, f4, 1.0F - f1);
+                 }
              }
  
              this.brightnessBuffer.flip();
***************
*** 405,410 ****
--- 437,447 ----
          GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, OpenGlHelper.GL_OPERAND0_ALPHA, GL11.GL_SRC_ALPHA);
          GL11.glTexEnvi(GL11.GL_TEXTURE_ENV, OpenGlHelper.GL_SOURCE0_ALPHA, GL11.GL_TEXTURE);
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.setEntityColor(0.0F, 0.0F, 0.0F, 0.0F);
+         }
      }
  
      /**
***************
*** 496,549 ****
  
      public void renderName(T entity, double x, double y, double z)
      {
!         if (this.canRenderName(entity))
          {
!             double d0 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer);
!             float f = entity.isSneaking() ? 32.0F : 64.0F;
! 
!             if (d0 < (double)(f * f))
              {
!                 String s = entity.getDisplayName().getFormattedText();
!                 float f1 = 0.02666667F;
!                 GlStateManager.alphaFunc(516, 0.1F);
  
!                 if (entity.isSneaking())
!                 {
!                     FontRenderer fontrenderer = this.getFontRendererFromRenderManager();
!                     GlStateManager.pushMatrix();
!                     GlStateManager.translate((float)x, (float)y + entity.height + 0.5F - (entity.isChild() ? entity.height / 2.0F : 0.0F), (float)z);
!                     GL11.glNormal3f(0.0F, 1.0F, 0.0F);
!                     GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
!                     GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!                     GlStateManager.scale(-0.02666667F, -0.02666667F, 0.02666667F);
!                     GlStateManager.translate(0.0F, 9.374999F, 0.0F);
!                     GlStateManager.disableLighting();
!                     GlStateManager.depthMask(false);
!                     GlStateManager.enableBlend();
!                     GlStateManager.disableTexture2D();
!                     GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!                     int i = fontrenderer.getStringWidth(s) / 2;
!                     Tessellator tessellator = Tessellator.getInstance();
!                     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!                     worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                     worldrenderer.pos((double)(-i - 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                     worldrenderer.pos((double)(-i - 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                     worldrenderer.pos((double)(i + 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                     worldrenderer.pos((double)(i + 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                     tessellator.draw();
!                     GlStateManager.enableTexture2D();
!                     GlStateManager.depthMask(true);
!                     fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, 0, 553648127);
!                     GlStateManager.enableLighting();
!                     GlStateManager.disableBlend();
!                     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!                     GlStateManager.popMatrix();
!                 }
!                 else
                  {
!                     this.renderOffsetLivingLabel(entity, x, y - (entity.isChild() ? (double)(entity.height / 2.0F) : 0.0D), z, s, 0.02666667F, d0);
                  }
              }
          }
      }
  
--- 533,594 ----
  
      public void renderName(T entity, double x, double y, double z)
      {
!         if (!Reflector.RenderLivingEvent_Specials_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Pre_Constructor, new Object[] {entity, this, Double.valueOf(x), Double.valueOf(y), Double.valueOf(z)}))
          {
!             if (this.canRenderName(entity))
              {
!                 double d0 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer);
!                 float f = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE;
  
!                 if (d0 < (double)(f * f))
                  {
!                     String s = entity.getDisplayName().getFormattedText();
!                     float f1 = 0.02666667F;
!                     GlStateManager.alphaFunc(516, 0.1F);
! 
!                     if (entity.isSneaking())
!                     {
!                         FontRenderer fontrenderer = this.getFontRendererFromRenderManager();
!                         GlStateManager.pushMatrix();
!                         GlStateManager.translate((float)x, (float)y + entity.height + 0.5F - (entity.isChild() ? entity.height / 2.0F : 0.0F), (float)z);
!                         GL11.glNormal3f(0.0F, 1.0F, 0.0F);
!                         GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
!                         GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!                         GlStateManager.scale(-0.02666667F, -0.02666667F, 0.02666667F);
!                         GlStateManager.translate(0.0F, 9.374999F, 0.0F);
!                         GlStateManager.disableLighting();
!                         GlStateManager.depthMask(false);
!                         GlStateManager.enableBlend();
!                         GlStateManager.disableTexture2D();
!                         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!                         int i = fontrenderer.getStringWidth(s) / 2;
!                         Tessellator tessellator = Tessellator.getInstance();
!                         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!                         worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                         worldrenderer.pos((double)(-i - 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                         worldrenderer.pos((double)(-i - 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                         worldrenderer.pos((double)(i + 1), 8.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                         worldrenderer.pos((double)(i + 1), -1.0D, 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
!                         tessellator.draw();
!                         GlStateManager.enableTexture2D();
!                         GlStateManager.depthMask(true);
!                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, 0, 553648127);
!                         GlStateManager.enableLighting();
!                         GlStateManager.disableBlend();
!                         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!                         GlStateManager.popMatrix();
!                     }
!                     else
!                     {
!                         this.renderOffsetLivingLabel(entity, x, y - (entity.isChild() ? (double)(entity.height / 2.0F) : 0.0D), z, s, 0.02666667F, d0);
!                     }
                  }
              }
+ 
+             if (!Reflector.RenderLivingEvent_Specials_Post_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Post_Constructor, new Object[] {entity, this, Double.valueOf(x), Double.valueOf(y), Double.valueOf(z)}))
+             {
+                 ;
+             }
          }
      }
  
***************
*** 560,577 ****
              {
                  Team.EnumVisible team$enumvisible = team.getNameTagVisibility();
  
!                 switch (team$enumvisible)
                  {
!                     case ALWAYS:
                          return true;
  
!                     case NEVER:
                          return false;
  
!                     case HIDE_FOR_OTHER_TEAMS:
                          return team1 == null || team.isSameTeam(team1);
  
!                     case HIDE_FOR_OWN_TEAM:
                          return team1 == null || !team.isSameTeam(team1);
  
                      default:
--- 605,622 ----
              {
                  Team.EnumVisible team$enumvisible = team.getNameTagVisibility();
  
!                 switch (RendererLivingEntity.RendererLivingEntity$1.field_178679_a[team$enumvisible.ordinal()])
                  {
!                     case 1:
                          return true;
  
!                     case 2:
                          return false;
  
!                     case 3:
                          return team1 == null || team.isSameTeam(team1);
  
!                     case 4:
                          return team1 == null || !team.isSameTeam(team1);
  
                      default:
***************
*** 599,602 ****
--- 644,692 ----
  
          field_177096_e.updateDynamicTexture();
      }
+ 
+     static final class RendererLivingEntity$1
+     {
+         static final int[] field_178679_a = new int[Team.EnumVisible.values().length];
+         private static final String __OBFID = "CL_00002435";
+ 
+         static
+         {
+             try
+             {
+                 field_178679_a[Team.EnumVisible.ALWAYS.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178679_a[Team.EnumVisible.NEVER.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178679_a[Team.EnumVisible.HIDE_FOR_OTHER_TEAMS.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178679_a[Team.EnumVisible.HIDE_FOR_OWN_TEAM.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/renderer/entity/RenderGuardian.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderGuardian.java
*** ./client/renderer/entity/RenderGuardian.java	2021-04-03 11:27:28.041391000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderGuardian.java	2019-05-30 22:29:18.531030000 -0700
***************
*** 7,12 ****
--- 7,13 ----
  import net.minecraft.client.renderer.WorldRenderer;
  import net.minecraft.client.renderer.culling.ICamera;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.monster.EntityGuardian;
  import net.minecraft.util.AxisAlignedBB;
diff -rc ./client/renderer/entity/RenderItem.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderItem.java
*** ./client/renderer/entity/RenderItem.java	2021-04-03 11:27:28.071419000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderItem.java	2020-12-15 17:12:19.343687400 -0800
***************
*** 2,7 ****
--- 2,9 ----
  
  import java.util.List;
  import java.util.concurrent.Callable;
+ 
+ import clientname.mods.ModInstances;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockDirt;
  import net.minecraft.block.BlockDoublePlant;
***************
*** 54,62 ****
--- 56,71 ----
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.EnumChatFormatting;
  import net.minecraft.util.EnumFacing;
+ import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.Vec3i;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
  
  public class RenderItem implements IResourceManagerReloadListener
  {
***************
*** 67,77 ****
      public float zLevel;
      private final ItemModelMesher itemModelMesher;
      private final TextureManager textureManager;
  
      public RenderItem(TextureManager textureManager, ModelManager modelManager)
      {
          this.textureManager = textureManager;
!         this.itemModelMesher = new ItemModelMesher(modelManager);
          this.registerItems();
      }
  
--- 76,100 ----
      public float zLevel;
      private final ItemModelMesher itemModelMesher;
      private final TextureManager textureManager;
+     private static final String __OBFID = "CL_00001003";
+     private ModelResourceLocation modelLocation = null;
+     private boolean renderItemGui = false;
+     public ModelManager modelManager = null;
  
      public RenderItem(TextureManager textureManager, ModelManager modelManager)
      {
          this.textureManager = textureManager;
!         this.modelManager = modelManager;
! 
!         if (Reflector.ItemModelMesherForge_Constructor.exists())
!         {
!             this.itemModelMesher = (ItemModelMesher)Reflector.newInstance(Reflector.ItemModelMesherForge_Constructor, new Object[] {modelManager});
!         }
!         else
!         {
!             this.itemModelMesher = new ItemModelMesher(modelManager);
!         }
! 
          this.registerItems();
      }
  
***************
*** 110,116 ****
          this.renderModel(model, -1, stack);
      }
  
!     private void renderModel(IBakedModel model, int color)
      {
          this.renderModel(model, color, (ItemStack)null);
      }
--- 133,139 ----
          this.renderModel(model, -1, stack);
      }
  
!     public void renderModel(IBakedModel model, int color)
      {
          this.renderModel(model, color, (ItemStack)null);
      }
***************
*** 119,133 ****
      {
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
          worldrenderer.begin(7, DefaultVertexFormats.ITEM);
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              this.renderQuads(worldrenderer, model.getFaceQuads(enumfacing), color, stack);
          }
  
          this.renderQuads(worldrenderer, model.getGeneralQuads(), color, stack);
          tessellator.draw();
      }
  
      public void renderItem(ItemStack stack, IBakedModel model)
--- 142,170 ----
      {
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
+         boolean flag = Minecraft.getMinecraft().getTextureMapBlocks().isTextureBound();
+         boolean flag1 = Config.isMultiTexture() && flag;
+ 
+         if (flag1)
+         {
+             worldrenderer.setBlockLayer(EnumWorldBlockLayer.SOLID);
+         }
+ 
          worldrenderer.begin(7, DefaultVertexFormats.ITEM);
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              this.renderQuads(worldrenderer, model.getFaceQuads(enumfacing), color, stack);
          }
  
          this.renderQuads(worldrenderer, model.getGeneralQuads(), color, stack);
          tessellator.draw();
+ 
+         if (flag1)
+         {
+             worldrenderer.setBlockLayer((EnumWorldBlockLayer)null);
+             GlStateManager.bindCurrentTexture();
+         }
      }
  
      public void renderItem(ItemStack stack, IBakedModel model)
***************
*** 147,156 ****
              }
              else
              {
                  GlStateManager.translate(-0.5F, -0.5F, -0.5F);
                  this.renderModel(model, stack);
  
!                 if (stack.hasEffect())
                  {
                      this.renderEffect(model);
                  }
--- 184,198 ----
              }
              else
              {
+                 if (Config.isCustomItems())
+                 {
+                     model = CustomItems.getCustomItemModel(stack, model, this.modelLocation);
+                 }
+ 
                  GlStateManager.translate(-0.5F, -0.5F, -0.5F);
                  this.renderModel(model, stack);
  
!                 if (stack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomEffect(this, stack, model)))
                  {
                      this.renderEffect(model);
                  }
***************
*** 162,193 ****
  
      private void renderEffect(IBakedModel model)
      {
!         GlStateManager.depthMask(false);
!         GlStateManager.depthFunc(514);
!         GlStateManager.disableLighting();
!         GlStateManager.blendFunc(768, 1);
!         this.textureManager.bindTexture(RES_ITEM_GLINT);
!         GlStateManager.matrixMode(5890);
!         GlStateManager.pushMatrix();
!         GlStateManager.scale(8.0F, 8.0F, 8.0F);
!         float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
!         GlStateManager.translate(f, 0.0F, 0.0F);
!         GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
!         this.renderModel(model, -8372020);
!         GlStateManager.popMatrix();
!         GlStateManager.pushMatrix();
!         GlStateManager.scale(8.0F, 8.0F, 8.0F);
!         float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
!         GlStateManager.translate(-f1, 0.0F, 0.0F);
!         GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
!         this.renderModel(model, -8372020);
!         GlStateManager.popMatrix();
!         GlStateManager.matrixMode(5888);
!         GlStateManager.blendFunc(770, 771);
!         GlStateManager.enableLighting();
!         GlStateManager.depthFunc(515);
!         GlStateManager.depthMask(true);
!         this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
      }
  
      private void putQuadNormal(WorldRenderer renderer, BakedQuad quad)
--- 204,254 ----
  
      private void renderEffect(IBakedModel model)
      {
!         if (!Config.isCustomItems() || CustomItems.isUseGlint())
!         {
!             if (!Config.isShaders() || !Shaders.isShadowPass)
!             {
!                 GlStateManager.depthMask(false);
!                 GlStateManager.depthFunc(514);
!                 GlStateManager.disableLighting();
!                 GlStateManager.blendFunc(768, 1);
!                 this.textureManager.bindTexture(RES_ITEM_GLINT);
! 
!                 if (Config.isShaders() && !this.renderItemGui)
!                 {
!                     ShadersRender.renderEnchantedGlintBegin();
!                 }
!                 
!                 int customEnchantmentGlintColor = ModInstances.getModGlintColor().getColor().getRGB();
! 
!                 GlStateManager.matrixMode(5890);
!                 GlStateManager.pushMatrix();
!                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
!                 float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
!                 GlStateManager.translate(f, 0.0F, 0.0F);
!                 GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
!                 this.renderModel(model, customEnchantmentGlintColor);
!                 GlStateManager.popMatrix();
!                 GlStateManager.pushMatrix();
!                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
!                 float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
!                 GlStateManager.translate(-f1, 0.0F, 0.0F);
!                 GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
!                 this.renderModel(model, customEnchantmentGlintColor);
!                 GlStateManager.popMatrix();
!                 GlStateManager.matrixMode(5888);
!                 GlStateManager.blendFunc(770, 771);
!                 GlStateManager.enableLighting();
!                 GlStateManager.depthFunc(515);
!                 GlStateManager.depthMask(true);
!                 this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
! 
!                 if (Config.isShaders() && !this.renderItemGui)
!                 {
!                     ShadersRender.renderEnchantedGlintEnd();
!                 }
!             }
!         }
      }
  
      private void putQuadNormal(WorldRenderer renderer, BakedQuad quad)
***************
*** 198,209 ****
  
      private void renderQuad(WorldRenderer renderer, BakedQuad quad, int color)
      {
!         renderer.addVertexData(quad.getVertexData());
!         renderer.putColor4(color);
          this.putQuadNormal(renderer, quad);
      }
  
!     private void renderQuads(WorldRenderer renderer, List<BakedQuad> quads, int color, ItemStack stack)
      {
          boolean flag = color == -1 && stack != null;
          int i = 0;
--- 259,287 ----
  
      private void renderQuad(WorldRenderer renderer, BakedQuad quad, int color)
      {
!         if (renderer.isMultiTexture())
!         {
!             renderer.addVertexData(quad.getVertexDataSingle());
!             renderer.putSprite(quad.getSprite());
!         }
!         else
!         {
!             renderer.addVertexData(quad.getVertexData());
!         }
! 
!         if (Reflector.IColoredBakedQuad.exists() && Reflector.IColoredBakedQuad.isInstance(quad))
!         {
!             forgeHooksClient_putQuadColor(renderer, quad, color);
!         }
!         else
!         {
!             renderer.putColor4(color);
!         }
! 
          this.putQuadNormal(renderer, quad);
      }
  
!     private void renderQuads(WorldRenderer renderer, List quads, int color, ItemStack stack)
      {
          boolean flag = color == -1 && stack != null;
          int i = 0;
***************
*** 217,222 ****
--- 295,305 ----
              {
                  k = stack.getItem().getColorFromItemStack(stack, bakedquad.getTintIndex());
  
+                 if (Config.isCustomColors())
+                 {
+                     k = CustomColors.getColorFromItemStack(stack, bakedquad.getTintIndex(), k);
+                 }
+ 
                  if (EntityRenderer.anaglyphEnable)
                  {
                      k = TextureUtil.anaglyphColor(k);
***************
*** 295,300 ****
--- 378,389 ----
                          modelresourcelocation = new ModelResourceLocation("bow_pulling_0", "inventory");
                      }
                  }
+                 else if (Reflector.ForgeItem_getModel.exists())
+                 {
+                     modelresourcelocation = (ModelResourceLocation)Reflector.call(item, Reflector.ForgeItem_getModel, new Object[] {stack, entityplayer, Integer.valueOf(entityplayer.getItemInUseCount())});
+                 }
+ 
+                 this.modelLocation = modelresourcelocation;
  
                  if (modelresourcelocation != null)
                  {
***************
*** 303,308 ****
--- 392,398 ----
              }
  
              this.renderItemModelTransform(stack, ibakedmodel, cameraTransformType);
+             this.modelLocation = null;
          }
      }
  
***************
*** 316,327 ****
          GlStateManager.enableBlend();
          GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          GlStateManager.pushMatrix();
-         ItemCameraTransforms itemcameratransforms = model.getItemCameraTransforms();
-         itemcameratransforms.applyTransform(cameraTransformType);
  
!         if (this.func_183005_a(itemcameratransforms.getTransform(cameraTransformType)))
          {
!             GlStateManager.cullFace(1028);
          }
  
          this.renderItem(stack, model);
--- 406,425 ----
          GlStateManager.enableBlend();
          GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          GlStateManager.pushMatrix();
  
!         if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
          {
!             model = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[] {model, cameraTransformType});
!         }
!         else
!         {
!             ItemCameraTransforms itemcameratransforms = model.getItemCameraTransforms();
!             itemcameratransforms.applyTransform(cameraTransformType);
! 
!             if (this.func_183005_a(itemcameratransforms.getTransform(cameraTransformType)))
!             {
!                 GlStateManager.cullFace(1028);
!             }
          }
  
          this.renderItem(stack, model);
***************
*** 340,345 ****
--- 438,444 ----
  
      public void renderItemIntoGUI(ItemStack stack, int x, int y)
      {
+         this.renderItemGui = true;
          IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
          GlStateManager.pushMatrix();
          this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
***************
*** 351,357 ****
          GlStateManager.blendFunc(770, 771);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.setupGuiTransform(x, y, ibakedmodel.isGui3d());
!         ibakedmodel.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
          this.renderItem(stack, ibakedmodel);
          GlStateManager.disableAlpha();
          GlStateManager.disableRescaleNormal();
--- 450,465 ----
          GlStateManager.blendFunc(770, 771);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.setupGuiTransform(x, y, ibakedmodel.isGui3d());
! 
!         if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
!         {
!             ibakedmodel = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[] {ibakedmodel, ItemCameraTransforms.TransformType.GUI});
!         }
!         else
!         {
!             ibakedmodel.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
!         }
! 
          this.renderItem(stack, ibakedmodel);
          GlStateManager.disableAlpha();
          GlStateManager.disableRescaleNormal();
***************
*** 359,364 ****
--- 467,473 ----
          GlStateManager.popMatrix();
          this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
          this.textureManager.getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
+         this.renderItemGui = false;
      }
  
      private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d)
***************
*** 397,425 ****
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering item");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Item being rendered");
!                 crashreportcategory.addCrashSectionCallable("Item Type", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return String.valueOf((Object)stack.getItem());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item Aux", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return String.valueOf(stack.getMetadata());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item NBT", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return String.valueOf((Object)stack.getTagCompound());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item Foil", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return String.valueOf(stack.hasEffect());
--- 506,538 ----
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering item");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Item being rendered");
!                 crashreportcategory.addCrashSectionCallable("Item Type", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001004";
                      public String call() throws Exception
                      {
                          return String.valueOf((Object)stack.getItem());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item Aux", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001005";
                      public String call() throws Exception
                      {
                          return String.valueOf(stack.getMetadata());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item NBT", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001006";
                      public String call() throws Exception
                      {
                          return String.valueOf((Object)stack.getTagCompound());
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Item Foil", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001007";
                      public String call() throws Exception
                      {
                          return String.valueOf(stack.hasEffect());
***************
*** 461,470 ****
                  GlStateManager.enableDepth();
              }
  
!             if (stack.isItemDamaged())
              {
!                 int j = (int)Math.round(13.0D - (double)stack.getItemDamage() * 13.0D / (double)stack.getMaxDamage());
!                 int i = (int)Math.round(255.0D - (double)stack.getItemDamage() * 255.0D / (double)stack.getMaxDamage());
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
                  GlStateManager.disableTexture2D();
--- 574,598 ----
                  GlStateManager.enableDepth();
              }
  
!             boolean flag = stack.isItemDamaged();
! 
!             if (Reflector.ForgeItem_showDurabilityBar.exists())
!             {
!                 flag = Reflector.callBoolean(stack.getItem(), Reflector.ForgeItem_showDurabilityBar, new Object[] {stack});
!             }
! 
!             if (flag)
              {
!                 int i = (int)Math.round(13.0D - (double)stack.getItemDamage() * 13.0D / (double)stack.getMaxDamage());
!                 int j = (int)Math.round(255.0D - (double)stack.getItemDamage() * 255.0D / (double)stack.getMaxDamage());
! 
!                 if (Reflector.ForgeItem_getDurabilityForDisplay.exists())
!                 {
!                     double d0 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, new Object[] {stack});
!                     i = (int)Math.round(13.0D - d0 * 13.0D);
!                     j = (int)Math.round(255.0D - d0 * 255.0D);
!                 }
! 
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
                  GlStateManager.disableTexture2D();
***************
*** 473,481 ****
                  Tessellator tessellator = Tessellator.getInstance();
                  WorldRenderer worldrenderer = tessellator.getWorldRenderer();
                  this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
!                 this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, 12, 1, (255 - i) / 4, 64, 0, 255);
!                 this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, j, 1, 255 - i, i, 0, 255);
!                 GlStateManager.enableBlend();
                  GlStateManager.enableAlpha();
                  GlStateManager.enableTexture2D();
                  GlStateManager.enableLighting();
--- 601,614 ----
                  Tessellator tessellator = Tessellator.getInstance();
                  WorldRenderer worldrenderer = tessellator.getWorldRenderer();
                  this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
!                 this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, 12, 1, (255 - j) / 4, 64, 0, 255);
!                 this.func_181565_a(worldrenderer, xPosition + 2, yPosition + 13, i, 1, 255 - j, j, 0, 255);
! 
!                 if (!Reflector.ForgeHooksClient.exists())
!                 {
!                     GlStateManager.enableBlend();
!                 }
! 
                  GlStateManager.enableAlpha();
                  GlStateManager.enableTexture2D();
                  GlStateManager.enableLighting();
***************
*** 943,948 ****
--- 1076,1082 ----
          this.registerItem(Items.nether_wart, "nether_wart");
          this.itemModelMesher.register(Items.potionitem, new ItemMeshDefinition()
          {
+             private static final String __OBFID = "CL_00002440";
              public ModelResourceLocation getModelLocation(ItemStack stack)
              {
                  return ItemPotion.isSplash(stack.getMetadata()) ? new ModelResourceLocation("bottle_splash", "inventory") : new ModelResourceLocation("bottle_drinkable", "inventory");
***************
*** 959,964 ****
--- 1093,1099 ----
          this.registerItem(Items.speckled_melon, "speckled_melon");
          this.itemModelMesher.register(Items.spawn_egg, new ItemMeshDefinition()
          {
+             private static final String __OBFID = "CL_00002439";
              public ModelResourceLocation getModelLocation(ItemStack stack)
              {
                  return new ModelResourceLocation("spawn_egg", "inventory");
***************
*** 998,1003 ****
--- 1133,1139 ----
          this.registerItem(Items.name_tag, "name_tag");
          this.itemModelMesher.register(Items.banner, new ItemMeshDefinition()
          {
+             private static final String __OBFID = "CL_00002438";
              public ModelResourceLocation getModelLocation(ItemStack stack)
              {
                  return new ModelResourceLocation("banner", "inventory");
***************
*** 1019,1024 ****
--- 1155,1161 ----
          this.registerItem(Items.prismarine_crystals, "prismarine_crystals");
          this.itemModelMesher.register(Items.enchanted_book, new ItemMeshDefinition()
          {
+             private static final String __OBFID = "CL_00002437";
              public ModelResourceLocation getModelLocation(ItemStack stack)
              {
                  return new ModelResourceLocation("enchanted_book", "inventory");
***************
*** 1026,1031 ****
--- 1163,1169 ----
          });
          this.itemModelMesher.register(Items.filled_map, new ItemMeshDefinition()
          {
+             private static final String __OBFID = "CL_00002436";
              public ModelResourceLocation getModelLocation(ItemStack stack)
              {
                  return new ModelResourceLocation("filled_map", "inventory");
***************
*** 1040,1049 ****
--- 1178,1216 ----
          this.registerBlock(Blocks.brown_mushroom_block, BlockHugeMushroom.EnumType.ALL_INSIDE.getMetadata(), "brown_mushroom_block");
          this.registerBlock(Blocks.red_mushroom_block, BlockHugeMushroom.EnumType.ALL_INSIDE.getMetadata(), "red_mushroom_block");
          this.registerBlock(Blocks.dragon_egg, "dragon_egg");
+ 
+         if (Reflector.ModelLoader_onRegisterItems.exists())
+         {
+             Reflector.call(Reflector.ModelLoader_onRegisterItems, new Object[] {this.itemModelMesher});
+         }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
          this.itemModelMesher.rebuildCache();
      }
+ 
+     public static void forgeHooksClient_putQuadColor(WorldRenderer p_forgeHooksClient_putQuadColor_0_, BakedQuad p_forgeHooksClient_putQuadColor_1_, int p_forgeHooksClient_putQuadColor_2_)
+     {
+         float f = (float)(p_forgeHooksClient_putQuadColor_2_ & 255);
+         float f1 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 8 & 255);
+         float f2 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 16 & 255);
+         float f3 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 24 & 255);
+         int[] aint = p_forgeHooksClient_putQuadColor_1_.getVertexData();
+         int i = aint.length / 4;
+ 
+         for (int j = 0; j < 4; ++j)
+         {
+             int k = aint[3 + i * j];
+             float f4 = (float)(k & 255);
+             float f5 = (float)(k >>> 8 & 255);
+             float f6 = (float)(k >>> 16 & 255);
+             float f7 = (float)(k >>> 24 & 255);
+             int l = Math.min(255, (int)(f * f4 / 255.0F));
+             int i1 = Math.min(255, (int)(f1 * f5 / 255.0F));
+             int j1 = Math.min(255, (int)(f2 * f6 / 255.0F));
+             int k1 = Math.min(255, (int)(f3 * f7 / 255.0F));
+             p_forgeHooksClient_putQuadColor_0_.putColorRGBA(p_forgeHooksClient_putQuadColor_0_.getColorIndex(4 - j), l, i1, j1, k1);
+         }
+     }
  }
diff -rc ./client/renderer/entity/RenderLiving.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderLiving.java
*** ./client/renderer/entity/RenderLiving.java	2021-04-03 11:27:28.100403000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderLiving.java	2019-05-30 22:29:18.601989000 -0700
***************
*** 10,18 ****
--- 10,23 ----
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityHanging;
  import net.minecraft.entity.EntityLiving;
+ import net.minecraft.entity.EntityLivingBase;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public abstract class RenderLiving<T extends EntityLiving> extends RendererLivingEntity<T>
  {
+     private static final String __OBFID = "CL_00001015";
+ 
      public RenderLiving(RenderManager rendermanagerIn, ModelBase modelbaseIn, float shadowsizeIn)
      {
          super(rendermanagerIn, modelbaseIn, shadowsizeIn);
***************
*** 70,160 ****
  
      protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         Entity entity = entityLivingIn.getLeashedToEntity();
! 
!         if (entity != null)
          {
!             y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
!             Tessellator tessellator = Tessellator.getInstance();
!             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!             double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!             double d2 = Math.cos(d0);
!             double d3 = Math.sin(d0);
!             double d4 = Math.sin(d1);
  
!             if (entity instanceof EntityHanging)
              {
!                 d2 = 0.0D;
!                 d3 = 0.0D;
!                 d4 = -1.0D;
!             }
  
!             double d5 = Math.cos(d1);
!             double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
!             double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
!             double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
!             double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
!             d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
!             d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
!             double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
!             double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
!             double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
!             x = x + d2;
!             z = z + d3;
!             double d13 = (double)((float)(d6 - d10));
!             double d14 = (double)((float)(d7 - d11));
!             double d15 = (double)((float)(d8 - d12));
!             GlStateManager.disableTexture2D();
!             GlStateManager.disableLighting();
!             GlStateManager.disableCull();
!             int i = 24;
!             double d16 = 0.025D;
!             worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!             for (int j = 0; j <= 24; ++j)
!             {
!                 float f = 0.5F;
!                 float f1 = 0.4F;
!                 float f2 = 0.3F;
  
!                 if (j % 2 == 0)
                  {
!                     f *= 0.7F;
!                     f1 *= 0.7F;
!                     f2 *= 0.7F;
                  }
  
!                 float f3 = (float)j / 24.0F;
!                 worldrenderer.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                 worldrenderer.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!             }
  
!             tessellator.draw();
!             worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!             for (int k = 0; k <= 24; ++k)
!             {
!                 float f4 = 0.5F;
!                 float f5 = 0.4F;
!                 float f6 = 0.3F;
  
!                 if (k % 2 == 0)
                  {
!                     f4 *= 0.7F;
!                     f5 *= 0.7F;
!                     f6 *= 0.7F;
                  }
  
!                 float f7 = (float)k / 24.0F;
!                 worldrenderer.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
!                 worldrenderer.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
!             }
  
!             tessellator.draw();
!             GlStateManager.enableLighting();
!             GlStateManager.enableTexture2D();
!             GlStateManager.enableCull();
          }
      }
  }
--- 75,180 ----
  
      protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         if (!Config.isShaders() || !Shaders.isShadowPass)
          {
!             Entity entity = entityLivingIn.getLeashedToEntity();
  
!             if (entity != null)
              {
!                 y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
!                 Tessellator tessellator = Tessellator.getInstance();
!                 WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!                 double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!                 double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!                 double d2 = Math.cos(d0);
!                 double d3 = Math.sin(d0);
!                 double d4 = Math.sin(d1);
  
!                 if (entity instanceof EntityHanging)
!                 {
!                     d2 = 0.0D;
!                     d3 = 0.0D;
!                     d4 = -1.0D;
!                 }
  
!                 double d5 = Math.cos(d1);
!                 double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
!                 double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
!                 double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
!                 double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
!                 d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
!                 d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
!                 double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
!                 double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
!                 double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
!                 x = x + d2;
!                 z = z + d3;
!                 double d13 = (double)((float)(d6 - d10));
!                 double d14 = (double)((float)(d7 - d11));
!                 double d15 = (double)((float)(d8 - d12));
!                 GlStateManager.disableTexture2D();
!                 GlStateManager.disableLighting();
!                 GlStateManager.disableCull();
  
!                 if (Config.isShaders())
                  {
!                     Shaders.beginLeash();
                  }
  
!                 boolean flag = true;
!                 double d16 = 0.025D;
!                 worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!                 for (int i = 0; i <= 24; ++i)
!                 {
!                     float f = 0.5F;
!                     float f1 = 0.4F;
!                     float f2 = 0.3F;
! 
!                     if (i % 2 == 0)
!                     {
!                         f *= 0.7F;
!                         f1 *= 0.7F;
!                         f2 *= 0.7F;
!                     }
! 
!                     float f3 = (float)i / 24.0F;
!                     worldrenderer.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)i) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                     worldrenderer.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)i) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                 }
  
!                 tessellator.draw();
!                 worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!                 for (int j = 0; j <= 24; ++j)
                  {
!                     float f4 = 0.5F;
!                     float f5 = 0.4F;
!                     float f6 = 0.3F;
! 
!                     if (j % 2 == 0)
!                     {
!                         f4 *= 0.7F;
!                         f5 *= 0.7F;
!                         f6 *= 0.7F;
!                     }
! 
!                     float f7 = (float)j / 24.0F;
!                     worldrenderer.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
!                     worldrenderer.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
                  }
  
!                 tessellator.draw();
  
!                 if (Config.isShaders())
!                 {
!                     Shaders.endLeash();
!                 }
! 
!                 GlStateManager.enableLighting();
!                 GlStateManager.enableTexture2D();
!                 GlStateManager.enableCull();
!             }
          }
      }
  }
diff -rc ./client/renderer/entity/RenderManager.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderManager.java
*** ./client/renderer/entity/RenderManager.java	2021-04-03 11:27:28.117409000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderManager.java	2019-05-30 22:29:18.627974000 -0700
***************
*** 1,6 ****
--- 1,7 ----
  package net.minecraft.client.renderer.entity;
  
  import com.google.common.collect.Maps;
+ import java.util.Collections;
  import java.util.Map;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockBed;
***************
*** 100,110 ****
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.Vec3;
  import net.minecraft.world.World;
  
  public class RenderManager
  {
!     private Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps. < Class <? extends Entity > , Render <? extends Entity >> newHashMap();
!     private Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
      private RenderPlayer playerRenderer;
  
      /** Renders fonts */
--- 101,118 ----
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.Vec3;
  import net.minecraft.world.World;
+ import optifine.PlayerItemsLayer;
+ import optifine.Reflector;
  
  public class RenderManager
  {
!     /** A map of entity classes and the associated renderer. */
!     private Map entityRenderMap = Maps.newHashMap();
! 
!     /**
!      * lists the various player skin types with their associated Renderer class instances.
!      */
!     private Map skinMap = Maps.newHashMap();
      private RenderPlayer playerRenderer;
  
      /** Renders fonts */
***************
*** 133,138 ****
--- 141,147 ----
  
      /** whether bounding box should be rendered or not */
      private boolean debugBoundingBox = false;
+     private static final String __OBFID = "CL_00000991";
  
      public RenderManager(TextureManager renderEngineIn, RenderItem itemRendererIn)
      {
***************
*** 199,204 ****
--- 208,219 ----
          this.playerRenderer = new RenderPlayer(this);
          this.skinMap.put("default", this.playerRenderer);
          this.skinMap.put("slim", new RenderPlayer(this, true));
+         PlayerItemsLayer.register(this.skinMap);
+ 
+         if (Reflector.RenderingRegistry_loadEntityRenderers.exists())
+         {
+             Reflector.call(Reflector.RenderingRegistry_loadEntityRenderers, new Object[] {this.entityRenderMap});
+         }
      }
  
      public void setRenderPosition(double renderPosXIn, double renderPosYIn, double renderPosZIn)
***************
*** 208,237 ****
          this.renderPosZ = renderPosZIn;
      }
  
!     public <T extends Entity> Render<T> getEntityClassRenderObject(Class <? extends Entity > p_78715_1_)
      {
!         Render <? extends Entity > render = (Render)this.entityRenderMap.get(p_78715_1_);
  
          if (render == null && p_78715_1_ != Entity.class)
          {
!             render = this.<Entity>getEntityClassRenderObject((Class <? extends Entity >)p_78715_1_.getSuperclass());
              this.entityRenderMap.put(p_78715_1_, render);
          }
  
!         return (Render<T>)render;
      }
  
!     public <T extends Entity> Render<T> getEntityRenderObject(Entity entityIn)
      {
          if (entityIn instanceof AbstractClientPlayer)
          {
              String s = ((AbstractClientPlayer)entityIn).getSkinType();
              RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
!             return (Render<T>)(renderplayer != null ? renderplayer : this.playerRenderer);
          }
          else
          {
!             return this.<T>getEntityClassRenderObject(entityIn.getClass());
          }
      }
  
--- 223,252 ----
          this.renderPosZ = renderPosZIn;
      }
  
!     public Render getEntityClassRenderObject(Class p_78715_1_)
      {
!         Render render = (Render)this.entityRenderMap.get(p_78715_1_);
  
          if (render == null && p_78715_1_ != Entity.class)
          {
!             render = this.getEntityClassRenderObject(p_78715_1_.getSuperclass());
              this.entityRenderMap.put(p_78715_1_, render);
          }
  
!         return render;
      }
  
!     public Render getEntityRenderObject(Entity entityIn)
      {
          if (entityIn instanceof AbstractClientPlayer)
          {
              String s = ((AbstractClientPlayer)entityIn).getSkinType();
              RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
!             return renderplayer != null ? renderplayer : this.playerRenderer;
          }
          else
          {
!             return this.getEntityClassRenderObject(entityIn.getClass());
          }
      }
  
***************
*** 248,259 ****
              IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
              Block block = iblockstate.getBlock();
  
!             if (block == Blocks.bed)
              {
!                 int i = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                  this.playerViewY = (float)(i * 90 + 180);
                  this.playerViewX = 0.0F;
              }
          }
          else
          {
--- 263,281 ----
              IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
              Block block = iblockstate.getBlock();
  
!             if (Reflector.callBoolean(Reflector.ForgeBlock_isBed, new Object[] {worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase)livingPlayerIn}))
              {
!                 EnumFacing enumfacing = (EnumFacing)Reflector.call(block, Reflector.ForgeBlock_getBedDirection, new Object[] {worldIn, new BlockPos(livingPlayerIn)});
!                 int i = enumfacing.getHorizontalIndex();
                  this.playerViewY = (float)(i * 90 + 180);
                  this.playerViewX = 0.0F;
              }
+             else if (block == Blocks.bed)
+             {
+                 int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
+                 this.playerViewY = (float)(j * 90 + 180);
+                 this.playerViewX = 0.0F;
+             }
          }
          else
          {
***************
*** 303,309 ****
  
      public boolean shouldRender(Entity entityIn, ICamera camera, double camX, double camY, double camZ)
      {
!         Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
          return render != null && render.shouldRender(entityIn, camera, camX, camY, camZ);
      }
  
--- 325,331 ----
  
      public boolean shouldRender(Entity entityIn, ICamera camera, double camX, double camY, double camZ)
      {
!         Render render = this.getEntityRenderObject(entityIn);
          return render != null && render.shouldRender(entityIn, camera, camX, camY, camZ);
      }
  
***************
*** 339,345 ****
          double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
          double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
          double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!         Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
  
          if (render != null && this.renderEngine != null)
          {
--- 361,367 ----
          double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
          double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
          double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!         Render render = this.getEntityRenderObject(entityIn);
  
          if (render != null && this.renderEngine != null)
          {
***************
*** 359,369 ****
  
      public boolean doRenderEntity(Entity entity, double x, double y, double z, float entityYaw, float partialTicks, boolean p_147939_10_)
      {
!         Render<Entity> render = null;
  
          try
          {
!             render = this.<Entity>getEntityRenderObject(entity);
  
              if (render != null && this.renderEngine != null)
              {
--- 381,391 ----
  
      public boolean doRenderEntity(Entity entity, double x, double y, double z, float entityYaw, float partialTicks, boolean p_147939_10_)
      {
!         Render render = null;
  
          try
          {
!             render = this.getEntityRenderObject(entity);
  
              if (render != null && this.renderEngine != null)
              {
***************
*** 489,492 ****
--- 511,529 ----
      {
          this.renderOutlines = renderOutlinesIn;
      }
+ 
+     public Map getEntityRenderMap()
+     {
+         return this.entityRenderMap;
+     }
+ 
+     public void setEntityRenderMap(Map p_setEntityRenderMap_1_)
+     {
+         this.entityRenderMap = p_setEntityRenderMap_1_;
+     }
+ 
+     public Map<String, RenderPlayer> getSkinMap()
+     {
+         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
+     }
  }
diff -rc ./client/renderer/entity/RenderSlime.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderSlime.java
*** ./client/renderer/entity/RenderSlime.java	2021-04-03 11:27:28.249396000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderSlime.java	2019-05-30 22:29:18.788882000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import net.minecraft.client.model.ModelBase;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.layers.LayerSlimeGel;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.monster.EntitySlime;
  import net.minecraft.util.ResourceLocation;
  
diff -rc ./client/renderer/entity/RenderWitch.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWitch.java
*** ./client/renderer/entity/RenderWitch.java	2021-04-03 11:27:28.311796000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWitch.java	2019-05-30 22:29:18.873833000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import net.minecraft.client.model.ModelWitch;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.layers.LayerHeldItemWitch;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.monster.EntityWitch;
  import net.minecraft.util.ResourceLocation;
  
diff -rc ./client/renderer/entity/RenderWither.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWither.java
*** ./client/renderer/entity/RenderWither.java	2021-04-03 11:27:28.318981000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWither.java	2019-05-30 22:29:18.883827000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import net.minecraft.client.model.ModelWither;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.layers.LayerWitherAura;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.boss.BossStatus;
  import net.minecraft.entity.boss.EntityWither;
  import net.minecraft.util.ResourceLocation;
diff -rc ./client/renderer/entity/RenderWolf.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWolf.java
*** ./client/renderer/entity/RenderWolf.java	2021-04-03 11:27:28.326952000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderWolf.java	2019-05-30 22:29:18.901816000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import net.minecraft.client.model.ModelBase;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.layers.LayerWolfCollar;
+ import net.minecraft.entity.EntityLiving;
  import net.minecraft.entity.passive.EntityWolf;
  import net.minecraft.util.ResourceLocation;
  
diff -rc ./client/renderer/entity/RenderXPOrb.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderXPOrb.java
*** ./client/renderer/entity/RenderXPOrb.java	2021-04-03 11:27:28.333961000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/entity/RenderXPOrb.java	2019-05-30 22:29:18.912811000 -0700
***************
*** 5,17 ****
  import net.minecraft.client.renderer.Tessellator;
  import net.minecraft.client.renderer.WorldRenderer;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.entity.item.EntityXPOrb;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  
! public class RenderXPOrb extends Render<EntityXPOrb>
  {
      private static final ResourceLocation experienceOrbTextures = new ResourceLocation("textures/entity/experience_orb.png");
  
      public RenderXPOrb(RenderManager renderManagerIn)
      {
--- 5,21 ----
  import net.minecraft.client.renderer.Tessellator;
  import net.minecraft.client.renderer.WorldRenderer;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.item.EntityXPOrb;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
  
! public class RenderXPOrb extends Render
  {
      private static final ResourceLocation experienceOrbTextures = new ResourceLocation("textures/entity/experience_orb.png");
+     private static final String __OBFID = "CL_00000993";
  
      public RenderXPOrb(RenderManager renderManagerIn)
      {
***************
*** 44,65 ****
          int l = j / 65536;
          OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k / 1.0F, (float)l / 1.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         float f8 = 255.0F;
!         float f9 = ((float)entity.xpColor + partialTicks) / 2.0F;
!         l = (int)((MathHelper.sin(f9 + 0.0F) + 1.0F) * 0.5F * 255.0F);
!         int i1 = 255;
!         int j1 = (int)((MathHelper.sin(f9 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
          GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
          GlStateManager.rotate(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!         float f7 = 0.3F;
          GlStateManager.scale(0.3F, 0.3F, 0.3F);
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
          worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!         worldrenderer.pos((double)(0.0F - f5), (double)(0.0F - f6), 0.0D).tex((double)f, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(f4 - f5), (double)(0.0F - f6), 0.0D).tex((double)f1, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(f4 - f5), (double)(1.0F - f6), 0.0D).tex((double)f1, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(0.0F - f5), (double)(1.0F - f6), 0.0D).tex((double)f, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
          tessellator.draw();
          GlStateManager.disableBlend();
          GlStateManager.disableRescaleNormal();
--- 48,85 ----
          int l = j / 65536;
          OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k / 1.0F, (float)l / 1.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         float f7 = 255.0F;
!         float f8 = ((float)entity.xpColor + partialTicks) / 2.0F;
!         l = (int)((MathHelper.sin(f8 + 0.0F) + 1.0F) * 0.5F * 255.0F);
!         boolean flag = true;
!         int i1 = (int)((MathHelper.sin(f8 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
          GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
          GlStateManager.rotate(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!         float f9 = 0.3F;
          GlStateManager.scale(0.3F, 0.3F, 0.3F);
          Tessellator tessellator = Tessellator.getInstance();
          WorldRenderer worldrenderer = tessellator.getWorldRenderer();
          worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!         int j1 = l;
!         int k1 = 255;
!         int l1 = i1;
! 
!         if (Config.isCustomColors())
!         {
!             int i2 = CustomColors.getXpOrbColor(f8);
! 
!             if (i2 >= 0)
!             {
!                 j1 = i2 >> 16 & 255;
!                 k1 = i2 >> 8 & 255;
!                 l1 = i2 >> 0 & 255;
!             }
!         }
! 
!         worldrenderer.pos((double)(0.0F - f5), (double)(0.0F - f6), 0.0D).tex((double)f, (double)f3).color(j1, k1, l1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(f4 - f5), (double)(0.0F - f6), 0.0D).tex((double)f1, (double)f3).color(j1, k1, l1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(f4 - f5), (double)(1.0F - f6), 0.0D).tex((double)f1, (double)f2).color(j1, k1, l1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!         worldrenderer.pos((double)(0.0F - f5), (double)(1.0F - f6), 0.0D).tex((double)f, (double)f2).color(j1, k1, l1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
          tessellator.draw();
          GlStateManager.disableBlend();
          GlStateManager.disableRescaleNormal();
***************
*** 74,77 ****
--- 94,116 ----
      {
          return experienceOrbTextures;
      }
+ 
+     /**
+      * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+      */
+     protected ResourceLocation getEntityTexture(Entity entity)
+     {
+         return this.getEntityTexture((EntityXPOrb)entity);
+     }
+ 
+     /**
+      * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+      * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+      * (Render<T extends Entity>) and this method has signature public void doRender(T entity, double d, double d1,
+      * double d2, float f, float f1). But JAD is pre 1.5 so doe
+      */
+     public void doRender(Entity entity, double x, double y, double z, float entityYaw, float partialTicks)
+     {
+         this.doRender((EntityXPOrb)entity, x, y, z, entityYaw, partialTicks);
+     }
  }
diff -rc ./client/renderer/EntityRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/EntityRenderer.java
*** ./client/renderer/EntityRenderer.java	2021-04-03 11:27:27.288470000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/EntityRenderer.java	2020-03-17 19:21:37.862679300 -0700
***************
*** 1,30 ****
  package net.minecraft.client.renderer;
  
- import com.google.common.base.Predicate;
- import com.google.common.base.Predicates;
- import com.google.gson.JsonSyntaxException;
  import java.io.IOException;
  import java.nio.FloatBuffer;
  import java.util.List;
  import java.util.Random;
  import java.util.concurrent.Callable;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockBed;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.entity.AbstractClientPlayer;
  import net.minecraft.client.gui.MapItemRenderer;
  import net.minecraft.client.gui.ScaledResolution;
  import net.minecraft.client.particle.EffectRenderer;
  import net.minecraft.client.renderer.culling.ClippingHelperImpl;
  import net.minecraft.client.renderer.culling.Frustum;
- import net.minecraft.client.renderer.culling.ICamera;
  import net.minecraft.client.renderer.texture.DynamicTexture;
  import net.minecraft.client.renderer.texture.TextureMap;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.IResourceManagerReloadListener;
  import net.minecraft.client.shader.ShaderGroup;
  import net.minecraft.client.shader.ShaderLinkHelper;
  import net.minecraft.crash.CrashReport;
--- 1,51 ----
  package net.minecraft.client.renderer;
  
  import java.io.IOException;
+ import java.lang.reflect.Field;
  import java.nio.FloatBuffer;
+ import java.util.Calendar;
+ import java.util.Date;
  import java.util.List;
  import java.util.Random;
  import java.util.concurrent.Callable;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ import org.lwjgl.input.Mouse;
+ import org.lwjgl.opengl.Display;
+ import org.lwjgl.opengl.GL11;
+ import org.lwjgl.opengl.GLContext;
+ import org.lwjgl.util.glu.GLU;
+ import org.lwjgl.util.glu.Project;
+ 
+ import com.google.common.base.Predicate;
+ import com.google.common.base.Predicates;
+ import com.google.gson.JsonSyntaxException;
+ 
+ import clientname.event.impl.RenderEvent;
+ import clientname.mods.ModInstances;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockBed;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.entity.AbstractClientPlayer;
+ import net.minecraft.client.gui.GuiDownloadTerrain;
+ import net.minecraft.client.gui.GuiMainMenu;
  import net.minecraft.client.gui.MapItemRenderer;
  import net.minecraft.client.gui.ScaledResolution;
+ import net.minecraft.client.multiplayer.WorldClient;
  import net.minecraft.client.particle.EffectRenderer;
  import net.minecraft.client.renderer.culling.ClippingHelperImpl;
  import net.minecraft.client.renderer.culling.Frustum;
  import net.minecraft.client.renderer.texture.DynamicTexture;
  import net.minecraft.client.renderer.texture.TextureMap;
+ import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.client.resources.I18n;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.IResourceManagerReloadListener;
+ import net.minecraft.client.settings.GameSettings;
  import net.minecraft.client.shader.ShaderGroup;
  import net.minecraft.client.shader.ShaderLinkHelper;
  import net.minecraft.crash.CrashReport;
***************
*** 43,50 ****
--- 64,73 ----
  import net.minecraft.inventory.IInventory;
  import net.minecraft.item.ItemStack;
  import net.minecraft.potion.Potion;
+ import net.minecraft.server.integrated.IntegratedServer;
  import net.minecraft.util.AxisAlignedBB;
  import net.minecraft.util.BlockPos;
+ import net.minecraft.util.ChatComponentText;
  import net.minecraft.util.EntitySelectors;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.EnumParticleTypes;
***************
*** 56,70 ****
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.Vec3;
  import net.minecraft.world.World;
  import net.minecraft.world.WorldSettings;
  import net.minecraft.world.biome.BiomeGenBase;
! import org.apache.logging.log4j.LogManager;
! import org.apache.logging.log4j.Logger;
! import org.lwjgl.input.Mouse;
! import org.lwjgl.opengl.Display;
! import org.lwjgl.opengl.GL11;
! import org.lwjgl.opengl.GLContext;
! import org.lwjgl.util.glu.Project;
  
  public class EntityRenderer implements IResourceManagerReloadListener
  {
--- 79,96 ----
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.Vec3;
  import net.minecraft.world.World;
+ import net.minecraft.world.WorldProvider;
  import net.minecraft.world.WorldSettings;
  import net.minecraft.world.biome.BiomeGenBase;
! import optifine.Config;
! import optifine.CustomColors;
! import optifine.Lagometer;
! import optifine.RandomMobs;
! import optifine.Reflector;
! import optifine.ReflectorForge;
! import optifine.TextureUtils;
! import shadersmod.client.Shaders;
! import shadersmod.client.ShadersRender;
  
  public class EntityRenderer implements IResourceManagerReloadListener
  {
***************
*** 81,87 ****
      private final IResourceManager resourceManager;
      private Random random = new Random();
      private float farPlaneDistance;
!     public final ItemRenderer itemRenderer;
      private final MapItemRenderer theMapItemRenderer;
  
      /** Entity renderer update count */
--- 107,113 ----
      private final IResourceManager resourceManager;
      private Random random = new Random();
      private float farPlaneDistance;
!     public ItemRenderer itemRenderer;
      private final MapItemRenderer theMapItemRenderer;
  
      /** Entity renderer update count */
***************
*** 157,165 ****
  
      /** Fog color buffer */
      private FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
!     private float fogColorRed;
!     private float fogColorGreen;
!     private float fogColorBlue;
  
      /** Fog color 2 */
      private float fogColor2;
--- 183,191 ----
  
      /** Fog color buffer */
      private FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
!     public float fogColorRed;
!     public float fogColorGreen;
!     public float fogColorBlue;
  
      /** Fog color 2 */
      private float fogColor2;
***************
*** 176,182 ****
      public static final int shaderCount = shaderResourceLocations.length;
      private int shaderIndex;
      private boolean useShader;
!     private int frameCount;
  
      public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
      {
--- 202,222 ----
      public static final int shaderCount = shaderResourceLocations.length;
      private int shaderIndex;
      private boolean useShader;
!     public int frameCount;
!     private static final String __OBFID = "CL_00000947";
!     private boolean initialized = false;
!     private World updatedWorld = null;
!     private boolean showDebugInfo = false;
!     public boolean fogStandard = false;
!     private float clipDistance = 128.0F;
!     private long lastServerTime = 0L;
!     private int lastServerTicks = 0;
!     private int serverWaitTime = 0;
!     private int serverWaitTimeCurrent = 0;
!     private float avgServerTimeDiff = 0.0F;
!     private float avgServerTickDiff = 0.0F;
!     private long lastErrorCheckTimeMs = 0L;
!     private ShaderGroup[] fxaaShaders = new ShaderGroup[10];
  
      public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
      {
***************
*** 252,304 ****
              {
                  this.loadShader(new ResourceLocation("shaders/post/invert.json"));
              }
          }
      }
  
      public void activateNextShader()
      {
!         if (OpenGlHelper.shadersSupported)
          {
!             if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
              {
!                 if (this.theShaderGroup != null)
!                 {
!                     this.theShaderGroup.deleteShaderGroup();
!                 }
  
!                 this.shaderIndex = (this.shaderIndex + 1) % (shaderResourceLocations.length + 1);
  
!                 if (this.shaderIndex != shaderCount)
!                 {
!                     this.loadShader(shaderResourceLocations[this.shaderIndex]);
!                 }
!                 else
!                 {
!                     this.theShaderGroup = null;
!                 }
              }
          }
      }
  
      private void loadShader(ResourceLocation resourceLocationIn)
      {
!         try
!         {
!             this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
!             this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
!             this.useShader = true;
!         }
!         catch (IOException ioexception)
!         {
!             logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)ioexception);
!             this.shaderIndex = shaderCount;
!             this.useShader = false;
!         }
!         catch (JsonSyntaxException jsonsyntaxexception)
          {
!             logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)jsonsyntaxexception);
!             this.shaderIndex = shaderCount;
!             this.useShader = false;
          }
      }
  
--- 292,348 ----
              {
                  this.loadShader(new ResourceLocation("shaders/post/invert.json"));
              }
+             else if (Reflector.ForgeHooksClient_loadEntityShader.exists())
+             {
+                 Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, new Object[] {entityIn, this});
+             }
          }
      }
  
      public void activateNextShader()
      {
!         if (OpenGlHelper.shadersSupported && this.mc.getRenderViewEntity() instanceof EntityPlayer)
          {
!             if (this.theShaderGroup != null)
              {
!                 this.theShaderGroup.deleteShaderGroup();
!             }
  
!             this.shaderIndex = (this.shaderIndex + 1) % (shaderResourceLocations.length + 1);
  
!             if (this.shaderIndex != shaderCount)
!             {
!                 this.loadShader(shaderResourceLocations[this.shaderIndex]);
!             }
!             else
!             {
!                 this.theShaderGroup = null;
              }
          }
      }
  
      private void loadShader(ResourceLocation resourceLocationIn)
      {
!         if (OpenGlHelper.isFramebufferEnabled())
          {
!             try
!             {
!                 this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
!                 this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
!                 this.useShader = true;
!             }
!             catch (IOException ioexception)
!             {
!                 logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)ioexception);
!                 this.shaderIndex = shaderCount;
!                 this.useShader = false;
!             }
!             catch (JsonSyntaxException jsonsyntaxexception)
!             {
!                 logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)jsonsyntaxexception);
!                 this.shaderIndex = shaderCount;
!                 this.useShader = false;
!             }
          }
      }
  
***************
*** 359,366 ****
              this.mc.setRenderViewEntity(this.mc.thePlayer);
          }
  
!         float f3 = this.mc.theWorld.getLightBrightness(new BlockPos(this.mc.getRenderViewEntity()));
!         float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
          float f2 = f3 * (1.0F - f4) + f4;
          this.fogColor1 += (f2 - this.fogColor1) * 0.1F;
          ++this.rendererUpdateCount;
--- 403,415 ----
              this.mc.setRenderViewEntity(this.mc.thePlayer);
          }
  
!         Entity entity = this.mc.getRenderViewEntity();
!         double d0 = entity.posX;
!         double d1 = entity.posY + (double)entity.getEyeHeight();
!         double d2 = entity.posZ;
!         float f3 = this.mc.theWorld.getLightBrightness(new BlockPos(d0, d1, d2));
!         float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
!         f4 = MathHelper.clamp_float(f4, 0.0F, 1.0F);
          float f2 = f3 * (1.0F - f4) + f4;
          this.fogColor1 += (f2 - this.fogColor1) * 0.1F;
          ++this.rendererUpdateCount;
***************
*** 410,518 ****
      {
          Entity entity = this.mc.getRenderViewEntity();
  
!         if (entity != null)
          {
!             if (this.mc.theWorld != null)
!             {
!                 this.mc.mcProfiler.startSection("pick");
!                 this.mc.pointedEntity = null;
!                 double d0 = (double)this.mc.playerController.getBlockReachDistance();
!                 this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
!                 double d1 = d0;
!                 Vec3 vec3 = entity.getPositionEyes(partialTicks);
!                 boolean flag = false;
!                 int i = 3;
  
!                 if (this.mc.playerController.extendedReach())
!                 {
!                     d0 = 6.0D;
!                     d1 = 6.0D;
!                 }
!                 else
                  {
!                     if (d0 > 3.0D)
!                     {
!                         flag = true;
!                     }
                  }
  
!                 if (this.mc.objectMouseOver != null)
!                 {
!                     d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3);
!                 }
  
!                 Vec3 vec31 = entity.getLook(partialTicks);
!                 Vec3 vec32 = vec3.addVector(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0);
!                 this.pointedEntity = null;
!                 Vec3 vec33 = null;
!                 float f = 1.0F;
!                 List<Entity> list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
                  {
!                     public boolean apply(Entity p_apply_1_)
                      {
!                         return p_apply_1_.canBeCollidedWith();
                      }
!                 }));
!                 double d2 = d1;
! 
!                 for (int j = 0; j < list.size(); ++j)
                  {
!                     Entity entity1 = (Entity)list.get(j);
!                     float f1 = entity1.getCollisionBorderSize();
!                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
!                     MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);
  
!                     if (axisalignedbb.isVecInside(vec3))
                      {
!                         if (d2 >= 0.0D)
                          {
!                             this.pointedEntity = entity1;
!                             vec33 = movingobjectposition == null ? vec3 : movingobjectposition.hitVec;
!                             d2 = 0.0D;
                          }
-                     }
-                     else if (movingobjectposition != null)
-                     {
-                         double d3 = vec3.distanceTo(movingobjectposition.hitVec);
  
!                         if (d3 < d2 || d2 == 0.0D)
                          {
!                             if (entity1 == entity.ridingEntity)
!                             {
!                                 if (d2 == 0.0D)
!                                 {
!                                     this.pointedEntity = entity1;
!                                     vec33 = movingobjectposition.hitVec;
!                                 }
!                             }
!                             else
                              {
                                  this.pointedEntity = entity1;
                                  vec33 = movingobjectposition.hitVec;
-                                 d2 = d3;
                              }
                          }
                      }
                  }
  
!                 if (this.pointedEntity != null && flag && vec3.distanceTo(vec33) > 3.0D)
!                 {
!                     this.pointedEntity = null;
!                     this.mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing)null, new BlockPos(vec33));
!                 }
  
!                 if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
!                 {
!                     this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity, vec33);
  
!                     if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
!                     {
!                         this.mc.pointedEntity = this.pointedEntity;
!                     }
                  }
- 
-                 this.mc.mcProfiler.endSection();
              }
          }
      }
  
--- 459,565 ----
      {
          Entity entity = this.mc.getRenderViewEntity();
  
!         if (entity != null && this.mc.theWorld != null)
          {
!             this.mc.mcProfiler.startSection("pick");
!             this.mc.pointedEntity = null;
!             double d0 = (double)this.mc.playerController.getBlockReachDistance();
!             this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
!             double d1 = d0;
!             Vec3 vec3 = entity.getPositionEyes(partialTicks);
!             boolean flag = false;
!             boolean flag1 = true;
  
!             if (this.mc.playerController.extendedReach())
!             {
!                 d0 = 6.0D;
!                 d1 = 6.0D;
!             }
!             else
!             {
!                 if (d0 > 3.0D)
                  {
!                     flag = true;
                  }
+             }
  
!             if (this.mc.objectMouseOver != null)
!             {
!                 d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3);
!             }
  
!             Vec3 vec31 = entity.getLook(partialTicks);
!             Vec3 vec32 = vec3.addVector(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0);
!             this.pointedEntity = null;
!             Vec3 vec33 = null;
!             float f = 1.0F;
!             List list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new EntityRendererInternal(this)));
!             double d2 = d1;
! 
!             for (int i = 0; i < list.size(); ++i)
!             {
!                 Entity entity1 = (Entity)list.get(i);
!                 float f1 = entity1.getCollisionBorderSize();
!                 AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
!                 MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);
! 
!                 if (axisalignedbb.isVecInside(vec3))
                  {
!                     if (d2 >= 0.0D)
                      {
!                         this.pointedEntity = entity1;
!                         vec33 = movingobjectposition == null ? vec3 : movingobjectposition.hitVec;
!                         d2 = 0.0D;
                      }
!                 }
!                 else if (movingobjectposition != null)
                  {
!                     double d3 = vec3.distanceTo(movingobjectposition.hitVec);
  
!                     if (d3 < d2 || d2 == 0.0D)
                      {
!                         boolean flag2 = false;
! 
!                         if (Reflector.ForgeEntity_canRiderInteract.exists())
                          {
!                             flag2 = Reflector.callBoolean(entity1, Reflector.ForgeEntity_canRiderInteract, new Object[0]);
                          }
  
!                         if (entity1 == entity.ridingEntity && !flag2)
                          {
!                             if (d2 == 0.0D)
                              {
                                  this.pointedEntity = entity1;
                                  vec33 = movingobjectposition.hitVec;
                              }
                          }
+                         else
+                         {
+                             this.pointedEntity = entity1;
+                             vec33 = movingobjectposition.hitVec;
+                             d2 = d3;
+                         }
                      }
                  }
+             }
  
!             if (this.pointedEntity != null && flag && vec3.distanceTo(vec33) > 3.0D)
!             {
!                 this.pointedEntity = null;
!                 this.mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing)null, new BlockPos(vec33));
!             }
  
!             if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
!             {
!                 this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity, vec33);
  
!                 if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
!                 {
!                     this.mc.pointedEntity = this.pointedEntity;
                  }
              }
+ 
+             this.mc.mcProfiler.endSection();
          }
      }
  
***************
*** 560,566 ****
              if (p_78481_2_)
              {
                  f = this.mc.gameSettings.fovSetting;
!                 f = f * (this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks);
              }
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
--- 607,647 ----
              if (p_78481_2_)
              {
                  f = this.mc.gameSettings.fovSetting;
! 
!                 if (Config.isDynamicFov())
!                 {
!                     f *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks;
!                 }
!             }
! 
!             boolean flag = false;
! 
!             if (this.mc.currentScreen == null)
!             {
!                 GameSettings gamesettings = this.mc.gameSettings;
!                 flag = GameSettings.isKeyDown(this.mc.gameSettings.ofKeyBindZoom);
!             }
! 
!             if (flag)
!             {
!                 if (!Config.zoomMode)
!                 {
!                     Config.zoomMode = true;
!                     this.mc.gameSettings.smoothCamera = true;
!                 }
! 
!                 if (Config.zoomMode)
!                 {
!                     f /= 4.0F;
!                 }
!             }
!             else if (Config.zoomMode)
!             {
!                 Config.zoomMode = false;
!                 this.mc.gameSettings.smoothCamera = false;
!                 this.mouseFilterXAxis = new MouseFilter();
!                 this.mouseFilterYAxis = new MouseFilter();
!                 this.mc.renderGlobal.displayListEntitiesDirty = true;
              }
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
***************
*** 648,661 ****
                  IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
                  Block block = iblockstate.getBlock();
  
!                 if (block == Blocks.bed)
                  {
                      int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                      GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
                  }
  
!                 GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, -1.0F, 0.0F);
!                 GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, -1.0F, 0.0F, 0.0F);
              }
          }
          else if (this.mc.gameSettings.thirdPersonView > 0)
--- 729,746 ----
                  IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
                  Block block = iblockstate.getBlock();
  
!                 if (Reflector.ForgeHooksClient_orientBedCamera.exists())
!                 {
!                     Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[] {this.mc.theWorld, blockpos, iblockstate, entity});
!                 }
!                 else if (block == Blocks.bed)
                  {
                      int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                      GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
                  }
  
!                 GlStateManager.rotate(ModInstances.getModPerspective().getCameraYaw() + (ModInstances.getModPerspective().getCameraYaw() - ModInstances.getModPerspective().getCameraYaw()) * partialTicks + 180.0F, 0.0F, -1.0F, 0.0F);
!                 GlStateManager.rotate(ModInstances.getModPerspective().getCameraPitch() + (ModInstances.getModPerspective().getCameraPitch() - ModInstances.getModPerspective().getCameraPitch()) * partialTicks, -1.0F, 0.0F, 0.0F);
              }
          }
          else if (this.mc.gameSettings.thirdPersonView > 0)
***************
*** 668,675 ****
              }
              else
              {
!                 float f1 = entity.rotationYaw;
!                 float f2 = entity.rotationPitch;
  
                  if (this.mc.gameSettings.thirdPersonView == 2)
                  {
--- 753,760 ----
              }
              else
              {
!                 float f1 = ModInstances.getModPerspective().getCameraYaw();
!                 float f2 = ModInstances.getModPerspective().getCameraPitch();
  
                  if (this.mc.gameSettings.thirdPersonView == 2)
                  {
***************
*** 706,716 ****
                      GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 GlStateManager.rotate(entity.rotationPitch - f2, 1.0F, 0.0F, 0.0F);
!                 GlStateManager.rotate(entity.rotationYaw - f1, 0.0F, 1.0F, 0.0F);
                  GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
!                 GlStateManager.rotate(f1 - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
!                 GlStateManager.rotate(f2 - entity.rotationPitch, 1.0F, 0.0F, 0.0F);
              }
          }
          else
--- 791,801 ----
                      GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 GlStateManager.rotate(ModInstances.getModPerspective().getCameraPitch() - f2, 1.0F, 0.0F, 0.0F);
!                 GlStateManager.rotate(ModInstances.getModPerspective().getCameraYaw() - f1, 0.0F, 1.0F, 0.0F);
                  GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
!                 GlStateManager.rotate(f1 - ModInstances.getModPerspective().getCameraYaw(), 0.0F, 1.0F, 0.0F);
!                 GlStateManager.rotate(f2 - ModInstances.getModPerspective().getCameraPitch(), 1.0F, 0.0F, 0.0F);
              }
          }
          else
***************
*** 718,735 ****
              GlStateManager.translate(0.0F, 0.0F, -0.1F);
          }
  
!         if (!this.mc.gameSettings.debugCamEnable)
          {
!             GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, 1.0F, 0.0F, 0.0F);
  
              if (entity instanceof EntityAnimal)
              {
!                 EntityAnimal entityanimal = (EntityAnimal)entity;
!                 GlStateManager.rotate(entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
              }
              else
              {
!                 GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
              }
          }
  
--- 803,845 ----
              GlStateManager.translate(0.0F, 0.0F, -0.1F);
          }
  
!         if (Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists())
!         {
!             if (!this.mc.gameSettings.debugCamEnable)
!             {
!                 float f6 = ModInstances.getModPerspective().getCameraYaw() + (ModInstances.getModPerspective().getCameraYaw() - ModInstances.getModPerspective().getCameraYaw()) * partialTicks + 180.0F;
!                 float f7 = ModInstances.getModPerspective().getCameraPitch() + (ModInstances.getModPerspective().getCameraPitch() - ModInstances.getModPerspective().getCameraPitch()) * partialTicks;
!                 float f8 = 0.0F;
! 
!                 if (entity instanceof EntityAnimal)
!                 {
!                     EntityAnimal entityanimal = (EntityAnimal)entity;
!                     f6 = entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0F;
!                 }
! 
!                 Block block1 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
!                 Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, new Object[] {this, entity, block1, Float.valueOf(partialTicks), Float.valueOf(f6), Float.valueOf(f7), Float.valueOf(f8)});
!                 Reflector.postForgeBusEvent(object);
!                 f8 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_roll, f8);
!                 f7 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_pitch, f7);
!                 f6 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_yaw, f6);
!                 GlStateManager.rotate(f8, 0.0F, 0.0F, 1.0F);
!                 GlStateManager.rotate(f7, 1.0F, 0.0F, 0.0F);
!                 GlStateManager.rotate(f6, 0.0F, 1.0F, 0.0F);
!             }
!         }
!         else if (!this.mc.gameSettings.debugCamEnable)
          {
!             GlStateManager.rotate(ModInstances.getModPerspective().getCameraPitch() + (ModInstances.getModPerspective().getCameraPitch() - ModInstances.getModPerspective().getCameraPitch()) * partialTicks, 1.0F, 0.0F, 0.0F);
  
              if (entity instanceof EntityAnimal)
              {
!                 EntityAnimal entityanimal1 = (EntityAnimal)entity;
!                 GlStateManager.rotate(entityanimal1.prevRotationYawHead + (entityanimal1.rotationYawHead - entityanimal1.prevRotationYawHead) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
              }
              else
              {
!                 GlStateManager.rotate(ModInstances.getModPerspective().getCameraYaw() + (ModInstances.getModPerspective().getCameraYaw() - ModInstances.getModPerspective().getCameraYaw()) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
              }
          }
  
***************
*** 743,751 ****
      /**
       * sets up projection, view effects, camera position/rotation
       */
!     private void setupCameraTransform(float partialTicks, int pass)
      {
          this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
          GlStateManager.matrixMode(5889);
          GlStateManager.loadIdentity();
          float f = 0.07F;
--- 853,872 ----
      /**
       * sets up projection, view effects, camera position/rotation
       */
!     public void setupCameraTransform(float partialTicks, int pass)
      {
          this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
+ 
+         if (Config.isFogFancy())
+         {
+             this.farPlaneDistance *= 0.95F;
+         }
+ 
+         if (Config.isFogFast())
+         {
+             this.farPlaneDistance *= 0.83F;
+         }
+ 
          GlStateManager.matrixMode(5889);
          GlStateManager.loadIdentity();
          float f = 0.07F;
***************
*** 755,767 ****
              GlStateManager.translate((float)(-(pass * 2 - 1)) * f, 0.0F, 0.0F);
          }
  
          if (this.cameraZoom != 1.0D)
          {
              GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
              GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
          }
  
!         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
          GlStateManager.matrixMode(5888);
          GlStateManager.loadIdentity();
  
--- 876,900 ----
              GlStateManager.translate((float)(-(pass * 2 - 1)) * f, 0.0F, 0.0F);
          }
  
+         this.clipDistance = this.farPlaneDistance * 2.0F;
+ 
+         if (this.clipDistance < 173.0F)
+         {
+             this.clipDistance = 173.0F;
+         }
+ 
+         if (this.mc.theWorld.provider.getDimensionId() == 1)
+         {
+             this.clipDistance = 256.0F;
+         }
+ 
          if (this.cameraZoom != 1.0D)
          {
              GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
              GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
          }
  
!         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
          GlStateManager.matrixMode(5888);
          GlStateManager.loadIdentity();
  
***************
*** 781,798 ****
  
          if (f1 > 0.0F)
          {
!             int i = 20;
  
              if (this.mc.thePlayer.isPotionActive(Potion.confusion))
              {
!                 i = 7;
              }
  
              float f2 = 5.0F / (f1 * f1 + 5.0F) - f1 * 0.04F;
              f2 = f2 * f2;
!             GlStateManager.rotate(((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
              GlStateManager.scale(1.0F / f2, 1.0F, 1.0F);
!             GlStateManager.rotate(-((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
          }
  
          this.orientCamera(partialTicks);
--- 914,931 ----
  
          if (f1 > 0.0F)
          {
!             byte b0 = 20;
  
              if (this.mc.thePlayer.isPotionActive(Potion.confusion))
              {
!                 b0 = 7;
              }
  
              float f2 = 5.0F / (f1 * f1 + 5.0F) - f1 * 0.04F;
              f2 = f2 * f2;
!             GlStateManager.rotate(((float)this.rendererUpdateCount + partialTicks) * (float)b0, 0.0F, 1.0F, 1.0F);
              GlStateManager.scale(1.0F / f2, 1.0F, 1.0F);
!             GlStateManager.rotate(-((float)this.rendererUpdateCount + partialTicks) * (float)b0, 0.0F, 1.0F, 1.0F);
          }
  
          this.orientCamera(partialTicks);
***************
*** 828,833 ****
--- 961,971 ----
       */
      private void renderHand(float partialTicks, int xOffset)
      {
+         this.renderHand(partialTicks, xOffset, true, true, false);
+     }
+ 
+     public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_)
+     {
          if (!this.debugView)
          {
              GlStateManager.matrixMode(5889);
***************
*** 836,881 ****
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(-(xOffset * 2 - 1)) * f, 0.0F, 0.0F);
              }
  
!             Project.gluPerspective(this.getFOVModifier(partialTicks, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.loadIdentity();
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(xOffset * 2 - 1) * 0.1F, 0.0F, 0.0F);
              }
  
!             GlStateManager.pushMatrix();
!             this.hurtCameraEffect(partialTicks);
  
!             if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(partialTicks);
!             }
  
!             boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
  
!             if (this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
              {
!                 this.enableLightmap();
!                 this.itemRenderer.renderItemInFirstPerson(partialTicks);
!                 this.disableLightmap();
              }
  
!             GlStateManager.popMatrix();
  
              if (this.mc.gameSettings.thirdPersonView == 0 && !flag)
              {
!                 this.itemRenderer.renderOverlays(partialTicks);
!                 this.hurtCameraEffect(partialTicks);
              }
  
              if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(partialTicks);
              }
          }
      }
--- 974,1046 ----
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(-(p_renderHand_2_ * 2 - 1)) * f, 0.0F, 0.0F);
!             }
! 
!             if (Config.isShaders())
!             {
!                 Shaders.applyHandDepth();
              }
  
!             Project.gluPerspective(this.getFOVModifier(p_renderHand_1_, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.loadIdentity();
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
              }
  
!             boolean flag = false;
  
!             if (p_renderHand_3_)
              {
!                 GlStateManager.pushMatrix();
!                 this.hurtCameraEffect(p_renderHand_1_);
! 
!                 if (this.mc.gameSettings.viewBobbing)
!                 {
!                     this.setupViewBobbing(p_renderHand_1_);
!                 }
! 
!                 flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
!                 boolean flag1 = !ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, p_renderHand_1_, p_renderHand_2_);
! 
!                 if (flag1 && this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
!                 {
!                     this.enableLightmap();
! 
!                     if (Config.isShaders())
!                     {
!                         ShadersRender.renderItemFP(this.itemRenderer, p_renderHand_1_, p_renderHand_5_);
!                     }
!                     else
!                     {
!                         this.itemRenderer.renderItemInFirstPerson(p_renderHand_1_);
!                     }
! 
!                     this.disableLightmap();
!                 }
  
!                 GlStateManager.popMatrix();
!             }
  
!             if (!p_renderHand_4_)
              {
!                 return;
              }
  
!             this.disableLightmap();
  
              if (this.mc.gameSettings.thirdPersonView == 0 && !flag)
              {
!                 this.itemRenderer.renderOverlays(p_renderHand_1_);
!                 this.hurtCameraEffect(p_renderHand_1_);
              }
  
              if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(p_renderHand_1_);
              }
          }
      }
***************
*** 885,890 ****
--- 1050,1060 ----
          GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
          GlStateManager.disableTexture2D();
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.disableLightmap();
+         }
      }
  
      public void enableLightmap()
***************
*** 904,909 ****
--- 1074,1084 ----
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.enableTexture2D();
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.enableLightmap();
+         }
      }
  
      /**
***************
*** 922,942 ****
          if (this.lightmapUpdateNeeded)
          {
              this.mc.mcProfiler.startSection("lightTex");
!             World world = this.mc.theWorld;
  
!             if (world != null)
              {
!                 float f = world.getSunBrightness(1.0F);
                  float f1 = f * 0.95F + 0.05F;
  
                  for (int i = 0; i < 256; ++i)
                  {
!                     float f2 = world.provider.getLightBrightnessTable()[i / 16] * f1;
!                     float f3 = world.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
  
!                     if (world.getLastLightningBolt() > 0)
                      {
!                         f2 = world.provider.getLightBrightnessTable()[i / 16];
                      }
  
                      float f4 = f2 * (f * 0.65F + 0.35F);
--- 1097,1125 ----
          if (this.lightmapUpdateNeeded)
          {
              this.mc.mcProfiler.startSection("lightTex");
!             WorldClient worldclient = this.mc.theWorld;
  
!             if (worldclient != null)
              {
!                 if (Config.isCustomColors() && CustomColors.updateLightmap(worldclient, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision)))
!                 {
!                     this.lightmapTexture.updateDynamicTexture();
!                     this.lightmapUpdateNeeded = false;
!                     this.mc.mcProfiler.endSection();
!                     return;
!                 }
! 
!                 float f = worldclient.getSunBrightness(1.0F);
                  float f1 = f * 0.95F + 0.05F;
  
                  for (int i = 0; i < 256; ++i)
                  {
!                     float f2 = worldclient.provider.getLightBrightnessTable()[i / 16] * f1;
!                     float f3 = worldclient.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
  
!                     if (worldclient.getLastLightningBolt() > 0)
                      {
!                         f2 = worldclient.provider.getLightBrightnessTable()[i / 16];
                      }
  
                      float f4 = f2 * (f * 0.65F + 0.35F);
***************
*** 958,964 ****
                          f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
                      }
  
!                     if (world.provider.getDimensionId() == 1)
                      {
                          f8 = 0.22F + f3 * 0.75F;
                          f9 = 0.28F + f6 * 0.75F;
--- 1141,1147 ----
                          f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
                      }
  
!                     if (worldclient.provider.getDimensionId() == 1)
                      {
                          f8 = 0.22F + f3 * 0.75F;
                          f9 = 0.28F + f6 * 0.75F;
***************
*** 1044,1054 ****
                          f10 = 0.0F;
                      }
  
!                     int j = 255;
!                     int k = (int)(f8 * 255.0F);
!                     int l = (int)(f9 * 255.0F);
!                     int i1 = (int)(f10 * 255.0F);
!                     this.lightmapColors[i] = j << 24 | k << 16 | l << 8 | i1;
                  }
  
                  this.lightmapTexture.updateDynamicTexture();
--- 1227,1237 ----
                          f10 = 0.0F;
                      }
  
!                     short short1 = 255;
!                     int j = (int)(f8 * 255.0F);
!                     int k = (int)(f9 * 255.0F);
!                     int l = (int)(f10 * 255.0F);
!                     this.lightmapColors[i] = short1 << 24 | j << 16 | k << 8 | l;
                  }
  
                  this.lightmapTexture.updateDynamicTexture();
***************
*** 1058,1064 ****
          }
      }
  
!     private float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
      {
          int i = entitylivingbaseIn.getActivePotionEffect(Potion.nightVision).getDuration();
          return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
--- 1241,1247 ----
          }
      }
  
!     public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
      {
          int i = entitylivingbaseIn.getActivePotionEffect(Potion.nightVision).getDuration();
          return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
***************
*** 1066,1071 ****
--- 1249,1255 ----
  
      public void func_181560_a(float p_181560_1_, long p_181560_2_)
      {
+         this.frameInit();
          boolean flag = Display.isActive();
  
          if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
***************
*** 1089,1106 ****
              Mouse.setGrabbed(true);
          }
  
!         if (this.mc.inGameHasFocus && flag)
          {
              this.mc.mouseHelper.mouseXYChange();
              float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
              float f1 = f * f * f * 8.0F;
              float f2 = (float)this.mc.mouseHelper.deltaX * f1;
              float f3 = (float)this.mc.mouseHelper.deltaY * f1;
!             int i = 1;
  
              if (this.mc.gameSettings.invertMouse)
              {
!                 i = -1;
              }
  
              if (this.mc.gameSettings.smoothCamera)
--- 1273,1290 ----
              Mouse.setGrabbed(true);
          }
  
!         if (this.mc.inGameHasFocus && flag && ModInstances.getModPerspective().overrideMouse())
          {
              this.mc.mouseHelper.mouseXYChange();
              float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
              float f1 = f * f * f * 8.0F;
              float f2 = (float)this.mc.mouseHelper.deltaX * f1;
              float f3 = (float)this.mc.mouseHelper.deltaY * f1;
!             byte b0 = 1;
  
              if (this.mc.gameSettings.invertMouse)
              {
!                 b0 = -1;
              }
  
              if (this.mc.gameSettings.smoothCamera)
***************
*** 1111,1123 ****
                  this.smoothCamPartialTicks = p_181560_1_;
                  f2 = this.smoothCamFilterX * f4;
                  f3 = this.smoothCamFilterY * f4;
!                 this.mc.thePlayer.setAngles(f2, f3 * (float)i);
              }
              else
              {
                  this.smoothCamYaw = 0.0F;
                  this.smoothCamPitch = 0.0F;
!                 this.mc.thePlayer.setAngles(f2, f3 * (float)i);
              }
          }
  
--- 1295,1307 ----
                  this.smoothCamPartialTicks = p_181560_1_;
                  f2 = this.smoothCamFilterX * f4;
                  f3 = this.smoothCamFilterY * f4;
!                 this.mc.thePlayer.setAngles(f2, f3 * (float)b0);
              }
              else
              {
                  this.smoothCamYaw = 0.0F;
                  this.smoothCamPitch = 0.0F;
!                 this.mc.thePlayer.setAngles(f2, f3 * (float)b0);
              }
          }
  
***************
*** 1127,1146 ****
          {
              anaglyphEnable = this.mc.gameSettings.anaglyph;
              final ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int i1 = scaledresolution.getScaledWidth();
!             int j1 = scaledresolution.getScaledHeight();
!             final int k1 = Mouse.getX() * i1 / this.mc.displayWidth;
!             final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
!             int i2 = this.mc.gameSettings.limitFramerate;
  
              if (this.mc.theWorld != null)
              {
                  this.mc.mcProfiler.startSection("level");
!                 int j = Math.min(Minecraft.getDebugFPS(), i2);
!                 j = Math.max(j, 60);
!                 long k = System.nanoTime() - p_181560_2_;
!                 long l = Math.max((long)(1000000000 / j / 4) - k, 0L);
!                 this.renderWorld(p_181560_1_, System.nanoTime() + l);
  
                  if (OpenGlHelper.shadersSupported)
                  {
--- 1311,1330 ----
          {
              anaglyphEnable = this.mc.gameSettings.anaglyph;
              final ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int l = scaledresolution.getScaledWidth();
!             int i1 = scaledresolution.getScaledHeight();
!             final int j1 = Mouse.getX() * l / this.mc.displayWidth;
!             final int k1 = i1 - Mouse.getY() * i1 / this.mc.displayHeight - 1;
!             int l1 = this.mc.gameSettings.limitFramerate;
  
              if (this.mc.theWorld != null)
              {
                  this.mc.mcProfiler.startSection("level");
!                 int i = Math.min(Minecraft.getDebugFPS(), l1);
!                 i = Math.max(i, 60);
!                 long j = System.nanoTime() - p_181560_2_;
!                 long k = Math.max((long)(1000000000 / i / 4) - j, 0L);
!                 this.renderWorld(p_181560_1_, System.nanoTime() + k);
  
                  if (OpenGlHelper.shadersSupported)
                  {
***************
*** 1165,1170 ****
--- 1349,1364 ----
                  {
                      GlStateManager.alphaFunc(516, 0.1F);
                      this.mc.ingameGUI.renderGameOverlay(p_181560_1_);
+ 
+                     if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugInfo)
+                     {
+                         Config.drawFps();
+                     }
+ 
+                     if (this.mc.gameSettings.showDebugInfo)
+                     {
+                         Lagometer.showLagometer(scaledresolution);
+                     }
                  }
  
                  this.mc.mcProfiler.endSection();
***************
*** 1178,1183 ****
--- 1372,1378 ----
                  GlStateManager.loadIdentity();
                  this.setupOverlayRendering();
                  this.renderEndNanoTime = System.nanoTime();
+                 TileEntityRendererDispatcher.instance.renderEngine = this.mc.getTextureManager();
              }
  
              if (this.mc.currentScreen != null)
***************
*** 1186,1213 ****
  
                  try
                  {
!                     this.mc.currentScreen.drawScreen(k1, l1, p_181560_1_);
                  }
                  catch (Throwable throwable)
                  {
                      CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
!                     crashreportcategory.addCrashSectionCallable("Screen name", new Callable<String>()
!                     {
!                         public String call() throws Exception
!                         {
!                             return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
!                         }
!                     });
!                     crashreportcategory.addCrashSectionCallable("Mouse location", new Callable<String>()
                      {
                          public String call() throws Exception
                          {
!                             return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(k1), Integer.valueOf(l1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
                          }
                      });
!                     crashreportcategory.addCrashSectionCallable("Screen size", new Callable<String>()
                      {
                          public String call() throws Exception
                          {
                              return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(scaledresolution.getScaledWidth()), Integer.valueOf(scaledresolution.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(scaledresolution.getScaleFactor())});
--- 1381,1411 ----
  
                  try
                  {
!                     if (Reflector.ForgeHooksClient_drawScreen.exists())
!                     {
!                         Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, new Object[] {this.mc.currentScreen, Integer.valueOf(j1), Integer.valueOf(k1), Float.valueOf(p_181560_1_)});
!                     }
!                     else
!                     {
!                         this.mc.currentScreen.drawScreen(j1, k1, p_181560_1_);
!                     }
                  }
                  catch (Throwable throwable)
                  {
                      CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
!                     crashreportcategory.addCrashSectionCallable("Screen name", new EntityRendererInternal2(this));
!                     crashreportcategory.addCrashSectionCallable("Mouse location", new Callable()
                      {
+                         private static final String __OBFID = "CL_00000950";
                          public String call() throws Exception
                          {
!                             return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(j1), Integer.valueOf(k1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
                          }
                      });
!                     crashreportcategory.addCrashSectionCallable("Screen size", new Callable()
                      {
+                         private static final String __OBFID = "CL_00000951";
                          public String call() throws Exception
                          {
                              return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(scaledresolution.getScaledWidth()), Integer.valueOf(scaledresolution.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(scaledresolution.getScaleFactor())});
***************
*** 1217,1222 ****
--- 1415,1431 ----
                  }
              }
          }
+         
+         new RenderEvent().call();
+         
+         this.frameFinish();
+         this.waitForServerThread();
+         Lagometer.updateLagometer();
+ 
+         if (this.mc.gameSettings.ofProfiler)
+         {
+             this.mc.gameSettings.showDebugProfilerChart = true;
+         }
      }
  
      public void renderStreamIndicator(float partialTicks)
***************
*** 1243,1253 ****
                  if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
                  {
                      BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
!                     Block block = this.mc.theWorld.getBlockState(blockpos).getBlock();
  
                      if (this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.SPECTATOR)
                      {
!                         flag = block.hasTileEntity() && this.mc.theWorld.getTileEntity(blockpos) instanceof IInventory;
                      }
                      else
                      {
--- 1452,1463 ----
                  if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
                  {
                      BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
!                     IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
!                     Block block = iblockstate.getBlock();
  
                      if (this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.SPECTATOR)
                      {
!                         flag = ReflectorForge.blockHasTileEntity(iblockstate) && this.mc.theWorld.getTileEntity(blockpos) instanceof IInventory;
                      }
                      else
                      {
***************
*** 1295,1303 ****
          }
  
          this.getMouseOver(partialTicks);
          GlStateManager.enableDepth();
          GlStateManager.enableAlpha();
!         GlStateManager.alphaFunc(516, 0.5F);
          this.mc.mcProfiler.startSection("center");
  
          if (this.mc.gameSettings.anaglyph)
--- 1505,1519 ----
          }
  
          this.getMouseOver(partialTicks);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginRender(this.mc, partialTicks, finishTimeNano);
+         }
+ 
          GlStateManager.enableDepth();
          GlStateManager.enableAlpha();
!         GlStateManager.alphaFunc(516, 0.1F);
          this.mc.mcProfiler.startSection("center");
  
          if (this.mc.gameSettings.anaglyph)
***************
*** 1320,1365 ****
  
      private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
      {
          RenderGlobal renderglobal = this.mc.renderGlobal;
          EffectRenderer effectrenderer = this.mc.effectRenderer;
!         boolean flag = this.isDrawBlockOutline();
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("clear");
!         GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
          this.updateFogColor(partialTicks);
          GlStateManager.clear(16640);
          this.mc.mcProfiler.endStartSection("camera");
          this.setupCameraTransform(partialTicks, pass);
          ActiveRenderInfo.updateRenderInfo(this.mc.thePlayer, this.mc.gameSettings.thirdPersonView == 2);
          this.mc.mcProfiler.endStartSection("frustum");
          ClippingHelperImpl.getInstance();
          this.mc.mcProfiler.endStartSection("culling");
!         ICamera icamera = new Frustum();
          Entity entity = this.mc.getRenderViewEntity();
          double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
          double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
          double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
-         icamera.setPosition(d0, d1, d2);
  
!         if (this.mc.gameSettings.renderDistanceChunks >= 4)
          {
              this.setupFog(-1, partialTicks);
              this.mc.mcProfiler.endStartSection("sky");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              renderglobal.renderSky(partialTicks, pass);
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
              GlStateManager.matrixMode(5888);
          }
  
          this.setupFog(0, partialTicks);
          GlStateManager.shadeModel(7425);
  
!         if (entity.posY + (double)entity.getEyeHeight() < 128.0D)
          {
              this.renderCloudsCheck(renderglobal, partialTicks, pass);
          }
--- 1536,1633 ----
  
      private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
      {
+         boolean flag = Config.isShaders();
+ 
+         if (flag)
+         {
+             Shaders.beginRenderPass(pass, partialTicks, finishTimeNano);
+         }
+ 
          RenderGlobal renderglobal = this.mc.renderGlobal;
          EffectRenderer effectrenderer = this.mc.effectRenderer;
!         boolean flag1 = this.isDrawBlockOutline();
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("clear");
! 
!         if (flag)
!         {
!             Shaders.setViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         }
!         else
!         {
!             GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         }
! 
          this.updateFogColor(partialTicks);
          GlStateManager.clear(16640);
+ 
+         if (flag)
+         {
+             Shaders.clearRenderBuffer();
+         }
+ 
          this.mc.mcProfiler.endStartSection("camera");
          this.setupCameraTransform(partialTicks, pass);
+ 
+         if (flag)
+         {
+             Shaders.setCamera(partialTicks);
+         }
+ 
          ActiveRenderInfo.updateRenderInfo(this.mc.thePlayer, this.mc.gameSettings.thirdPersonView == 2);
          this.mc.mcProfiler.endStartSection("frustum");
          ClippingHelperImpl.getInstance();
          this.mc.mcProfiler.endStartSection("culling");
!         Frustum frustum = new Frustum();
          Entity entity = this.mc.getRenderViewEntity();
          double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
          double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
          double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
  
!         if (flag)
!         {
!             ShadersRender.setFrustrumPosition(frustum, d0, d1, d2);
!         }
!         else
!         {
!             frustum.setPosition(d0, d1, d2);
!         }
! 
!         if ((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass)
          {
              this.setupFog(-1, partialTicks);
              this.mc.mcProfiler.endStartSection("sky");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
+ 
+             if (flag)
+             {
+                 Shaders.beginSky();
+             }
+ 
              renderglobal.renderSky(partialTicks, pass);
+ 
+             if (flag)
+             {
+                 Shaders.endSky();
+             }
+ 
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
          }
+         else
+         {
+             GlStateManager.disableBlend();
+         }
  
          this.setupFog(0, partialTicks);
          GlStateManager.shadeModel(7425);
  
!         if (entity.posY + (double)entity.getEyeHeight() < 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
          {
              this.renderCloudsCheck(renderglobal, partialTicks, pass);
          }
***************
*** 1369,1392 ****
          this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
          RenderHelper.disableStandardItemLighting();
          this.mc.mcProfiler.endStartSection("terrain_setup");
!         renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.thePlayer.isSpectator());
  
          if (pass == 0 || pass == 2)
          {
              this.mc.mcProfiler.endStartSection("updatechunks");
              this.mc.renderGlobal.updateChunks(finishTimeNano);
          }
  
          this.mc.mcProfiler.endStartSection("terrain");
          GlStateManager.matrixMode(5888);
          GlStateManager.pushMatrix();
          GlStateManager.disableAlpha();
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.SOLID, (double)partialTicks, pass, entity);
          GlStateManager.enableAlpha();
!         renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
!         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
          GlStateManager.shadeModel(7424);
          GlStateManager.alphaFunc(516, 0.1F);
  
--- 1637,1704 ----
          this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
          RenderHelper.disableStandardItemLighting();
          this.mc.mcProfiler.endStartSection("terrain_setup");
! 
!         if (flag)
!         {
!             ShadersRender.setupTerrain(renderglobal, entity, (double)partialTicks, frustum, this.frameCount++, this.mc.thePlayer.isSpectator());
!         }
!         else
!         {
!             renderglobal.setupTerrain(entity, (double)partialTicks, frustum, this.frameCount++, this.mc.thePlayer.isSpectator());
!         }
  
          if (pass == 0 || pass == 2)
          {
              this.mc.mcProfiler.endStartSection("updatechunks");
+             Lagometer.timerChunkUpload.start();
              this.mc.renderGlobal.updateChunks(finishTimeNano);
+             Lagometer.timerChunkUpload.end();
          }
  
          this.mc.mcProfiler.endStartSection("terrain");
+         Lagometer.timerTerrain.start();
+ 
+         if (this.mc.gameSettings.ofSmoothFps && pass > 0)
+         {
+             this.mc.mcProfiler.endStartSection("finish");
+             GL11.glFinish();
+             this.mc.mcProfiler.endStartSection("terrain");
+         }
+ 
          GlStateManager.matrixMode(5888);
          GlStateManager.pushMatrix();
          GlStateManager.disableAlpha();
+ 
+         if (flag)
+         {
+             ShadersRender.beginTerrainSolid();
+         }
+ 
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.SOLID, (double)partialTicks, pass, entity);
          GlStateManager.enableAlpha();
! 
!         if (flag)
!         {
!             ShadersRender.beginTerrainCutoutMipped();
!         }
! 
!         renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
!         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
! 
!         if (flag)
!         {
!             ShadersRender.beginTerrainCutout();
!         }
! 
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
+ 
+         if (flag)
+         {
+             ShadersRender.endTerrain();
+         }
+ 
+         Lagometer.timerTerrain.end();
          GlStateManager.shadeModel(7424);
          GlStateManager.alphaFunc(516, 0.1F);
  
***************
*** 1397,1415 ****
              GlStateManager.pushMatrix();
              RenderHelper.enableStandardItemLighting();
              this.mc.mcProfiler.endStartSection("entities");
!             renderglobal.renderEntities(entity, icamera, partialTicks);
              RenderHelper.disableStandardItemLighting();
              this.disableLightmap();
              GlStateManager.matrixMode(5888);
              GlStateManager.popMatrix();
              GlStateManager.pushMatrix();
  
!             if (this.mc.objectMouseOver != null && entity.isInsideOfMaterial(Material.water) && flag)
              {
                  EntityPlayer entityplayer = (EntityPlayer)entity;
                  GlStateManager.disableAlpha();
                  this.mc.mcProfiler.endStartSection("outline");
!                 renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
                  GlStateManager.enableAlpha();
              }
          }
--- 1709,1743 ----
              GlStateManager.pushMatrix();
              RenderHelper.enableStandardItemLighting();
              this.mc.mcProfiler.endStartSection("entities");
! 
!             if (Reflector.ForgeHooksClient_setRenderPass.exists())
!             {
!                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(0)});
!             }
! 
!             renderglobal.renderEntities(entity, frustum, partialTicks);
! 
!             if (Reflector.ForgeHooksClient_setRenderPass.exists())
!             {
!                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
!             }
! 
              RenderHelper.disableStandardItemLighting();
              this.disableLightmap();
              GlStateManager.matrixMode(5888);
              GlStateManager.popMatrix();
              GlStateManager.pushMatrix();
  
!             if (this.mc.objectMouseOver != null && entity.isInsideOfMaterial(Material.water) && flag1)
              {
                  EntityPlayer entityplayer = (EntityPlayer)entity;
                  GlStateManager.disableAlpha();
                  this.mc.mcProfiler.endStartSection("outline");
! 
!                 if ((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {renderglobal, entityplayer, this.mc.objectMouseOver, Integer.valueOf(0), entityplayer.getHeldItem(), Float.valueOf(partialTicks)})) && !this.mc.gameSettings.hideGUI)
!                 {
!                     renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
!                 }
                  GlStateManager.enableAlpha();
              }
          }
***************
*** 1417,1457 ****
          GlStateManager.matrixMode(5888);
          GlStateManager.popMatrix();
  
!         if (flag && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.water))
          {
              EntityPlayer entityplayer1 = (EntityPlayer)entity;
              GlStateManager.disableAlpha();
              this.mc.mcProfiler.endStartSection("outline");
!             renderglobal.drawSelectionBox(entityplayer1, this.mc.objectMouseOver, 0, partialTicks);
              GlStateManager.enableAlpha();
          }
  
!         this.mc.mcProfiler.endStartSection("destroyProgress");
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
!         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
!         renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getWorldRenderer(), entity, partialTicks);
!         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
          GlStateManager.disableBlend();
  
          if (!this.debugView)
          {
              this.enableLightmap();
              this.mc.mcProfiler.endStartSection("litParticles");
              effectrenderer.renderLitParticles(entity, partialTicks);
              RenderHelper.disableStandardItemLighting();
              this.setupFog(0, partialTicks);
              this.mc.mcProfiler.endStartSection("particles");
              effectrenderer.renderParticles(entity, partialTicks);
              this.disableLightmap();
          }
  
          GlStateManager.depthMask(false);
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("weather");
          this.renderRainSnow(partialTicks);
          GlStateManager.depthMask(true);
          renderglobal.renderWorldBorder(entity, partialTicks);
          GlStateManager.disableBlend();
          GlStateManager.enableCull();
          GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
--- 1745,1832 ----
          GlStateManager.matrixMode(5888);
          GlStateManager.popMatrix();
  
!         if (flag1 && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.water))
          {
              EntityPlayer entityplayer1 = (EntityPlayer)entity;
              GlStateManager.disableAlpha();
              this.mc.mcProfiler.endStartSection("outline");
! 
!             if ((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {renderglobal, entityplayer1, this.mc.objectMouseOver, Integer.valueOf(0), entityplayer1.getHeldItem(), Float.valueOf(partialTicks)})) && !this.mc.gameSettings.hideGUI)
!             {
!                 renderglobal.drawSelectionBox(entityplayer1, this.mc.objectMouseOver, 0, partialTicks);
!             }
              GlStateManager.enableAlpha();
          }
  
!         if (!renderglobal.damagedBlocks.isEmpty())
!         {
!             this.mc.mcProfiler.endStartSection("destroyProgress");
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
!             this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
!             renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getWorldRenderer(), entity, partialTicks);
!             this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
!             GlStateManager.disableBlend();
!         }
! 
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          GlStateManager.disableBlend();
  
          if (!this.debugView)
          {
              this.enableLightmap();
              this.mc.mcProfiler.endStartSection("litParticles");
+ 
+             if (flag)
+             {
+                 Shaders.beginLitParticles();
+             }
+ 
              effectrenderer.renderLitParticles(entity, partialTicks);
              RenderHelper.disableStandardItemLighting();
              this.setupFog(0, partialTicks);
              this.mc.mcProfiler.endStartSection("particles");
+ 
+             if (flag)
+             {
+                 Shaders.beginParticles();
+             }
+ 
              effectrenderer.renderParticles(entity, partialTicks);
+ 
+             if (flag)
+             {
+                 Shaders.endParticles();
+             }
+ 
              this.disableLightmap();
          }
  
          GlStateManager.depthMask(false);
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("weather");
+ 
+         if (flag)
+         {
+             Shaders.beginWeather();
+         }
+ 
          this.renderRainSnow(partialTicks);
+ 
+         if (flag)
+         {
+             Shaders.endWeather();
+         }
+ 
          GlStateManager.depthMask(true);
          renderglobal.renderWorldBorder(entity, partialTicks);
+ 
+         if (flag)
+         {
+             ShadersRender.renderHand0(this, partialTicks, pass);
+             Shaders.preWater();
+         }
+ 
          GlStateManager.disableBlend();
          GlStateManager.enableCull();
          GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
***************
*** 1462,1498 ****
          this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
          GlStateManager.shadeModel(7425);
          this.mc.mcProfiler.endStartSection("translucent");
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
          GlStateManager.shadeModel(7424);
          GlStateManager.depthMask(true);
          GlStateManager.enableCull();
          GlStateManager.disableBlend();
          GlStateManager.disableFog();
  
!         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D)
          {
              this.mc.mcProfiler.endStartSection("aboveClouds");
              this.renderCloudsCheck(renderglobal, partialTicks, pass);
          }
  
          this.mc.mcProfiler.endStartSection("hand");
  
!         if (this.renderHand)
          {
              GlStateManager.clear(256);
!             this.renderHand(partialTicks, pass);
              this.renderWorldDirections(partialTicks);
          }
      }
  
      private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass)
      {
!         if (this.mc.gameSettings.func_181147_e() != 0)
          {
              this.mc.mcProfiler.endStartSection("clouds");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 4.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.pushMatrix();
              this.setupFog(0, partialTicks);
--- 1837,1923 ----
          this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
          GlStateManager.shadeModel(7425);
          this.mc.mcProfiler.endStartSection("translucent");
+ 
+         if (flag)
+         {
+             Shaders.beginWater();
+         }
+ 
          renderglobal.renderBlockLayer(EnumWorldBlockLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
+ 
+         if (flag)
+         {
+             Shaders.endWater();
+         }
+ 
+         if (Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView)
+         {
+             RenderHelper.enableStandardItemLighting();
+             this.mc.mcProfiler.endStartSection("entities");
+             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
+             this.mc.renderGlobal.renderEntities(entity, frustum, partialTicks);
+             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
+             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
+             RenderHelper.disableStandardItemLighting();
+         }
+ 
          GlStateManager.shadeModel(7424);
          GlStateManager.depthMask(true);
          GlStateManager.enableCull();
          GlStateManager.disableBlend();
          GlStateManager.disableFog();
  
!         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
          {
              this.mc.mcProfiler.endStartSection("aboveClouds");
              this.renderCloudsCheck(renderglobal, partialTicks, pass);
          }
  
+         if (Reflector.ForgeHooksClient_dispatchRenderLast.exists())
+         {
+             this.mc.mcProfiler.endStartSection("forge_render_last");
+             Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[] {renderglobal, Float.valueOf(partialTicks)});
+         }
+ 
          this.mc.mcProfiler.endStartSection("hand");
+         boolean flag2 = ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, partialTicks, pass);
  
!         if (!flag2 && this.renderHand && !Shaders.isShadowPass)
          {
+             if (flag)
+             {
+                 ShadersRender.renderHand1(this, partialTicks, pass);
+                 Shaders.renderCompositeFinal();
+             }
+ 
              GlStateManager.clear(256);
! 
!             if (flag)
!             {
!                 ShadersRender.renderFPOverlay(this, partialTicks, pass);
!             }
!             else
!             {
!                 this.renderHand(partialTicks, pass);
!             }
! 
              this.renderWorldDirections(partialTicks);
          }
+ 
+         if (flag)
+         {
+             Shaders.endRender();
+         }
      }
  
      private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass)
      {
!         if (this.mc.gameSettings.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.mc.gameSettings))
          {
              this.mc.mcProfiler.endStartSection("clouds");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance * 4.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.pushMatrix();
              this.setupFog(0, partialTicks);
***************
*** 1501,1507 ****
              GlStateManager.popMatrix();
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
              GlStateManager.matrixMode(5888);
          }
      }
--- 1926,1932 ----
              GlStateManager.popMatrix();
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
          }
      }
***************
*** 1510,1550 ****
      {
          float f = this.mc.theWorld.getRainStrength(1.0F);
  
!         if (!this.mc.gameSettings.fancyGraphics)
          {
              f /= 2.0F;
          }
  
!         if (f != 0.0F)
          {
              this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
              Entity entity = this.mc.getRenderViewEntity();
!             World world = this.mc.theWorld;
              BlockPos blockpos = new BlockPos(entity);
!             int i = 10;
              double d0 = 0.0D;
              double d1 = 0.0D;
              double d2 = 0.0D;
!             int j = 0;
!             int k = (int)(100.0F * f * f);
  
              if (this.mc.gameSettings.particleSetting == 1)
              {
!                 k >>= 1;
              }
              else if (this.mc.gameSettings.particleSetting == 2)
              {
!                 k = 0;
              }
  
!             for (int l = 0; l < k; ++l)
              {
!                 BlockPos blockpos1 = world.getPrecipitationHeight(blockpos.add(this.random.nextInt(i) - this.random.nextInt(i), 0, this.random.nextInt(i) - this.random.nextInt(i)));
!                 BiomeGenBase biomegenbase = world.getBiomeGenForCoords(blockpos1);
                  BlockPos blockpos2 = blockpos1.down();
!                 Block block = world.getBlockState(blockpos2).getBlock();
  
!                 if (blockpos1.getY() <= blockpos.getY() + i && blockpos1.getY() >= blockpos.getY() - i && biomegenbase.canSpawnLightningBolt() && biomegenbase.getFloatTemperature(blockpos1) >= 0.15F)
                  {
                      double d3 = this.random.nextDouble();
                      double d4 = this.random.nextDouble();
--- 1935,1975 ----
      {
          float f = this.mc.theWorld.getRainStrength(1.0F);
  
!         if (!Config.isRainFancy())
          {
              f /= 2.0F;
          }
  
!         if (f != 0.0F && Config.isRainSplash())
          {
              this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
              Entity entity = this.mc.getRenderViewEntity();
!             WorldClient worldclient = this.mc.theWorld;
              BlockPos blockpos = new BlockPos(entity);
!             byte b0 = 10;
              double d0 = 0.0D;
              double d1 = 0.0D;
              double d2 = 0.0D;
!             int i = 0;
!             int j = (int)(100.0F * f * f);
  
              if (this.mc.gameSettings.particleSetting == 1)
              {
!                 j >>= 1;
              }
              else if (this.mc.gameSettings.particleSetting == 2)
              {
!                 j = 0;
              }
  
!             for (int k = 0; k < j; ++k)
              {
!                 BlockPos blockpos1 = worldclient.getPrecipitationHeight(blockpos.add(this.random.nextInt(b0) - this.random.nextInt(b0), 0, this.random.nextInt(b0) - this.random.nextInt(b0)));
!                 BiomeGenBase biomegenbase = worldclient.getBiomeGenForCoords(blockpos1);
                  BlockPos blockpos2 = blockpos1.down();
!                 Block block = worldclient.getBlockState(blockpos2).getBlock();
  
!                 if (blockpos1.getY() <= blockpos.getY() + b0 && blockpos1.getY() >= blockpos.getY() - b0 && biomegenbase.canSpawnLightningBolt() && biomegenbase.getFloatTemperature(blockpos1) >= 0.15F)
                  {
                      double d3 = this.random.nextDouble();
                      double d4 = this.random.nextDouble();
***************
*** 1555,1564 ****
                      }
                      else if (block.getMaterial() != Material.air)
                      {
!                         block.setBlockBoundsBasedOnState(world, blockpos2);
!                         ++j;
  
!                         if (this.random.nextInt(j) == 0)
                          {
                              d0 = (double)blockpos2.getX() + d3;
                              d1 = (double)((float)blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY() - 1.0D;
--- 1980,1989 ----
                      }
                      else if (block.getMaterial() != Material.air)
                      {
!                         block.setBlockBoundsBasedOnState(worldclient, blockpos2);
!                         ++i;
  
!                         if (this.random.nextInt(i) == 0)
                          {
                              d0 = (double)blockpos2.getX() + d3;
                              d1 = (double)((float)blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY() - 1.0D;
***************
*** 1570,1580 ****
                  }
              }
  
!             if (j > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
              {
                  this.rainSoundCounter = 0;
  
!                 if (d1 > (double)(blockpos.getY() + 1) && world.getPrecipitationHeight(blockpos).getY() > MathHelper.floor_float((float)blockpos.getY()))
                  {
                      this.mc.theWorld.playSound(d0, d1, d2, "ambient.weather.rain", 0.1F, 0.5F, false);
                  }
--- 1995,2005 ----
                  }
              }
  
!             if (i > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
              {
                  this.rainSoundCounter = 0;
  
!                 if (d1 > (double)(blockpos.getY() + 1) && worldclient.getPrecipitationHeight(blockpos).getY() > MathHelper.floor_float((float)blockpos.getY()))
                  {
                      this.mc.theWorld.playSound(d0, d1, d2, "ambient.weather.rain", 0.1F, 0.5F, false);
                  }
***************
*** 1591,1603 ****
       */
      protected void renderRainSnow(float partialTicks)
      {
!         float f = this.mc.theWorld.getRainStrength(partialTicks);
  
!         if (f > 0.0F)
          {
              this.enableLightmap();
              Entity entity = this.mc.getRenderViewEntity();
!             World world = this.mc.theWorld;
              int i = MathHelper.floor_double(entity.posX);
              int j = MathHelper.floor_double(entity.posY);
              int k = MathHelper.floor_double(entity.posZ);
--- 2016,2045 ----
       */
      protected void renderRainSnow(float partialTicks)
      {
!         if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
!         {
!             WorldProvider worldprovider = this.mc.theWorld.provider;
!             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getWeatherRenderer, new Object[0]);
! 
!             if (object != null)
!             {
!                 Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(partialTicks), this.mc.theWorld, this.mc});
!                 return;
!             }
!         }
  
!         float f5 = this.mc.theWorld.getRainStrength(partialTicks);
! 
!         if (f5 > 0.0F)
          {
+             if (Config.isRainOff())
+             {
+                 return;
+             }
+ 
              this.enableLightmap();
              Entity entity = this.mc.getRenderViewEntity();
!             WorldClient worldclient = this.mc.theWorld;
              int i = MathHelper.floor_double(entity.posX);
              int j = MathHelper.floor_double(entity.posY);
              int k = MathHelper.floor_double(entity.posZ);
***************
*** 1612,1733 ****
              double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
              double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
              int l = MathHelper.floor_double(d1);
!             int i1 = 5;
  
!             if (this.mc.gameSettings.fancyGraphics)
              {
!                 i1 = 10;
              }
  
!             int j1 = -1;
!             float f1 = (float)this.rendererUpdateCount + partialTicks;
              worldrenderer.setTranslation(-d0, -d1, -d2);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
  
!             for (int k1 = k - i1; k1 <= k + i1; ++k1)
              {
!                 for (int l1 = i - i1; l1 <= i + i1; ++l1)
                  {
!                     int i2 = (k1 - k + 16) * 32 + l1 - i + 16;
!                     double d3 = (double)this.rainXCoords[i2] * 0.5D;
!                     double d4 = (double)this.rainYCoords[i2] * 0.5D;
!                     blockpos$mutableblockpos.func_181079_c(l1, 0, k1);
!                     BiomeGenBase biomegenbase = world.getBiomeGenForCoords(blockpos$mutableblockpos);
  
                      if (biomegenbase.canSpawnLightningBolt() || biomegenbase.getEnableSnow())
                      {
!                         int j2 = world.getPrecipitationHeight(blockpos$mutableblockpos).getY();
!                         int k2 = j - i1;
!                         int l2 = j + i1;
  
!                         if (k2 < j2)
                          {
!                             k2 = j2;
                          }
  
!                         if (l2 < j2)
                          {
!                             l2 = j2;
                          }
  
!                         int i3 = j2;
  
!                         if (j2 < l)
                          {
!                             i3 = l;
                          }
  
!                         if (k2 != l2)
                          {
!                             this.random.setSeed((long)(l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
!                             blockpos$mutableblockpos.func_181079_c(l1, k2, k1);
!                             float f2 = biomegenbase.getFloatTemperature(blockpos$mutableblockpos);
  
!                             if (world.getWorldChunkManager().getTemperatureAtHeight(f2, j2) >= 0.15F)
                              {
!                                 if (j1 != 0)
                                  {
!                                     if (j1 >= 0)
                                      {
                                          tessellator.draw();
                                      }
  
!                                     j1 = 0;
                                      this.mc.getTextureManager().bindTexture(locationRainPng);
                                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                  }
  
!                                 double d5 = ((double)(this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
!                                 double d6 = (double)((float)l1 + 0.5F) - entity.posX;
!                                 double d7 = (double)((float)k1 + 0.5F) - entity.posZ;
!                                 float f3 = MathHelper.sqrt_double(d6 * d6 + d7 * d7) / (float)i1;
!                                 float f4 = ((1.0F - f3 * f3) * 0.5F + 0.5F) * f;
!                                 blockpos$mutableblockpos.func_181079_c(l1, i3, k1);
!                                 int j3 = world.getCombinedLight(blockpos$mutableblockpos, 0);
!                                 int k3 = j3 >> 16 & 65535;
!                                 int l3 = j3 & 65535;
!                                 worldrenderer.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 worldrenderer.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 worldrenderer.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 worldrenderer.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
                              }
                              else
                              {
!                                 if (j1 != 1)
                                  {
!                                     if (j1 >= 0)
                                      {
                                          tessellator.draw();
                                      }
  
!                                     j1 = 1;
                                      this.mc.getTextureManager().bindTexture(locationSnowPng);
                                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                  }
  
                                  double d8 = (double)(((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
!                                 double d9 = this.random.nextDouble() + (double)f1 * 0.01D * (double)((float)this.random.nextGaussian());
!                                 double d10 = this.random.nextDouble() + (double)(f1 * (float)this.random.nextGaussian()) * 0.001D;
!                                 double d11 = (double)((float)l1 + 0.5F) - entity.posX;
!                                 double d12 = (double)((float)k1 + 0.5F) - entity.posZ;
!                                 float f6 = MathHelper.sqrt_double(d11 * d11 + d12 * d12) / (float)i1;
!                                 float f5 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f;
!                                 blockpos$mutableblockpos.func_181079_c(l1, i3, k1);
!                                 int i4 = (world.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
!                                 int j4 = i4 >> 16 & 65535;
!                                 int k4 = i4 & 65535;
!                                 worldrenderer.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 worldrenderer.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 worldrenderer.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 worldrenderer.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
                              }
                          }
                      }
                  }
              }
  
!             if (j1 >= 0)
              {
                  tessellator.draw();
              }
--- 2054,2181 ----
              double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
              double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
              int l = MathHelper.floor_double(d1);
!             byte b0 = 5;
  
!             if (Config.isRainFancy())
              {
!                 b0 = 10;
              }
  
!             byte b1 = -1;
!             float f = (float)this.rendererUpdateCount + partialTicks;
              worldrenderer.setTranslation(-d0, -d1, -d2);
+ 
+             if (Config.isRainFancy())
+             {
+                 b0 = 10;
+             }
+ 
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
  
!             for (int i1 = k - b0; i1 <= k + b0; ++i1)
              {
!                 for (int j1 = i - b0; j1 <= i + b0; ++j1)
                  {
!                     int k1 = (i1 - k + 16) * 32 + j1 - i + 16;
!                     double d3 = (double)this.rainXCoords[k1] * 0.5D;
!                     double d4 = (double)this.rainYCoords[k1] * 0.5D;
!                     blockpos$mutableblockpos.func_181079_c(j1, 0, i1);
!                     BiomeGenBase biomegenbase = worldclient.getBiomeGenForCoords(blockpos$mutableblockpos);
  
                      if (biomegenbase.canSpawnLightningBolt() || biomegenbase.getEnableSnow())
                      {
!                         int l1 = worldclient.getPrecipitationHeight(blockpos$mutableblockpos).getY();
!                         int i2 = j - b0;
!                         int j2 = j + b0;
  
!                         if (i2 < l1)
                          {
!                             i2 = l1;
                          }
  
!                         if (j2 < l1)
                          {
!                             j2 = l1;
                          }
  
!                         int k2 = l1;
  
!                         if (l1 < l)
                          {
!                             k2 = l;
                          }
  
!                         if (i2 != j2)
                          {
!                             this.random.setSeed((long)(j1 * j1 * 3121 + j1 * 45238971 ^ i1 * i1 * 418711 + i1 * 13761));
!                             blockpos$mutableblockpos.func_181079_c(j1, i2, i1);
!                             float f1 = biomegenbase.getFloatTemperature(blockpos$mutableblockpos);
  
!                             if (worldclient.getWorldChunkManager().getTemperatureAtHeight(f1, l1) >= 0.15F)
                              {
!                                 if (b1 != 0)
                                  {
!                                     if (b1 >= 0)
                                      {
                                          tessellator.draw();
                                      }
  
!                                     b1 = 0;
                                      this.mc.getTextureManager().bindTexture(locationRainPng);
                                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                  }
  
!                                 double d5 = ((double)(this.rendererUpdateCount + j1 * j1 * 3121 + j1 * 45238971 + i1 * i1 * 418711 + i1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
!                                 double d6 = (double)((float)j1 + 0.5F) - entity.posX;
!                                 double d7 = (double)((float)i1 + 0.5F) - entity.posZ;
!                                 float f2 = MathHelper.sqrt_double(d6 * d6 + d7 * d7) / (float)b0;
!                                 float f3 = ((1.0F - f2 * f2) * 0.5F + 0.5F) * f5;
!                                 blockpos$mutableblockpos.func_181079_c(j1, k2, i1);
!                                 int l2 = worldclient.getCombinedLight(blockpos$mutableblockpos, 0);
!                                 int i3 = l2 >> 16 & 65535;
!                                 int j3 = l2 & 65535;
!                                 worldrenderer.pos((double)j1 - d3 + 0.5D, (double)i2, (double)i1 - d4 + 0.5D).tex(0.0D, (double)i2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(i3, j3).endVertex();
!                                 worldrenderer.pos((double)j1 + d3 + 0.5D, (double)i2, (double)i1 + d4 + 0.5D).tex(1.0D, (double)i2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(i3, j3).endVertex();
!                                 worldrenderer.pos((double)j1 + d3 + 0.5D, (double)j2, (double)i1 + d4 + 0.5D).tex(1.0D, (double)j2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(i3, j3).endVertex();
!                                 worldrenderer.pos((double)j1 - d3 + 0.5D, (double)j2, (double)i1 - d4 + 0.5D).tex(0.0D, (double)j2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(i3, j3).endVertex();
                              }
                              else
                              {
!                                 if (b1 != 1)
                                  {
!                                     if (b1 >= 0)
                                      {
                                          tessellator.draw();
                                      }
  
!                                     b1 = 1;
                                      this.mc.getTextureManager().bindTexture(locationSnowPng);
                                      worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                  }
  
                                  double d8 = (double)(((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
!                                 double d9 = this.random.nextDouble() + (double)f * 0.01D * (double)((float)this.random.nextGaussian());
!                                 double d10 = this.random.nextDouble() + (double)(f * (float)this.random.nextGaussian()) * 0.001D;
!                                 double d11 = (double)((float)j1 + 0.5F) - entity.posX;
!                                 double d12 = (double)((float)i1 + 0.5F) - entity.posZ;
!                                 float f6 = MathHelper.sqrt_double(d11 * d11 + d12 * d12) / (float)b0;
!                                 float f4 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f5;
!                                 blockpos$mutableblockpos.func_181079_c(j1, k2, i1);
!                                 int k3 = (worldclient.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
!                                 int l3 = k3 >> 16 & 65535;
!                                 int i4 = k3 & 65535;
!                                 worldrenderer.pos((double)j1 - d3 + 0.5D, (double)i2, (double)i1 - d4 + 0.5D).tex(0.0D + d9, (double)i2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(l3, i4).endVertex();
!                                 worldrenderer.pos((double)j1 + d3 + 0.5D, (double)i2, (double)i1 + d4 + 0.5D).tex(1.0D + d9, (double)i2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(l3, i4).endVertex();
!                                 worldrenderer.pos((double)j1 + d3 + 0.5D, (double)j2, (double)i1 + d4 + 0.5D).tex(1.0D + d9, (double)j2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(l3, i4).endVertex();
!                                 worldrenderer.pos((double)j1 - d3 + 0.5D, (double)j2, (double)i1 - d4 + 0.5D).tex(0.0D + d9, (double)j2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(l3, i4).endVertex();
                              }
                          }
                      }
                  }
              }
  
!             if (b1 >= 0)
              {
                  tessellator.draw();
              }
***************
*** 1760,1774 ****
       */
      private void updateFogColor(float partialTicks)
      {
!         World world = this.mc.theWorld;
          Entity entity = this.mc.getRenderViewEntity();
          float f = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
          f = 1.0F - (float)Math.pow((double)f, 0.25D);
!         Vec3 vec3 = world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
          float f1 = (float)vec3.xCoord;
          float f2 = (float)vec3.yCoord;
          float f3 = (float)vec3.zCoord;
!         Vec3 vec31 = world.getFogColor(partialTicks);
          this.fogColorRed = (float)vec31.xCoord;
          this.fogColorGreen = (float)vec31.yCoord;
          this.fogColorBlue = (float)vec31.zCoord;
--- 2208,2224 ----
       */
      private void updateFogColor(float partialTicks)
      {
!         WorldClient worldclient = this.mc.theWorld;
          Entity entity = this.mc.getRenderViewEntity();
          float f = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
          f = 1.0F - (float)Math.pow((double)f, 0.25D);
!         Vec3 vec3 = worldclient.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
!         vec3 = CustomColors.getWorldSkyColor(vec3, worldclient, this.mc.getRenderViewEntity(), partialTicks);
          float f1 = (float)vec3.xCoord;
          float f2 = (float)vec3.yCoord;
          float f3 = (float)vec3.zCoord;
!         Vec3 vec31 = worldclient.getFogColor(partialTicks);
!         vec31 = CustomColors.getWorldFogColor(vec31, worldclient, this.mc.getRenderViewEntity(), partialTicks);
          this.fogColorRed = (float)vec31.xCoord;
          this.fogColorGreen = (float)vec31.yCoord;
          this.fogColorBlue = (float)vec31.zCoord;
***************
*** 1776,1799 ****
          if (this.mc.gameSettings.renderDistanceChunks >= 4)
          {
              double d0 = -1.0D;
!             Vec3 vec32 = MathHelper.sin(world.getCelestialAngleRadians(partialTicks)) > 0.0F ? new Vec3(d0, 0.0D, 0.0D) : new Vec3(1.0D, 0.0D, 0.0D);
!             float f5 = (float)entity.getLook(partialTicks).dotProduct(vec32);
  
!             if (f5 < 0.0F)
              {
!                 f5 = 0.0F;
              }
  
!             if (f5 > 0.0F)
              {
!                 float[] afloat = world.provider.calcSunriseSunsetColors(world.getCelestialAngle(partialTicks), partialTicks);
  
                  if (afloat != null)
                  {
!                     f5 = f5 * afloat[3];
!                     this.fogColorRed = this.fogColorRed * (1.0F - f5) + afloat[0] * f5;
!                     this.fogColorGreen = this.fogColorGreen * (1.0F - f5) + afloat[1] * f5;
!                     this.fogColorBlue = this.fogColorBlue * (1.0F - f5) + afloat[2] * f5;
                  }
              }
          }
--- 2226,2249 ----
          if (this.mc.gameSettings.renderDistanceChunks >= 4)
          {
              double d0 = -1.0D;
!             Vec3 vec32 = MathHelper.sin(worldclient.getCelestialAngleRadians(partialTicks)) > 0.0F ? new Vec3(d0, 0.0D, 0.0D) : new Vec3(1.0D, 0.0D, 0.0D);
!             float f4 = (float)entity.getLook(partialTicks).dotProduct(vec32);
  
!             if (f4 < 0.0F)
              {
!                 f4 = 0.0F;
              }
  
!             if (f4 > 0.0F)
              {
!                 float[] afloat = worldclient.provider.calcSunriseSunsetColors(worldclient.getCelestialAngle(partialTicks), partialTicks);
  
                  if (afloat != null)
                  {
!                     f4 = f4 * afloat[3];
!                     this.fogColorRed = this.fogColorRed * (1.0F - f4) + afloat[0] * f4;
!                     this.fogColorGreen = this.fogColorGreen * (1.0F - f4) + afloat[1] * f4;
!                     this.fogColorBlue = this.fogColorBlue * (1.0F - f4) + afloat[2] * f4;
                  }
              }
          }
***************
*** 1801,1848 ****
          this.fogColorRed += (f1 - this.fogColorRed) * f;
          this.fogColorGreen += (f2 - this.fogColorGreen) * f;
          this.fogColorBlue += (f3 - this.fogColorBlue) * f;
!         float f8 = world.getRainStrength(partialTicks);
  
!         if (f8 > 0.0F)
          {
!             float f4 = 1.0F - f8 * 0.5F;
!             float f10 = 1.0F - f8 * 0.4F;
!             this.fogColorRed *= f4;
!             this.fogColorGreen *= f4;
!             this.fogColorBlue *= f10;
          }
  
!         float f9 = world.getThunderStrength(partialTicks);
  
!         if (f9 > 0.0F)
          {
!             float f11 = 1.0F - f9 * 0.5F;
!             this.fogColorRed *= f11;
!             this.fogColorGreen *= f11;
!             this.fogColorBlue *= f11;
          }
  
          Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
  
          if (this.cloudFog)
          {
!             Vec3 vec33 = world.getCloudColour(partialTicks);
              this.fogColorRed = (float)vec33.xCoord;
              this.fogColorGreen = (float)vec33.yCoord;
              this.fogColorBlue = (float)vec33.zCoord;
          }
          else if (block.getMaterial() == Material.water)
          {
!             float f12 = (float)EnchantmentHelper.getRespiration(entity) * 0.2F;
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
              {
!                 f12 = f12 * 0.3F + 0.6F;
              }
  
!             this.fogColorRed = 0.02F + f12;
!             this.fogColorGreen = 0.02F + f12;
!             this.fogColorBlue = 0.2F + f12;
          }
          else if (block.getMaterial() == Material.lava)
          {
--- 2251,2306 ----
          this.fogColorRed += (f1 - this.fogColorRed) * f;
          this.fogColorGreen += (f2 - this.fogColorGreen) * f;
          this.fogColorBlue += (f3 - this.fogColorBlue) * f;
!         float f10 = worldclient.getRainStrength(partialTicks);
  
!         if (f10 > 0.0F)
          {
!             float f5 = 1.0F - f10 * 0.5F;
!             float f12 = 1.0F - f10 * 0.4F;
!             this.fogColorRed *= f5;
!             this.fogColorGreen *= f5;
!             this.fogColorBlue *= f12;
          }
  
!         float f11 = worldclient.getThunderStrength(partialTicks);
  
!         if (f11 > 0.0F)
          {
!             float f13 = 1.0F - f11 * 0.5F;
!             this.fogColorRed *= f13;
!             this.fogColorGreen *= f13;
!             this.fogColorBlue *= f13;
          }
  
          Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
  
          if (this.cloudFog)
          {
!             Vec3 vec33 = worldclient.getCloudColour(partialTicks);
              this.fogColorRed = (float)vec33.xCoord;
              this.fogColorGreen = (float)vec33.yCoord;
              this.fogColorBlue = (float)vec33.zCoord;
          }
          else if (block.getMaterial() == Material.water)
          {
!             float f8 = (float)EnchantmentHelper.getRespiration(entity) * 0.2F;
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
              {
!                 f8 = f8 * 0.3F + 0.6F;
              }
  
!             this.fogColorRed = 0.02F + f8;
!             this.fogColorGreen = 0.02F + f8;
!             this.fogColorBlue = 0.2F + f8;
!             Vec3 vec34 = CustomColors.getUnderwaterColor(this.mc.theWorld, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
! 
!             if (vec34 != null)
!             {
!                 this.fogColorRed = (float)vec34.xCoord;
!                 this.fogColorGreen = (float)vec34.yCoord;
!                 this.fogColorBlue = (float)vec34.zCoord;
!             }
          }
          else if (block.getMaterial() == Material.lava)
          {
***************
*** 1851,1861 ****
              this.fogColorBlue = 0.0F;
          }
  
!         float f13 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * partialTicks;
!         this.fogColorRed *= f13;
!         this.fogColorGreen *= f13;
!         this.fogColorBlue *= f13;
!         double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks) * world.provider.getVoidFogYFactor();
  
          if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
          {
--- 2309,2320 ----
              this.fogColorBlue = 0.0F;
          }
  
!         float f9 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * partialTicks;
!         this.fogColorRed *= f9;
!         this.fogColorGreen *= f9;
!         this.fogColorBlue *= f9;
!         double d2 = worldclient.provider.getVoidFogYFactor();
!         double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks) * d2;
  
          if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
          {
***************
*** 1922,1928 ****
              this.fogColorBlue = f7;
          }
  
!         GlStateManager.clearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
      }
  
      /**
--- 2381,2396 ----
              this.fogColorBlue = f7;
          }
  
!         if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
!         {
!             Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[] {this, entity, block, Float.valueOf(partialTicks), Float.valueOf(this.fogColorRed), Float.valueOf(this.fogColorGreen), Float.valueOf(this.fogColorBlue)});
!             Reflector.postForgeBusEvent(object);
!             this.fogColorRed = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_red, this.fogColorRed);
!             this.fogColorGreen = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_green, this.fogColorGreen);
!             this.fogColorBlue = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_blue, this.fogColorBlue);
!         }
! 
!         Shaders.setClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
      }
  
      /**
***************
*** 1933,1938 ****
--- 2401,2407 ----
      {
          Entity entity = this.mc.getRenderViewEntity();
          boolean flag = false;
+         this.fogStandard = false;
  
          if (entity instanceof EntityPlayer)
          {
***************
*** 1943,1985 ****
          GL11.glNormal3f(0.0F, -1.0F, 0.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
  
!         if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
          {
!             float f1 = 5.0F;
              int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.blindness).getDuration();
  
              if (i < 20)
              {
!                 f1 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
              }
  
!             GlStateManager.setFog(9729);
  
              if (p_78468_1_ == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f1 * 0.8F);
              }
              else
              {
!                 GlStateManager.setFogStart(f1 * 0.25F);
!                 GlStateManager.setFogEnd(f1);
              }
  
!             if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
                  GL11.glFogi(34138, 34139);
              }
          }
          else if (this.cloudFog)
          {
!             GlStateManager.setFog(2048);
              GlStateManager.setFogDensity(0.1F);
          }
          else if (block.getMaterial() == Material.water)
          {
!             GlStateManager.setFog(2048);
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
              {
--- 2412,2486 ----
          GL11.glNormal3f(0.0F, -1.0F, 0.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
+         float f1 = -1.0F;
  
!         if (Reflector.ForgeHooksClient_getFogDensity.exists())
!         {
!             f1 = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, new Object[] {this, entity, block, Float.valueOf(partialTicks), Float.valueOf(0.1F)});
!         }
! 
!         if (f1 >= 0.0F)
!         {
!             GlStateManager.setFogDensity(f1);
!         }
!         else if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
          {
!             float f2 = 5.0F;
              int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.blindness).getDuration();
  
              if (i < 20)
              {
!                 f2 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
              }
  
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(9729);
!             }
!             else
!             {
!                 GlStateManager.setFog(9729);
!             }
  
              if (p_78468_1_ == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f2 * 0.8F);
              }
              else
              {
!                 GlStateManager.setFogStart(f2 * 0.25F);
!                 GlStateManager.setFogEnd(f2);
              }
  
!             if (GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy())
              {
                  GL11.glFogi(34138, 34139);
              }
          }
          else if (this.cloudFog)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(2048);
!             }
!             else
!             {
!                 GlStateManager.setFog(2048);
!             }
! 
              GlStateManager.setFogDensity(0.1F);
          }
          else if (block.getMaterial() == Material.water)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(2048);
!             }
!             else
!             {
!                 GlStateManager.setFog(2048);
!             }
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
              {
***************
*** 1989,2004 ****
              {
                  GlStateManager.setFogDensity(0.1F - (float)EnchantmentHelper.getRespiration(entity) * 0.03F);
              }
          }
          else if (block.getMaterial() == Material.lava)
          {
!             GlStateManager.setFog(2048);
              GlStateManager.setFogDensity(2.0F);
          }
          else
          {
              float f = this.farPlaneDistance;
!             GlStateManager.setFog(9729);
  
              if (p_78468_1_ == -1)
              {
--- 2490,2527 ----
              {
                  GlStateManager.setFogDensity(0.1F - (float)EnchantmentHelper.getRespiration(entity) * 0.03F);
              }
+ 
+             if (Config.isClearWater())
+             {
+                 GlStateManager.setFogDensity(0.02F);
+             }
          }
          else if (block.getMaterial() == Material.lava)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(2048);
!             }
!             else
!             {
!                 GlStateManager.setFog(2048);
!             }
! 
              GlStateManager.setFogDensity(2.0F);
          }
          else
          {
              float f = this.farPlaneDistance;
!             this.fogStandard = true;
! 
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(9729);
!             }
!             else
!             {
!                 GlStateManager.setFog(9729);
!             }
  
              if (p_78468_1_ == -1)
              {
***************
*** 2007,2025 ****
              }
              else
              {
!                 GlStateManager.setFogStart(f * 0.75F);
                  GlStateManager.setFogEnd(f);
              }
  
              if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
!                 GL11.glFogi(34138, 34139);
              }
  
              if (this.mc.theWorld.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ))
              {
                  GlStateManager.setFogStart(f * 0.05F);
!                 GlStateManager.setFogEnd(Math.min(f, 192.0F) * 0.5F);
              }
          }
  
--- 2530,2561 ----
              }
              else
              {
!                 GlStateManager.setFogStart(f * Config.getFogStart());
                  GlStateManager.setFogEnd(f);
              }
  
              if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
!                 if (Config.isFogFancy())
!                 {
!                     GL11.glFogi(34138, 34139);
!                 }
! 
!                 if (Config.isFogFast())
!                 {
!                     GL11.glFogi(34138, 34140);
!                 }
              }
  
              if (this.mc.theWorld.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ))
              {
                  GlStateManager.setFogStart(f * 0.05F);
!                 GlStateManager.setFogEnd(f);
!             }
! 
!             if (Reflector.ForgeHooksClient_onFogRender.exists())
!             {
!                 Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, new Object[] {this, entity, block, Float.valueOf(partialTicks), Integer.valueOf(p_78468_1_), Float.valueOf(f)});
              }
          }
  
***************
*** 2033,2038 ****
--- 2569,2579 ----
       */
      private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha)
      {
+         if (Config.isShaders())
+         {
+             Shaders.setFogColor(red, green, blue);
+         }
+ 
          this.fogColorBuffer.clear();
          this.fogColorBuffer.put(red).put(green).put(blue).put(alpha);
          this.fogColorBuffer.flip();
***************
*** 2043,2046 ****
--- 2584,2871 ----
      {
          return this.theMapItemRenderer;
      }
+ 
+     private void waitForServerThread()
+     {
+         this.serverWaitTimeCurrent = 0;
+ 
+         if (Config.isSmoothWorld() && Config.isSingleProcessor())
+         {
+             if (this.mc.isIntegratedServerRunning())
+             {
+                 IntegratedServer integratedserver = this.mc.getIntegratedServer();
+ 
+                 if (integratedserver != null)
+                 {
+                     boolean flag = this.mc.isGamePaused();
+ 
+                     if (!flag && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
+                     {
+                         if (this.serverWaitTime > 0)
+                         {
+                             Lagometer.timerServer.start();
+                             Config.sleep((long)this.serverWaitTime);
+                             Lagometer.timerServer.end();
+                             this.serverWaitTimeCurrent = this.serverWaitTime;
+                         }
+ 
+                         long i = System.nanoTime() / 1000000L;
+ 
+                         if (this.lastServerTime != 0L && this.lastServerTicks != 0)
+                         {
+                             long j = i - this.lastServerTime;
+ 
+                             if (j < 0L)
+                             {
+                                 this.lastServerTime = i;
+                                 j = 0L;
+                             }
+ 
+                             if (j >= 50L)
+                             {
+                                 this.lastServerTime = i;
+                                 int k = integratedserver.getTickCounter();
+                                 int l = k - this.lastServerTicks;
+ 
+                                 if (l < 0)
+                                 {
+                                     this.lastServerTicks = k;
+                                     l = 0;
+                                 }
+ 
+                                 if (l < 1 && this.serverWaitTime < 100)
+                                 {
+                                     this.serverWaitTime += 2;
+                                 }
+ 
+                                 if (l > 1 && this.serverWaitTime > 0)
+                                 {
+                                     --this.serverWaitTime;
+                                 }
+ 
+                                 this.lastServerTicks = k;
+                             }
+                         }
+                         else
+                         {
+                             this.lastServerTime = i;
+                             this.lastServerTicks = integratedserver.getTickCounter();
+                             this.avgServerTickDiff = 1.0F;
+                             this.avgServerTimeDiff = 50.0F;
+                         }
+                     }
+                     else
+                     {
+                         if (this.mc.currentScreen instanceof GuiDownloadTerrain)
+                         {
+                             Config.sleep(20L);
+                         }
+ 
+                         this.lastServerTime = 0L;
+                         this.lastServerTicks = 0;
+                     }
+                 }
+             }
+         }
+         else
+         {
+             this.lastServerTime = 0L;
+             this.lastServerTicks = 0;
+         }
+     }
+ 
+     private void frameInit()
+     {
+         if (!this.initialized)
+         {
+             TextureUtils.registerResourceListener();
+ 
+             if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
+             {
+                 Config.setNotify64BitJava(true);
+             }
+ 
+             this.initialized = true;
+         }
+ 
+         Config.checkDisplayMode();
+         World world = this.mc.theWorld;
+ 
+         if (world != null)
+         {
+             if (Config.getNewRelease() != null)
+             {
+                 String s = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
+                 String s1 = s + " " + Config.getNewRelease();
+                 ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.newVersion", new Object[] {s1}));
+                 this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
+                 Config.setNewRelease((String)null);
+             }
+ 
+             if (Config.isNotify64BitJava())
+             {
+                 Config.setNotify64BitJava(false);
+                 ChatComponentText chatcomponenttext1 = new ChatComponentText(I18n.format("of.message.java64Bit", new Object[0]));
+                 this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext1);
+             }
+         }
+ 
+         if (this.mc.currentScreen instanceof GuiMainMenu)
+         {
+             this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
+         }
+ 
+         if (this.updatedWorld != world)
+         {
+             RandomMobs.worldChanged(this.updatedWorld, world);
+             Config.updateThreadPriorities();
+             this.lastServerTime = 0L;
+             this.lastServerTicks = 0;
+             this.updatedWorld = world;
+         }
+ 
+         if (!this.setFxaaShader(Shaders.configAntialiasingLevel))
+         {
+             Shaders.configAntialiasingLevel = 0;
+         }
+     }
+ 
+     private void frameFinish()
+     {
+         if (this.mc.theWorld != null)
+         {
+             long i = System.currentTimeMillis();
+ 
+             if (i > this.lastErrorCheckTimeMs + 10000L)
+             {
+                 this.lastErrorCheckTimeMs = i;
+                 int j = GL11.glGetError();
+ 
+                 if (j != 0)
+                 {
+                     String s = GLU.gluErrorString(j);
+                     ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.openglError", new Object[] {Integer.valueOf(j), s}));
+                     this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
+                 }
+             }
+         }
+     }
+ 
+     private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_)
+     {
+         try
+         {
+             String s = null;
+             Calendar calendar = Calendar.getInstance();
+             calendar.setTime(new Date());
+             int i = calendar.get(5);
+             int j = calendar.get(2) + 1;
+ 
+             if (i == 8 && j == 4)
+             {
+                 s = "Happy birthday, OptiFine!";
+             }
+ 
+             if (i == 14 && j == 8)
+             {
+                 s = "Happy birthday, sp614x!";
+             }
+ 
+             if (s == null)
+             {
+                 return;
+             }
+ 
+             Field[] afield = GuiMainMenu.class.getDeclaredFields();
+ 
+             for (int k = 0; k < afield.length; ++k)
+             {
+                 if (afield[k].getType() == String.class)
+                 {
+                     afield[k].setAccessible(true);
+                     afield[k].set(p_updateMainMenu_1_, s);
+                     break;
+                 }
+             }
+         }
+         catch (Throwable var8)
+         {
+             ;
+         }
+     }
+ 
+     public boolean setFxaaShader(int p_setFxaaShader_1_)
+     {
+         if (!OpenGlHelper.isFramebufferEnabled())
+         {
+             return false;
+         }
+         else if (this.theShaderGroup != null && this.theShaderGroup != this.fxaaShaders[2] && this.theShaderGroup != this.fxaaShaders[4])
+         {
+             return true;
+         }
+         else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4)
+         {
+             if (this.theShaderGroup == null)
+             {
+                 return true;
+             }
+             else
+             {
+                 this.theShaderGroup.deleteShaderGroup();
+                 this.theShaderGroup = null;
+                 return true;
+             }
+         }
+         else if (this.theShaderGroup != null && this.theShaderGroup == this.fxaaShaders[p_setFxaaShader_1_])
+         {
+             return true;
+         }
+         else if (this.mc.theWorld == null)
+         {
+             return true;
+         }
+         else
+         {
+             this.loadShader(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
+             this.fxaaShaders[p_setFxaaShader_1_] = this.theShaderGroup;
+             return this.useShader;
+         }
+     }
+     
+     public class EntityRendererInternal implements Predicate
+     {
+         final EntityRenderer field_90032_a;
+ 
+         EntityRendererInternal(EntityRenderer p_i1243_1_)
+         {
+             this.field_90032_a = p_i1243_1_;
+         }
+ 
+         public boolean apply(Entity p_apply_1_)
+         {
+             return p_apply_1_.canBeCollidedWith();
+         }
+ 
+         public boolean apply(Object p_apply_1_)
+         {
+             return this.apply((Entity)p_apply_1_);
+         }
+     }
+     
+     public class EntityRendererInternal2 implements Callable
+     {
+         final EntityRenderer field_90025_c;
+         private static final String __OBFID = "CL_00000948";
+ 
+         EntityRendererInternal2(EntityRenderer p_i46419_1_)
+         {
+             this.field_90025_c = p_i46419_1_;
+         }
+ 
+         public String call() throws Exception
+         {
+             return Minecraft.getMinecraft().currentScreen.getClass().getCanonicalName();
+         }
+     }
  }
diff -rc ./client/renderer/GLAllocation.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/GLAllocation.java
*** ./client/renderer/GLAllocation.java	2021-04-03 11:27:27.315458000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/GLAllocation.java	2019-05-30 22:29:17.621552000 -0700
***************
*** 9,18 ****
  
  public class GLAllocation
  {
- 
      /**
       * Generates the specified number of display lists and returns the first index.
       */
      public static synchronized int generateDisplayLists(int range)
      {
          int i = GL11.glGenLists(range);
--- 9,18 ----
  
  public class GLAllocation
  {
      /**
       * Generates the specified number of display lists and returns the first index.
       */
+ 
      public static synchronized int generateDisplayLists(int range)
      {
          int i = GL11.glGenLists(range);
***************
*** 48,53 ****
--- 48,54 ----
      /**
       * Creates and returns a direct byte buffer with the specified capacity. Applies native ordering to speed up access.
       */
+ 
      public static synchronized ByteBuffer createDirectByteBuffer(int capacity)
      {
          return ByteBuffer.allocateDirect(capacity).order(ByteOrder.nativeOrder());
diff -rc ./client/renderer/GlStateManager.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/GlStateManager.java
*** ./client/renderer/GlStateManager.java	2021-04-03 11:27:27.325462000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/GlStateManager.java	2019-11-19 11:07:49.590771300 -0800
***************
*** 1,30 ****
  package net.minecraft.client.renderer;
  
  import java.nio.FloatBuffer;
  import org.lwjgl.opengl.GL11;
  
  public class GlStateManager
  {
!     private static GlStateManager.AlphaState alphaState = new GlStateManager.AlphaState();
      private static GlStateManager.BooleanState lightingState = new GlStateManager.BooleanState(2896);
      private static GlStateManager.BooleanState[] lightState = new GlStateManager.BooleanState[8];
!     private static GlStateManager.ColorMaterialState colorMaterialState = new GlStateManager.ColorMaterialState();
!     private static GlStateManager.BlendState blendState = new GlStateManager.BlendState();
!     private static GlStateManager.DepthState depthState = new GlStateManager.DepthState();
!     private static GlStateManager.FogState fogState = new GlStateManager.FogState();
!     private static GlStateManager.CullState cullState = new GlStateManager.CullState();
!     private static GlStateManager.PolygonOffsetState polygonOffsetState = new GlStateManager.PolygonOffsetState();
!     private static GlStateManager.ColorLogicState colorLogicState = new GlStateManager.ColorLogicState();
!     private static GlStateManager.TexGenState texGenState = new GlStateManager.TexGenState();
!     private static GlStateManager.ClearState clearState = new GlStateManager.ClearState();
!     private static GlStateManager.StencilState stencilState = new GlStateManager.StencilState();
      private static GlStateManager.BooleanState normalizeState = new GlStateManager.BooleanState(2977);
!     private static int activeTextureUnit = 0;
!     private static GlStateManager.TextureState[] textureState = new GlStateManager.TextureState[8];
      private static int activeShadeModel = 7425;
      private static GlStateManager.BooleanState rescaleNormalState = new GlStateManager.BooleanState(32826);
!     private static GlStateManager.ColorMask colorMaskState = new GlStateManager.ColorMask();
      private static GlStateManager.Color colorState = new GlStateManager.Color();
  
      public static void pushAttrib()
      {
--- 1,37 ----
  package net.minecraft.client.renderer;
  
  import java.nio.FloatBuffer;
+ import java.nio.IntBuffer;
+ 
  import org.lwjgl.opengl.GL11;
+ import org.lwjgl.opengl.GL13;
+ 
+ import optifine.Config;
  
  public class GlStateManager
  {
!     private static GlStateManager.AlphaState alphaState = new GlStateManager.AlphaState((GlStateManager.GlStateManager$1)null);
      private static GlStateManager.BooleanState lightingState = new GlStateManager.BooleanState(2896);
      private static GlStateManager.BooleanState[] lightState = new GlStateManager.BooleanState[8];
!     private static GlStateManager.ColorMaterialState colorMaterialState = new GlStateManager.ColorMaterialState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.BlendState blendState = new GlStateManager.BlendState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.DepthState depthState = new GlStateManager.DepthState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.FogState fogState = new GlStateManager.FogState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.CullState cullState = new GlStateManager.CullState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.PolygonOffsetState polygonOffsetState = new GlStateManager.PolygonOffsetState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.ColorLogicState colorLogicState = new GlStateManager.ColorLogicState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.TexGenState texGenState = new GlStateManager.TexGenState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.ClearState clearState = new GlStateManager.ClearState((GlStateManager.GlStateManager$1)null);
!     private static GlStateManager.StencilState stencilState = new GlStateManager.StencilState((GlStateManager.GlStateManager$1)null);
      private static GlStateManager.BooleanState normalizeState = new GlStateManager.BooleanState(2977);
!     public static int activeTextureUnit = 0;
!     public static GlStateManager.TextureState[] textureState = new GlStateManager.TextureState[32];
      private static int activeShadeModel = 7425;
      private static GlStateManager.BooleanState rescaleNormalState = new GlStateManager.BooleanState(32826);
!     private static GlStateManager.ColorMask colorMaskState = new GlStateManager.ColorMask((GlStateManager.GlStateManager$1)null);
      private static GlStateManager.Color colorState = new GlStateManager.Color();
+     private static final String __OBFID = "CL_00002558";
+     public static boolean clearEnabled = true;
  
      public static void pushAttrib()
      {
***************
*** 288,305 ****
  
      private static GlStateManager.TexGenCoord texGenCoord(GlStateManager.TexGen p_179125_0_)
      {
!         switch (p_179125_0_)
          {
!             case S:
                  return texGenState.field_179064_a;
  
!             case T:
                  return texGenState.field_179062_b;
  
!             case R:
                  return texGenState.field_179063_c;
  
!             case Q:
                  return texGenState.field_179061_d;
  
              default:
--- 295,312 ----
  
      private static GlStateManager.TexGenCoord texGenCoord(GlStateManager.TexGen p_179125_0_)
      {
!         switch (GlStateManager.GlStateManager$1.field_179175_a[p_179125_0_.ordinal()])
          {
!             case 1:
                  return texGenState.field_179064_a;
  
!             case 2:
                  return texGenState.field_179062_b;
  
!             case 3:
                  return texGenState.field_179063_c;
  
!             case 4:
                  return texGenState.field_179061_d;
  
              default:
***************
*** 333,345 ****
  
      public static void deleteTexture(int texture)
      {
!         GL11.glDeleteTextures(texture);
! 
!         for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
          {
!             if (glstatemanager$texturestate.textureName == texture)
              {
!                 glstatemanager$texturestate.textureName = -1;
              }
          }
      }
--- 340,355 ----
  
      public static void deleteTexture(int texture)
      {
!         if (texture != 0)
          {
!             GL11.glDeleteTextures(texture);
! 
!             for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
              {
!                 if (glstatemanager$texturestate.textureName == texture)
!                 {
!                     glstatemanager$texturestate.textureName = 0;
!                 }
              }
          }
      }
***************
*** 353,358 ****
--- 363,373 ----
          }
      }
  
+     public static void bindCurrentTexture()
+     {
+         GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureState[activeTextureUnit].textureName);
+     }
+ 
      public static void enableNormalize()
      {
          normalizeState.setEnabled();
***************
*** 422,428 ****
  
      public static void clear(int mask)
      {
!         GL11.glClear(mask);
      }
  
      public static void matrixMode(int mode)
--- 437,446 ----
  
      public static void clear(int mask)
      {
!         if (clearEnabled)
!         {
!             GL11.glClear(mask);
!         }
      }
  
      public static void matrixMode(int mode)
***************
*** 512,517 ****
--- 530,577 ----
          GL11.glCallList(list);
      }
  
+     public static int getActiveTextureUnit()
+     {
+         return OpenGlHelper.defaultTexUnit + activeTextureUnit;
+     }
+ 
+     public static int getBoundTexture()
+     {
+         return textureState[activeTextureUnit].textureName;
+     }
+ 
+     public static void checkBoundTexture()
+     {
+         if (Config.isMinecraftThread())
+         {
+             int i = GL11.glGetInteger(GL13.GL_ACTIVE_TEXTURE);
+             int j = GL11.glGetInteger(GL11.GL_TEXTURE_BINDING_2D);
+             int k = getActiveTextureUnit();
+             int l = getBoundTexture();
+ 
+             if (l > 0)
+             {
+                 if (i != k || j != l)
+                 {
+                     Config.dbg("checkTexture: act: " + k + ", glAct: " + i + ", tex: " + l + ", glTex: " + j);
+                 }
+             }
+         }
+     }
+ 
+     public static void deleteTextures(IntBuffer p_deleteTextures_0_)
+     {
+         p_deleteTextures_0_.rewind();
+ 
+         while (p_deleteTextures_0_.position() < p_deleteTextures_0_.limit())
+         {
+             int i = p_deleteTextures_0_.get();
+             deleteTexture(i);
+         }
+ 
+         p_deleteTextures_0_.rewind();
+     }
+ 
      static
      {
          for (int i = 0; i < 8; ++i)
***************
*** 519,527 ****
              lightState[i] = new GlStateManager.BooleanState(16384 + i);
          }
  
!         for (int j = 0; j < 8; ++j)
          {
!             textureState[j] = new GlStateManager.TextureState();
          }
      }
  
--- 579,632 ----
              lightState[i] = new GlStateManager.BooleanState(16384 + i);
          }
  
!         for (int j = 0; j < textureState.length; ++j)
          {
!             textureState[j] = new GlStateManager.TextureState((GlStateManager.GlStateManager$1)null);
!         }
!     }
! 
!     static final class GlStateManager$1
!     {
!         static final int[] field_179175_a = new int[GlStateManager.TexGen.values().length];
!         private static final String __OBFID = "CL_00002557";
! 
!         static
!         {
!             try
!             {
!                 field_179175_a[GlStateManager.TexGen.S.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var4)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_179175_a[GlStateManager.TexGen.T.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_179175_a[GlStateManager.TexGen.R.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_179175_a[GlStateManager.TexGen.Q.ordinal()] = 4;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
          }
      }
  
***************
*** 530,535 ****
--- 635,641 ----
          public GlStateManager.BooleanState field_179208_a;
          public int func;
          public float ref;
+         private static final String __OBFID = "CL_00002556";
  
          private AlphaState()
          {
***************
*** 537,542 ****
--- 643,653 ----
              this.func = 519;
              this.ref = -1.0F;
          }
+ 
+         AlphaState(GlStateManager.GlStateManager$1 p_i46489_1_)
+         {
+             this();
+         }
      }
  
      static class BlendState
***************
*** 546,551 ****
--- 657,663 ----
          public int dstFactor;
          public int srcFactorAlpha;
          public int dstFactorAlpha;
+         private static final String __OBFID = "CL_00002555";
  
          private BlendState()
          {
***************
*** 555,566 ****
--- 667,684 ----
              this.srcFactorAlpha = 1;
              this.dstFactorAlpha = 0;
          }
+ 
+         BlendState(GlStateManager.GlStateManager$1 p_i46488_1_)
+         {
+             this();
+         }
      }
  
      static class BooleanState
      {
          private final int capability;
          private boolean currentState = false;
+         private static final String __OBFID = "CL_00002554";
  
          public BooleanState(int capabilityIn)
          {
***************
*** 600,605 ****
--- 718,724 ----
          public double field_179205_a;
          public GlStateManager.Color field_179203_b;
          public int field_179204_c;
+         private static final String __OBFID = "CL_00002553";
  
          private ClearState()
          {
***************
*** 607,612 ****
--- 726,736 ----
              this.field_179203_b = new GlStateManager.Color(0.0F, 0.0F, 0.0F, 0.0F);
              this.field_179204_c = 0;
          }
+ 
+         ClearState(GlStateManager.GlStateManager$1 p_i46487_1_)
+         {
+             this();
+         }
      }
  
      static class Color
***************
*** 615,620 ****
--- 739,745 ----
          public float green = 1.0F;
          public float blue = 1.0F;
          public float alpha = 1.0F;
+         private static final String __OBFID = "CL_00002552";
  
          public Color()
          {
***************
*** 633,644 ****
--- 758,775 ----
      {
          public GlStateManager.BooleanState field_179197_a;
          public int field_179196_b;
+         private static final String __OBFID = "CL_00002551";
  
          private ColorLogicState()
          {
              this.field_179197_a = new GlStateManager.BooleanState(3058);
              this.field_179196_b = 5379;
          }
+ 
+         ColorLogicState(GlStateManager.GlStateManager$1 p_i46486_1_)
+         {
+             this();
+         }
      }
  
      static class ColorMask
***************
*** 647,652 ****
--- 778,784 ----
          public boolean green;
          public boolean blue;
          public boolean alpha;
+         private static final String __OBFID = "CL_00002550";
  
          private ColorMask()
          {
***************
*** 655,660 ****
--- 787,797 ----
              this.blue = true;
              this.alpha = true;
          }
+ 
+         ColorMask(GlStateManager.GlStateManager$1 p_i46485_1_)
+         {
+             this();
+         }
      }
  
      static class ColorMaterialState
***************
*** 662,667 ****
--- 799,805 ----
          public GlStateManager.BooleanState field_179191_a;
          public int field_179189_b;
          public int field_179190_c;
+         private static final String __OBFID = "CL_00002549";
  
          private ColorMaterialState()
          {
***************
*** 669,686 ****
--- 807,835 ----
              this.field_179189_b = 1032;
              this.field_179190_c = 5634;
          }
+ 
+         ColorMaterialState(GlStateManager.GlStateManager$1 p_i46484_1_)
+         {
+             this();
+         }
      }
  
      static class CullState
      {
          public GlStateManager.BooleanState field_179054_a;
          public int field_179053_b;
+         private static final String __OBFID = "CL_00002548";
  
          private CullState()
          {
              this.field_179054_a = new GlStateManager.BooleanState(2884);
              this.field_179053_b = 1029;
          }
+ 
+         CullState(GlStateManager.GlStateManager$1 p_i46483_1_)
+         {
+             this();
+         }
      }
  
      static class DepthState
***************
*** 688,693 ****
--- 837,843 ----
          public GlStateManager.BooleanState depthTest;
          public boolean maskEnabled;
          public int depthFunc;
+         private static final String __OBFID = "CL_00002547";
  
          private DepthState()
          {
***************
*** 695,700 ****
--- 845,855 ----
              this.maskEnabled = true;
              this.depthFunc = 513;
          }
+ 
+         DepthState(GlStateManager.GlStateManager$1 p_i46482_1_)
+         {
+             this();
+         }
      }
  
      static class FogState
***************
*** 704,709 ****
--- 859,865 ----
          public float field_179048_c;
          public float field_179045_d;
          public float field_179046_e;
+         private static final String __OBFID = "CL_00002546";
  
          private FogState()
          {
***************
*** 713,718 ****
--- 869,879 ----
              this.field_179045_d = 0.0F;
              this.field_179046_e = 1.0F;
          }
+ 
+         FogState(GlStateManager.GlStateManager$1 p_i46481_1_)
+         {
+             this();
+         }
      }
  
      static class PolygonOffsetState
***************
*** 721,726 ****
--- 882,888 ----
          public GlStateManager.BooleanState field_179042_b;
          public float field_179043_c;
          public float field_179041_d;
+         private static final String __OBFID = "CL_00002545";
  
          private PolygonOffsetState()
          {
***************
*** 729,734 ****
--- 891,901 ----
              this.field_179043_c = 0.0F;
              this.field_179041_d = 0.0F;
          }
+ 
+         PolygonOffsetState(GlStateManager.GlStateManager$1 p_i46480_1_)
+         {
+             this();
+         }
      }
  
      static class StencilFunc
***************
*** 736,741 ****
--- 903,909 ----
          public int field_179081_a;
          public int field_179079_b;
          public int field_179080_c;
+         private static final String __OBFID = "CL_00002544";
  
          private StencilFunc()
          {
***************
*** 743,748 ****
--- 911,921 ----
              this.field_179079_b = 0;
              this.field_179080_c = -1;
          }
+ 
+         StencilFunc(GlStateManager.GlStateManager$1 p_i46479_1_)
+         {
+             this();
+         }
      }
  
      static class StencilState
***************
*** 752,774 ****
          public int field_179077_c;
          public int field_179074_d;
          public int field_179075_e;
  
          private StencilState()
          {
!             this.field_179078_a = new GlStateManager.StencilFunc();
              this.field_179076_b = -1;
              this.field_179077_c = 7680;
              this.field_179074_d = 7680;
              this.field_179075_e = 7680;
          }
      }
  
      public static enum TexGen
      {
!         S,
!         T,
!         R,
!         Q;
      }
  
      static class TexGenCoord
--- 925,960 ----
          public int field_179077_c;
          public int field_179074_d;
          public int field_179075_e;
+         private static final String __OBFID = "CL_00002543";
  
          private StencilState()
          {
!             this.field_179078_a = new GlStateManager.StencilFunc((GlStateManager.GlStateManager$1)null);
              this.field_179076_b = -1;
              this.field_179077_c = 7680;
              this.field_179074_d = 7680;
              this.field_179075_e = 7680;
          }
+ 
+         StencilState(GlStateManager.GlStateManager$1 p_i46478_1_)
+         {
+             this();
+         }
      }
  
      public static enum TexGen
      {
!         S("S", 0),
!         T("T", 1),
!         R("R", 2),
!         Q("Q", 3);
! 
!         private static final GlStateManager.TexGen[] $VALUES = new GlStateManager.TexGen[]{S, T, R, Q};
!         private static final String __OBFID = "CL_00002542";
! 
!         private TexGen(String p_i3_3_, int p_i3_4_)
!         {
!         }
      }
  
      static class TexGenCoord
***************
*** 776,781 ****
--- 962,968 ----
          public GlStateManager.BooleanState field_179067_a;
          public int field_179065_b;
          public int field_179066_c = -1;
+         private static final String __OBFID = "CL_00002541";
  
          public TexGenCoord(int p_i46254_1_, int p_i46254_2_)
          {
***************
*** 790,795 ****
--- 977,983 ----
          public GlStateManager.TexGenCoord field_179062_b;
          public GlStateManager.TexGenCoord field_179063_c;
          public GlStateManager.TexGenCoord field_179061_d;
+         private static final String __OBFID = "CL_00002540";
  
          private TexGenState()
          {
***************
*** 798,814 ****
              this.field_179063_c = new GlStateManager.TexGenCoord(8194, 3170);
              this.field_179061_d = new GlStateManager.TexGenCoord(8195, 3171);
          }
      }
  
!     static class TextureState
      {
          public GlStateManager.BooleanState texture2DState;
          public int textureName;
  
          private TextureState()
          {
              this.texture2DState = new GlStateManager.BooleanState(3553);
              this.textureName = 0;
          }
      }
  }
--- 986,1065 ----
              this.field_179063_c = new GlStateManager.TexGenCoord(8194, 3170);
              this.field_179061_d = new GlStateManager.TexGenCoord(8195, 3171);
          }
+ 
+         TexGenState(GlStateManager.GlStateManager$1 p_i46477_1_)
+         {
+             this();
+         }
      }
  
!     public static class TextureState
      {
          public GlStateManager.BooleanState texture2DState;
          public int textureName;
+         private static final String __OBFID = "CL_00002539";
  
          private TextureState()
          {
              this.texture2DState = new GlStateManager.BooleanState(3553);
              this.textureName = 0;
          }
+ 
+         TextureState(GlStateManager.GlStateManager$1 p_i46476_1_)
+         {
+             this();
+         }
+     }
+     
+     public static enum SourceFactor
+     {
+         CONSTANT_ALPHA(32771),
+         CONSTANT_COLOR(32769),
+         DST_ALPHA(772),
+         DST_COLOR(774),
+         ONE(1),
+         ONE_MINUS_CONSTANT_ALPHA(32772),
+         ONE_MINUS_CONSTANT_COLOR(32770),
+         ONE_MINUS_DST_ALPHA(773),
+         ONE_MINUS_DST_COLOR(775),
+         ONE_MINUS_SRC_ALPHA(771),
+         ONE_MINUS_SRC_COLOR(769),
+         SRC_ALPHA(770),
+         SRC_ALPHA_SATURATE(776),
+         SRC_COLOR(768),
+         ZERO(0);
+ 
+         public final int factor;
+ 
+         private SourceFactor(int factorIn)
+         {
+             this.factor = factorIn;
+         }
+     }
+     
+     public static enum DestFactor
+     {
+         CONSTANT_ALPHA(32771),
+         CONSTANT_COLOR(32769),
+         DST_ALPHA(772),
+         DST_COLOR(774),
+         ONE(1),
+         ONE_MINUS_CONSTANT_ALPHA(32772),
+         ONE_MINUS_CONSTANT_COLOR(32770),
+         ONE_MINUS_DST_ALPHA(773),
+         ONE_MINUS_DST_COLOR(775),
+         ONE_MINUS_SRC_ALPHA(771),
+         ONE_MINUS_SRC_COLOR(769),
+         SRC_ALPHA(770),
+         SRC_COLOR(768),
+         ZERO(0);
+ 
+         public final int factor;
+ 
+         private DestFactor(int factorIn)
+         {
+             this.factor = factorIn;
+         }
      }
+     
  }
diff -rc ./client/renderer/ImageBufferDownload.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ImageBufferDownload.java
*** ./client/renderer/ImageBufferDownload.java	2021-04-03 11:27:27.350459000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ImageBufferDownload.java	2019-05-30 22:29:17.660530000 -0700
***************
*** 10,15 ****
--- 10,16 ----
      private int[] imageData;
      private int imageWidth;
      private int imageHeight;
+     private static final String __OBFID = "CL_00000956";
  
      public BufferedImage parseUserSkin(BufferedImage image)
      {
***************
*** 21,57 ****
          {
              this.imageWidth = 64;
              this.imageHeight = 64;
              BufferedImage bufferedimage = new BufferedImage(this.imageWidth, this.imageHeight, 2);
              Graphics graphics = bufferedimage.getGraphics();
              graphics.drawImage(image, 0, 0, (ImageObserver)null);
  
!             if (image.getHeight() == 32)
              {
!                 graphics.drawImage(bufferedimage, 24, 48, 20, 52, 4, 16, 8, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28, 48, 24, 52, 8, 16, 12, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 20, 52, 16, 64, 8, 20, 12, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 24, 52, 20, 64, 4, 20, 8, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28, 52, 24, 64, 0, 20, 4, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 32, 52, 28, 64, 12, 20, 16, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40, 48, 36, 52, 44, 16, 48, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44, 48, 40, 52, 48, 16, 52, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 36, 52, 32, 64, 48, 20, 52, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40, 52, 36, 64, 44, 20, 48, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44, 52, 40, 64, 40, 20, 44, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 48, 52, 44, 64, 52, 20, 56, 32, (ImageObserver)null);
              }
  
              graphics.dispose();
              this.imageData = ((DataBufferInt)bufferedimage.getRaster().getDataBuffer()).getData();
!             this.setAreaOpaque(0, 0, 32, 16);
!             this.setAreaTransparent(32, 0, 64, 32);
!             this.setAreaOpaque(0, 16, 64, 32);
!             this.setAreaTransparent(0, 32, 16, 48);
!             this.setAreaTransparent(16, 32, 40, 48);
!             this.setAreaTransparent(40, 32, 56, 48);
!             this.setAreaTransparent(0, 48, 16, 64);
!             this.setAreaOpaque(16, 48, 48, 64);
!             this.setAreaTransparent(48, 48, 64, 64);
              return bufferedimage;
          }
      }
--- 22,68 ----
          {
              this.imageWidth = 64;
              this.imageHeight = 64;
+             int i = image.getWidth();
+             int j = image.getHeight();
+             int k;
+ 
+             for (k = 1; this.imageWidth < i || this.imageHeight < j; k *= 2)
+             {
+                 this.imageWidth *= 2;
+                 this.imageHeight *= 2;
+             }
+ 
              BufferedImage bufferedimage = new BufferedImage(this.imageWidth, this.imageHeight, 2);
              Graphics graphics = bufferedimage.getGraphics();
              graphics.drawImage(image, 0, 0, (ImageObserver)null);
  
!             if (image.getHeight() == 32 * k)
              {
!                 graphics.drawImage(bufferedimage, 24 * k, 48 * k, 20 * k, 52 * k, 4 * k, 16 * k, 8 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28 * k, 48 * k, 24 * k, 52 * k, 8 * k, 16 * k, 12 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 20 * k, 52 * k, 16 * k, 64 * k, 8 * k, 20 * k, 12 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 24 * k, 52 * k, 20 * k, 64 * k, 4 * k, 20 * k, 8 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28 * k, 52 * k, 24 * k, 64 * k, 0 * k, 20 * k, 4 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 32 * k, 52 * k, 28 * k, 64 * k, 12 * k, 20 * k, 16 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40 * k, 48 * k, 36 * k, 52 * k, 44 * k, 16 * k, 48 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44 * k, 48 * k, 40 * k, 52 * k, 48 * k, 16 * k, 52 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 36 * k, 52 * k, 32 * k, 64 * k, 48 * k, 20 * k, 52 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40 * k, 52 * k, 36 * k, 64 * k, 44 * k, 20 * k, 48 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44 * k, 52 * k, 40 * k, 64 * k, 40 * k, 20 * k, 44 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 48 * k, 52 * k, 44 * k, 64 * k, 52 * k, 20 * k, 56 * k, 32 * k, (ImageObserver)null);
              }
  
              graphics.dispose();
              this.imageData = ((DataBufferInt)bufferedimage.getRaster().getDataBuffer()).getData();
!             this.setAreaOpaque(0, 0, 32 * k, 16 * k);
!             this.setAreaTransparent(32 * k, 0, 64 * k, 32 * k);
!             this.setAreaOpaque(0, 16 * k, 64 * k, 32 * k);
!             this.setAreaTransparent(0, 32 * k, 16 * k, 48 * k);
!             this.setAreaTransparent(16 * k, 32 * k, 40 * k, 48 * k);
!             this.setAreaTransparent(40 * k, 32 * k, 56 * k, 48 * k);
!             this.setAreaTransparent(0, 48 * k, 16 * k, 64 * k);
!             this.setAreaOpaque(16 * k, 48 * k, 48 * k, 64 * k);
!             this.setAreaTransparent(48 * k, 48 * k, 64 * k, 64 * k);
              return bufferedimage;
          }
      }
diff -rc ./client/renderer/ItemRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ItemRenderer.java
*** ./client/renderer/ItemRenderer.java	2021-04-03 11:27:27.390664000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ItemRenderer.java	2019-05-30 22:29:17.700507000 -0700
***************
*** 15,31 ****
  import net.minecraft.client.renderer.texture.TextureMap;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.entity.EntityLivingBase;
- import net.minecraft.entity.player.EntityPlayer;
  import net.minecraft.init.Items;
  import net.minecraft.item.EnumAction;
  import net.minecraft.item.Item;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.storage.MapData;
  import org.lwjgl.opengl.GL11;
  
  public class ItemRenderer
  {
--- 15,36 ----
  import net.minecraft.client.renderer.texture.TextureMap;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.init.Items;
  import net.minecraft.item.EnumAction;
  import net.minecraft.item.Item;
+ import net.minecraft.item.ItemMap;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.storage.MapData;
+ import optifine.Config;
+ import optifine.DynamicLights;
+ import optifine.Reflector;
+ 
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.Shaders;
  
  public class ItemRenderer
  {
***************
*** 46,51 ****
--- 51,57 ----
  
      /** The index of the currently held item (0-8, or -1 if not yet updated) */
      private int equippedItemSlot = -1;
+     private static final String __OBFID = "CL_00000953";
  
      public ItemRenderer(Minecraft mcIn)
      {
***************
*** 66,72 ****
              {
                  GlStateManager.scale(2.0F, 2.0F, 2.0F);
  
!                 if (this.isBlockTranslucent(block))
                  {
                      GlStateManager.depthMask(false);
                  }
--- 72,78 ----
              {
                  GlStateManager.scale(2.0F, 2.0F, 2.0F);
  
!                 if (this.isBlockTranslucent(block) && (!Config.isShaders() || !Shaders.renderItemKeepDepthMask))
                  {
                      GlStateManager.depthMask(false);
                  }
***************
*** 103,108 ****
--- 109,120 ----
      private void func_178109_a(AbstractClientPlayer clientPlayer)
      {
          int i = this.mc.theWorld.getCombinedLight(new BlockPos(clientPlayer.posX, clientPlayer.posY + (double)clientPlayer.getEyeHeight(), clientPlayer.posZ), 0);
+ 
+         if (Config.isDynamicLights())
+         {
+             i = DynamicLights.getCombinedLight(this.mc.getRenderViewEntity(), i);
+         }
+ 
          float f = (float)(i & 65535);
          float f1 = (float)(i >> 16);
          OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
***************
*** 149,155 ****
      private void renderPlayerArms(AbstractClientPlayer clientPlayer)
      {
          this.mc.getTextureManager().bindTexture(clientPlayer.getLocationSkin());
!         Render<AbstractClientPlayer> render = this.renderManager.<AbstractClientPlayer>getEntityRenderObject(this.mc.thePlayer);
          RenderPlayer renderplayer = (RenderPlayer)render;
  
          if (!clientPlayer.isInvisible())
--- 161,167 ----
      private void renderPlayerArms(AbstractClientPlayer clientPlayer)
      {
          this.mc.getTextureManager().bindTexture(clientPlayer.getLocationSkin());
!         Render render = this.renderManager.getEntityRenderObject(this.mc.thePlayer);
          RenderPlayer renderplayer = (RenderPlayer)render;
  
          if (!clientPlayer.isInvisible())
***************
*** 224,230 ****
          GlStateManager.rotate(-135.0F, 0.0F, 1.0F, 0.0F);
          GlStateManager.scale(1.0F, 1.0F, 1.0F);
          GlStateManager.translate(5.6F, 0.0F, 0.0F);
!         Render<AbstractClientPlayer> render = this.renderManager.<AbstractClientPlayer>getEntityRenderObject(this.mc.thePlayer);
          GlStateManager.disableCull();
          RenderPlayer renderplayer = (RenderPlayer)render;
          renderplayer.renderRightArm(this.mc.thePlayer);
--- 236,242 ----
          GlStateManager.rotate(-135.0F, 0.0F, 1.0F, 0.0F);
          GlStateManager.scale(1.0F, 1.0F, 1.0F);
          GlStateManager.translate(5.6F, 0.0F, 0.0F);
!         Render render = this.renderManager.getEntityRenderObject(this.mc.thePlayer);
          GlStateManager.disableCull();
          RenderPlayer renderplayer = (RenderPlayer)render;
          renderplayer.renderRightArm(this.mc.thePlayer);
***************
*** 315,360 ****
      public void renderItemInFirstPerson(float partialTicks)
      {
          float f = 1.0F - (this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * partialTicks);
!         AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
!         float f1 = abstractclientplayer.getSwingProgress(partialTicks);
!         float f2 = abstractclientplayer.prevRotationPitch + (abstractclientplayer.rotationPitch - abstractclientplayer.prevRotationPitch) * partialTicks;
!         float f3 = abstractclientplayer.prevRotationYaw + (abstractclientplayer.rotationYaw - abstractclientplayer.prevRotationYaw) * partialTicks;
          this.func_178101_a(f2, f3);
!         this.func_178109_a(abstractclientplayer);
!         this.func_178110_a((EntityPlayerSP)abstractclientplayer, partialTicks);
          GlStateManager.enableRescaleNormal();
          GlStateManager.pushMatrix();
  
          if (this.itemToRender != null)
          {
!             if (this.itemToRender.getItem() == Items.filled_map)
              {
!                 this.renderItemMap(abstractclientplayer, f2, f, f1);
              }
!             else if (abstractclientplayer.getItemInUseCount() > 0)
              {
                  EnumAction enumaction = this.itemToRender.getItemUseAction();
  
!                 switch (enumaction)
                  {
!                     case NONE:
                          this.transformFirstPersonItem(f, 0.0F);
                          break;
  
!                     case EAT:
!                     case DRINK:
!                         this.func_178104_a(abstractclientplayer, partialTicks);
                          this.transformFirstPersonItem(f, 0.0F);
                          break;
  
!                     case BLOCK:
                          this.transformFirstPersonItem(f, 0.0F);
                          this.func_178103_d();
                          break;
  
!                     case BOW:
                          this.transformFirstPersonItem(f, 0.0F);
!                         this.func_178098_a(partialTicks, abstractclientplayer);
                  }
              }
              else
--- 327,372 ----
      public void renderItemInFirstPerson(float partialTicks)
      {
          float f = 1.0F - (this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * partialTicks);
!         EntityPlayerSP entityplayersp = this.mc.thePlayer;
!         float f1 = entityplayersp.getSwingProgress(partialTicks);
!         float f2 = entityplayersp.prevRotationPitch + (entityplayersp.rotationPitch - entityplayersp.prevRotationPitch) * partialTicks;
!         float f3 = entityplayersp.prevRotationYaw + (entityplayersp.rotationYaw - entityplayersp.prevRotationYaw) * partialTicks;
          this.func_178101_a(f2, f3);
!         this.func_178109_a(entityplayersp);
!         this.func_178110_a(entityplayersp, partialTicks);
          GlStateManager.enableRescaleNormal();
          GlStateManager.pushMatrix();
  
          if (this.itemToRender != null)
          {
!             if (this.itemToRender.getItem() instanceof ItemMap)
              {
!                 this.renderItemMap(entityplayersp, f2, f, f1);
              }
!             else if (entityplayersp.getItemInUseCount() > 0)
              {
                  EnumAction enumaction = this.itemToRender.getItemUseAction();
  
!                 switch (ItemRenderer.ItemRenderer$1.field_178094_a[enumaction.ordinal()])
                  {
!                     case 1:
                          this.transformFirstPersonItem(f, 0.0F);
                          break;
  
!                     case 2:
!                     case 3:
!                         this.func_178104_a(entityplayersp, partialTicks);
                          this.transformFirstPersonItem(f, 0.0F);
                          break;
  
!                     case 4:
                          this.transformFirstPersonItem(f, 0.0F);
                          this.func_178103_d();
                          break;
  
!                     case 5:
                          this.transformFirstPersonItem(f, 0.0F);
!                         this.func_178098_a(partialTicks, entityplayersp);
                  }
              }
              else
***************
*** 363,373 ****
                  this.transformFirstPersonItem(f, f1);
              }
  
!             this.renderItem(abstractclientplayer, this.itemToRender, ItemCameraTransforms.TransformType.FIRST_PERSON);
          }
!         else if (!abstractclientplayer.isInvisible())
          {
!             this.func_178095_a(abstractclientplayer, f, f1);
          }
  
          GlStateManager.popMatrix();
--- 375,385 ----
                  this.transformFirstPersonItem(f, f1);
              }
  
!             this.renderItem(entityplayersp, this.itemToRender, ItemCameraTransforms.TransformType.FIRST_PERSON);
          }
!         else if (!entityplayersp.isInvisible())
          {
!             this.func_178095_a(entityplayersp, f, f1);
          }
  
          GlStateManager.popMatrix();
***************
*** 385,420 ****
          if (this.mc.thePlayer.isEntityInsideOpaqueBlock())
          {
              IBlockState iblockstate = this.mc.theWorld.getBlockState(new BlockPos(this.mc.thePlayer));
!             EntityPlayer entityplayer = this.mc.thePlayer;
  
              for (int i = 0; i < 8; ++i)
              {
!                 double d0 = entityplayer.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
!                 double d1 = entityplayer.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
!                 double d2 = entityplayer.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
!                 BlockPos blockpos = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
!                 IBlockState iblockstate1 = this.mc.theWorld.getBlockState(blockpos);
  
                  if (iblockstate1.getBlock().isVisuallyOpaque())
                  {
                      iblockstate = iblockstate1;
                  }
              }
  
              if (iblockstate.getBlock().getRenderType() != -1)
              {
!                 this.func_178108_a(partialTicks, this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
              }
          }
  
          if (!this.mc.thePlayer.isSpectator())
          {
!             if (this.mc.thePlayer.isInsideOfMaterial(Material.water))
              {
                  this.renderWaterOverlayTexture(partialTicks);
              }
  
!             if (this.mc.thePlayer.isBurning())
              {
                  this.renderFireInFirstPerson(partialTicks);
              }
--- 397,439 ----
          if (this.mc.thePlayer.isEntityInsideOpaqueBlock())
          {
              IBlockState iblockstate = this.mc.theWorld.getBlockState(new BlockPos(this.mc.thePlayer));
!             BlockPos blockpos = new BlockPos(this.mc.thePlayer);
!             EntityPlayerSP entityplayersp = this.mc.thePlayer;
  
              for (int i = 0; i < 8; ++i)
              {
!                 double d0 = entityplayersp.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayersp.width * 0.8F);
!                 double d1 = entityplayersp.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
!                 double d2 = entityplayersp.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayersp.width * 0.8F);
!                 BlockPos blockpos1 = new BlockPos(d0, d1 + (double)entityplayersp.getEyeHeight(), d2);
!                 IBlockState iblockstate1 = this.mc.theWorld.getBlockState(blockpos1);
  
                  if (iblockstate1.getBlock().isVisuallyOpaque())
                  {
                      iblockstate = iblockstate1;
+                     blockpos = blockpos1;
                  }
              }
  
              if (iblockstate.getBlock().getRenderType() != -1)
              {
!                 Object object = Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK);
! 
!                 if (!Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks), object, iblockstate, blockpos}))
!                 {
!                     this.func_178108_a(partialTicks, this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
!                 }
              }
          }
  
          if (!this.mc.thePlayer.isSpectator())
          {
!             if (this.mc.thePlayer.isInsideOfMaterial(Material.water) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks)}))
              {
                  this.renderWaterOverlayTexture(partialTicks);
              }
  
!             if (this.mc.thePlayer.isBurning() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks)}))
              {
                  this.renderFireInFirstPerson(partialTicks);
              }
***************
*** 456,486 ****
       */
      private void renderWaterOverlayTexture(float p_78448_1_)
      {
!         this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!         float f = this.mc.thePlayer.getBrightness(p_78448_1_);
!         GlStateManager.color(f, f, f, 0.5F);
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!         GlStateManager.pushMatrix();
!         float f1 = 4.0F;
!         float f2 = -1.0F;
!         float f3 = 1.0F;
!         float f4 = -1.0F;
!         float f5 = 1.0F;
!         float f6 = -0.5F;
!         float f7 = -this.mc.thePlayer.rotationYaw / 64.0F;
!         float f8 = this.mc.thePlayer.rotationPitch / 64.0F;
!         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!         worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
!         worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
!         worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
!         worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
!         tessellator.draw();
!         GlStateManager.popMatrix();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.disableBlend();
      }
  
      /**
--- 475,508 ----
       */
      private void renderWaterOverlayTexture(float p_78448_1_)
      {
!         if (!Config.isShaders() || Shaders.isUnderwaterOverlay())
!         {
!             this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
!             Tessellator tessellator = Tessellator.getInstance();
!             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!             float f = this.mc.thePlayer.getBrightness(p_78448_1_);
!             GlStateManager.color(f, f, f, 0.5F);
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!             GlStateManager.pushMatrix();
!             float f1 = 4.0F;
!             float f2 = -1.0F;
!             float f3 = 1.0F;
!             float f4 = -1.0F;
!             float f5 = 1.0F;
!             float f6 = -0.5F;
!             float f7 = -this.mc.thePlayer.rotationYaw / 64.0F;
!             float f8 = this.mc.thePlayer.rotationPitch / 64.0F;
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!             worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
!             worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
!             worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
!             worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
!             tessellator.draw();
!             GlStateManager.popMatrix();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.disableBlend();
!         }
      }
  
      /**
***************
*** 531,544 ****
      public void updateEquippedItem()
      {
          this.prevEquippedProgress = this.equippedProgress;
!         EntityPlayer entityplayer = this.mc.thePlayer;
!         ItemStack itemstack = entityplayer.inventory.getCurrentItem();
          boolean flag = false;
  
          if (this.itemToRender != null && itemstack != null)
          {
              if (!this.itemToRender.getIsItemStackEqual(itemstack))
              {
                  flag = true;
              }
          }
--- 553,578 ----
      public void updateEquippedItem()
      {
          this.prevEquippedProgress = this.equippedProgress;
!         EntityPlayerSP entityplayersp = this.mc.thePlayer;
!         ItemStack itemstack = entityplayersp.inventory.getCurrentItem();
          boolean flag = false;
  
          if (this.itemToRender != null && itemstack != null)
          {
              if (!this.itemToRender.getIsItemStackEqual(itemstack))
              {
+                 if (Reflector.ForgeItem_shouldCauseReequipAnimation.exists())
+                 {
+                     boolean flag1 = Reflector.callBoolean(this.itemToRender.getItem(), Reflector.ForgeItem_shouldCauseReequipAnimation, new Object[] {this.itemToRender, itemstack, Boolean.valueOf(this.equippedItemSlot != entityplayersp.inventory.currentItem)});
+ 
+                     if (!flag1)
+                     {
+                         this.itemToRender = itemstack;
+                         this.equippedItemSlot = entityplayersp.inventory.currentItem;
+                         return;
+                     }
+                 }
+ 
                  flag = true;
              }
          }
***************
*** 551,565 ****
              flag = true;
          }
  
!         float f = 0.4F;
!         float f1 = flag ? 0.0F : 1.0F;
!         float f2 = MathHelper.clamp_float(f1 - this.equippedProgress, -f, f);
!         this.equippedProgress += f2;
  
          if (this.equippedProgress < 0.1F)
          {
              this.itemToRender = itemstack;
!             this.equippedItemSlot = entityplayer.inventory.currentItem;
          }
      }
  
--- 585,604 ----
              flag = true;
          }
  
!         float f2 = 0.4F;
!         float f = flag ? 0.0F : 1.0F;
!         float f1 = MathHelper.clamp_float(f - this.equippedProgress, -f2, f2);
!         this.equippedProgress += f1;
  
          if (this.equippedProgress < 0.1F)
          {
+             if (Config.isShaders())
+             {
+                 Shaders.setItemToRenderMain(itemstack);
+             }
+ 
              this.itemToRender = itemstack;
!             this.equippedItemSlot = entityplayersp.inventory.currentItem;
          }
      }
  
***************
*** 578,581 ****
--- 617,674 ----
      {
          this.equippedProgress = 0.0F;
      }
+ 
+     static final class ItemRenderer$1
+     {
+         static final int[] field_178094_a = new int[EnumAction.values().length];
+         private static final String __OBFID = "CL_00002537";
+ 
+         static
+         {
+             try
+             {
+                 field_178094_a[EnumAction.NONE.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var5)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178094_a[EnumAction.EAT.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178094_a[EnumAction.DRINK.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178094_a[EnumAction.BLOCK.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178094_a[EnumAction.BOW.ordinal()] = 5;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/renderer/OpenGlHelper.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/OpenGlHelper.java
*** ./client/renderer/OpenGlHelper.java	2021-04-03 11:27:27.407253000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/OpenGlHelper.java	2019-05-30 22:29:17.714499000 -0700
***************
*** 5,10 ****
--- 5,12 ----
  import java.nio.IntBuffer;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.settings.GameSettings;
+ import optifine.Config;
+ 
  import org.lwjgl.opengl.ARBFramebufferObject;
  import org.lwjgl.opengl.ARBMultitexture;
  import org.lwjgl.opengl.ARBShaderObjects;
***************
*** 89,100 ****
--- 91,106 ----
      private static boolean arbVbo;
      public static int GL_ARRAY_BUFFER;
      public static int GL_STATIC_DRAW;
+     private static final String __OBFID = "CL_00001179";
+     public static float lastBrightnessX = 0.0F;
+     public static float lastBrightnessY = 0.0F;
  
      /**
       * Initializes the texture constants to be used when rendering lightmap values
       */
      public static void initializeTextures()
      {
+         Config.initDisplay();
          ContextCapabilities contextcapabilities = GLContext.getCapabilities();
          arbMultitexture = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
          arbTextureEnvCombine = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
***************
*** 627,633 ****
  
      public static boolean useVbo()
      {
!         return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
      }
  
      public static void glBindFramebuffer(int target, int framebufferIn)
--- 633,639 ----
  
      public static boolean useVbo()
      {
!         return Config.isMultiTexture() ? false : vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
      }
  
      public static void glBindFramebuffer(int target, int framebufferIn)
***************
*** 891,896 ****
--- 897,908 ----
          {
              GL13.glMultiTexCoord2f(target, p_77475_1_, p_77475_2_);
          }
+ 
+         if (target == lightmapTexUnit)
+         {
+             lastBrightnessX = p_77475_1_;
+             lastBrightnessY = p_77475_2_;
+         }
      }
  
      public static void glBlendFunc(int sFactorRGB, int dFactorRGB, int sfactorAlpha, int dfactorAlpha)
***************
*** 914,920 ****
  
      public static boolean isFramebufferEnabled()
      {
!         return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
      }
  
      public static String func_183029_j()
--- 926,932 ----
  
      public static boolean isFramebufferEnabled()
      {
!         return Config.isFastRender() ? false : (Config.isAntialiasing() ? false : framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable);
      }
  
      public static String func_183029_j()
diff -rc ./client/renderer/RegionRenderCache.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RegionRenderCache.java
*** ./client/renderer/RegionRenderCache.java	2021-04-03 11:27:27.429251000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RegionRenderCache.java	2019-05-30 22:29:17.737486000 -0700
***************
*** 1,5 ****
--- 1,6 ----
  package net.minecraft.client.renderer;
  
+ import java.util.ArrayDeque;
  import java.util.Arrays;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.init.Blocks;
***************
*** 9,14 ****
--- 10,17 ----
  import net.minecraft.world.ChunkCache;
  import net.minecraft.world.World;
  import net.minecraft.world.chunk.Chunk;
+ import optifine.Config;
+ import optifine.DynamicLights;
  
  public class RegionRenderCache extends ChunkCache
  {
***************
*** 16,30 ****
      private final BlockPos position;
      private int[] combinedLights;
      private IBlockState[] blockStates;
  
      public RegionRenderCache(World worldIn, BlockPos posFromIn, BlockPos posToIn, int subIn)
      {
          super(worldIn, posFromIn, posToIn, subIn);
          this.position = posFromIn.subtract(new Vec3i(subIn, subIn, subIn));
!         int i = 8000;
!         this.combinedLights = new int[8000];
          Arrays.fill((int[])this.combinedLights, (int) - 1);
!         this.blockStates = new IBlockState[8000];
      }
  
      public TileEntity getTileEntity(BlockPos pos)
--- 19,37 ----
      private final BlockPos position;
      private int[] combinedLights;
      private IBlockState[] blockStates;
+     private static final String __OBFID = "CL_00002565";
+     private static ArrayDeque<int[]> cacheLights = new ArrayDeque();
+     private static ArrayDeque<IBlockState[]> cacheStates = new ArrayDeque();
+     private static int maxCacheSize = Config.limit(Runtime.getRuntime().availableProcessors(), 1, 32);
  
      public RegionRenderCache(World worldIn, BlockPos posFromIn, BlockPos posToIn, int subIn)
      {
          super(worldIn, posFromIn, posToIn, subIn);
          this.position = posFromIn.subtract(new Vec3i(subIn, subIn, subIn));
!         boolean flag = true;
!         this.combinedLights = allocateLights(8000);
          Arrays.fill((int[])this.combinedLights, (int) - 1);
!         this.blockStates = allocateStates(8000);
      }
  
      public TileEntity getTileEntity(BlockPos pos)
***************
*** 42,47 ****
--- 49,60 ----
          if (j == -1)
          {
              j = super.getCombinedLight(pos, lightValue);
+ 
+             if (Config.isDynamicLights() && !this.getBlockState(pos).getBlock().isOpaqueCube())
+             {
+                 j = DynamicLights.getCombinedLight(pos, j);
+             }
+ 
              this.combinedLights[i] = j;
          }
  
***************
*** 83,86 ****
--- 96,161 ----
          int k = p_175630_1_.getZ() - this.position.getZ();
          return i * 400 + k * 20 + j;
      }
+ 
+     public void freeBuffers()
+     {
+         freeLights(this.combinedLights);
+         freeStates(this.blockStates);
+     }
+ 
+     private static int[] allocateLights(int p_allocateLights_0_)
+     {
+         synchronized (cacheLights)
+         {
+             int[] aint = (int[])cacheLights.pollLast();
+ 
+             if (aint == null || aint.length < p_allocateLights_0_)
+             {
+                 aint = new int[p_allocateLights_0_];
+             }
+ 
+             return aint;
+         }
+     }
+ 
+     public static void freeLights(int[] p_freeLights_0_)
+     {
+         synchronized (cacheLights)
+         {
+             if (cacheLights.size() < maxCacheSize)
+             {
+                 cacheLights.add(p_freeLights_0_);
+             }
+         }
+     }
+ 
+     private static IBlockState[] allocateStates(int p_allocateStates_0_)
+     {
+         synchronized (cacheStates)
+         {
+             IBlockState[] aiblockstate = (IBlockState[])cacheStates.pollLast();
+ 
+             if (aiblockstate != null && aiblockstate.length >= p_allocateStates_0_)
+             {
+                 Arrays.fill(aiblockstate, (Object)null);
+             }
+             else
+             {
+                 aiblockstate = new IBlockState[p_allocateStates_0_];
+             }
+ 
+             return aiblockstate;
+         }
+     }
+ 
+     public static void freeStates(IBlockState[] p_freeStates_0_)
+     {
+         synchronized (cacheStates)
+         {
+             if (cacheStates.size() < maxCacheSize)
+             {
+                 cacheStates.add(p_freeStates_0_);
+             }
+         }
+     }
  }
diff -rc ./client/renderer/RenderGlobal.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RenderGlobal.java
*** ./client/renderer/RenderGlobal.java	2021-04-03 11:27:27.448547000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RenderGlobal.java	2019-05-30 22:34:48.860975000 -0700
***************
*** 5,16 ****
  import com.google.common.collect.Sets;
  import com.google.gson.JsonSyntaxException;
  import java.io.IOException;
  import java.util.Collection;
  import java.util.EnumSet;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
- import java.util.Queue;
  import java.util.Random;
  import java.util.Set;
  import java.util.concurrent.Callable;
--- 5,22 ----
  import com.google.common.collect.Sets;
  import com.google.gson.JsonSyntaxException;
  import java.io.IOException;
+ import java.util.ArrayDeque;
+ import java.util.ArrayList;
+ import java.util.Arrays;
  import java.util.Collection;
+ import java.util.Collections;
+ import java.util.Deque;
  import java.util.EnumSet;
+ import java.util.HashSet;
  import java.util.Iterator;
+ import java.util.LinkedHashSet;
  import java.util.List;
  import java.util.Map;
  import java.util.Random;
  import java.util.Set;
  import java.util.concurrent.Callable;
***************
*** 24,29 ****
--- 30,36 ----
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.audio.ISound;
  import net.minecraft.client.audio.PositionedSoundRecord;
+ import net.minecraft.client.gui.FontRenderer;
  import net.minecraft.client.multiplayer.WorldClient;
  import net.minecraft.client.particle.EntityFX;
  import net.minecraft.client.renderer.chunk.ChunkRenderDispatcher;
***************
*** 55,60 ****
--- 62,68 ----
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
+ import net.minecraft.entity.item.EntityItemFrame;
  import net.minecraft.entity.player.EntityPlayer;
  import net.minecraft.entity.projectile.EntityWitherSkull;
  import net.minecraft.init.Blocks;
***************
*** 64,69 ****
--- 72,78 ----
  import net.minecraft.item.ItemRecord;
  import net.minecraft.tileentity.TileEntity;
  import net.minecraft.tileentity.TileEntityChest;
+ import net.minecraft.tileentity.TileEntitySign;
  import net.minecraft.util.AxisAlignedBB;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.ClassInheritanceMultiMap;
***************
*** 78,90 ****
--- 87,115 ----
  import net.minecraft.util.Vec3;
  import net.minecraft.util.Vector3d;
  import net.minecraft.world.IWorldAccess;
+ import net.minecraft.world.WorldProvider;
  import net.minecraft.world.border.WorldBorder;
  import net.minecraft.world.chunk.Chunk;
+ import optifine.ChunkUtils;
+ import optifine.CloudRenderer;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomSky;
+ import optifine.DynamicLights;
+ import optifine.Lagometer;
+ import optifine.RandomMobs;
+ import optifine.Reflector;
+ import optifine.RenderInfoLazy;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.lwjgl.input.Keyboard;
  import org.lwjgl.opengl.GL11;
  import org.lwjgl.util.vector.Vector3f;
  import org.lwjgl.util.vector.Vector4f;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
+ import shadersmod.client.ShadowUtils;
  
  public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListener
  {
***************
*** 96,110 ****
      private static final ResourceLocation locationForcefieldPng = new ResourceLocation("textures/misc/forcefield.png");
  
      /** A reference to the Minecraft object. */
!     private final Minecraft mc;
  
      /** The RenderEngine instance used by RenderGlobal */
      private final TextureManager renderEngine;
      private final RenderManager renderManager;
      private WorldClient theWorld;
!     private Set<RenderChunk> chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
!     private List<RenderGlobal.ContainerLocalRenderInformation> renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayListWithCapacity(69696);
!     private final Set<TileEntity> field_181024_n = Sets.<TileEntity>newHashSet();
      private ViewFrustum viewFrustum;
  
      /** The star GL Call list */
--- 121,137 ----
      private static final ResourceLocation locationForcefieldPng = new ResourceLocation("textures/misc/forcefield.png");
  
      /** A reference to the Minecraft object. */
!     public final Minecraft mc;
  
      /** The RenderEngine instance used by RenderGlobal */
      private final TextureManager renderEngine;
      private final RenderManager renderManager;
      private WorldClient theWorld;
!     private Set chunksToUpdate = Sets.newLinkedHashSet();
! 
!     /** List of OpenGL lists for the current render pass */
!     private List renderInfos = Lists.newArrayListWithCapacity(69696);
!     private final Set field_181024_n = Sets.newHashSet();
      private ViewFrustum viewFrustum;
  
      /** The star GL Call list */
***************
*** 124,131 ****
       * counts the cloud render updates. Used with mod to stagger some updates
       */
      private int cloudTickCounter;
!     private final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
!     private final Map<BlockPos, ISound> mapSoundPositions = Maps.<BlockPos, ISound>newHashMap();
      private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
      private Framebuffer entityOutlineFramebuffer;
  
--- 151,165 ----
       * counts the cloud render updates. Used with mod to stagger some updates
       */
      private int cloudTickCounter;
! 
!     /**
!      * Stores blocks currently being broken. Key is entity ID of the thing doing the breaking. Value is a
!      * DestroyBlockProgress
!      */
!     public final Map damagedBlocks = Maps.newHashMap();
! 
!     /** Currently playing sounds.  Type:  HashMap<ChunkCoordinates, ISound> */
!     private final Map mapSoundPositions = Maps.newHashMap();
      private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
      private Framebuffer entityOutlineFramebuffer;
  
***************
*** 166,175 ****
      private double prevRenderSortX;
      private double prevRenderSortY;
      private double prevRenderSortZ;
!     private boolean displayListEntitiesDirty = true;
  
      public RenderGlobal(Minecraft mcIn)
      {
          this.mc = mcIn;
          this.renderManager = mcIn.getRenderManager();
          this.renderEngine = mcIn.getTextureManager();
--- 200,228 ----
      private double prevRenderSortX;
      private double prevRenderSortY;
      private double prevRenderSortZ;
!     public boolean displayListEntitiesDirty = true;
!     private static final String __OBFID = "CL_00000954";
!     private CloudRenderer cloudRenderer;
!     public Entity renderedEntity;
!     public Set chunksToResortTransparency = new LinkedHashSet();
!     public Set chunksToUpdateForced = new LinkedHashSet();
!     private Deque visibilityDeque = new ArrayDeque();
!     private List renderInfosEntities = new ArrayList(1024);
!     private List renderInfosTileEntities = new ArrayList(1024);
!     private List renderInfosNormal = new ArrayList(1024);
!     private List renderInfosEntitiesNormal = new ArrayList(1024);
!     private List renderInfosTileEntitiesNormal = new ArrayList(1024);
!     private List renderInfosShadow = new ArrayList(1024);
!     private List renderInfosEntitiesShadow = new ArrayList(1024);
!     private List renderInfosTileEntitiesShadow = new ArrayList(1024);
!     private int renderDistance = 0;
!     private int renderDistanceSq = 0;
!     private static final Set SET_ALL_FACINGS = Collections.unmodifiableSet(new HashSet(Arrays.asList(EnumFacing.VALUES)));
!     private int countTileEntitiesRendered;
  
      public RenderGlobal(Minecraft mcIn)
      {
+         this.cloudRenderer = new CloudRenderer(mcIn);
          this.mc = mcIn;
          this.renderManager = mcIn.getRenderManager();
          this.renderEngine = mcIn.getTextureManager();
***************
*** 266,272 ****
  
      protected boolean isRenderEntityOutlines()
      {
!         return this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.thePlayer != null && this.mc.thePlayer.isSpectator() && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown();
      }
  
      private void generateSky2()
--- 319,325 ----
  
      protected boolean isRenderEntityOutlines()
      {
!         return !Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing() ? this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.thePlayer != null && this.mc.thePlayer.isSpectator() && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown() : false;
      }
  
      private void generateSky2()
***************
*** 339,365 ****
  
      private void renderSky(WorldRenderer worldRendererIn, float p_174968_2_, boolean p_174968_3_)
      {
!         int i = 64;
!         int j = 6;
          worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
  
!         for (int k = -384; k <= 384; k += 64)
          {
!             for (int l = -384; l <= 384; l += 64)
              {
!                 float f = (float)k;
!                 float f1 = (float)(k + 64);
  
                  if (p_174968_3_)
                  {
!                     f1 = (float)k;
!                     f = (float)(k + 64);
                  }
  
!                 worldRendererIn.pos((double)f, (double)p_174968_2_, (double)l).endVertex();
!                 worldRendererIn.pos((double)f1, (double)p_174968_2_, (double)l).endVertex();
!                 worldRendererIn.pos((double)f1, (double)p_174968_2_, (double)(l + 64)).endVertex();
!                 worldRendererIn.pos((double)f, (double)p_174968_2_, (double)(l + 64)).endVertex();
              }
          }
      }
--- 392,418 ----
  
      private void renderSky(WorldRenderer worldRendererIn, float p_174968_2_, boolean p_174968_3_)
      {
!         boolean flag = true;
!         boolean flag1 = true;
          worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
  
!         for (int i = -384; i <= 384; i += 64)
          {
!             for (int j = -384; j <= 384; j += 64)
              {
!                 float f = (float)i;
!                 float f1 = (float)(i + 64);
  
                  if (p_174968_3_)
                  {
!                     f1 = (float)i;
!                     f = (float)(i + 64);
                  }
  
!                 worldRendererIn.pos((double)f, (double)p_174968_2_, (double)j).endVertex();
!                 worldRendererIn.pos((double)f1, (double)p_174968_2_, (double)j).endVertex();
!                 worldRendererIn.pos((double)f1, (double)p_174968_2_, (double)(j + 64)).endVertex();
!                 worldRendererIn.pos((double)f, (double)p_174968_2_, (double)(j + 64)).endVertex();
              }
          }
      }
***************
*** 469,474 ****
--- 522,532 ----
          this.renderManager.set(worldClientIn);
          this.theWorld = worldClientIn;
  
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.clear();
+         }
+ 
          if (worldClientIn != null)
          {
              worldClientIn.addWorldAccess(this);
***************
*** 484,492 ****
          if (this.theWorld != null)
          {
              this.displayListEntitiesDirty = true;
!             Blocks.leaves.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
!             Blocks.leaves2.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
              this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
              boolean flag = this.vboEnabled;
              this.vboEnabled = OpenGlHelper.useVbo();
  
--- 542,559 ----
          if (this.theWorld != null)
          {
              this.displayListEntitiesDirty = true;
!             Blocks.leaves.setGraphicsLevel(Config.isTreesFancy());
!             Blocks.leaves2.setGraphicsLevel(Config.isTreesFancy());
!             BlockModelRenderer.updateAoLightValue();
! 
!             if (Config.isDynamicLights())
!             {
!                 DynamicLights.clear();
!             }
! 
              this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
+             this.renderDistance = this.renderDistanceChunks * 16;
+             this.renderDistanceSq = this.renderDistance * this.renderDistance;
              boolean flag = this.vboEnabled;
              this.vboEnabled = OpenGlHelper.useVbo();
  
***************
*** 514,519 ****
--- 581,587 ----
              }
  
              this.stopChunkUpdates();
+             Set var5 = this.field_181024_n;
  
              synchronized (this.field_181024_n)
              {
***************
*** 544,562 ****
  
      public void createBindEntityOutlineFbs(int p_72720_1_, int p_72720_2_)
      {
!         if (OpenGlHelper.shadersSupported)
          {
!             if (this.entityOutlineShader != null)
!             {
!                 this.entityOutlineShader.createBindFramebuffers(p_72720_1_, p_72720_2_);
!             }
          }
      }
  
      public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks)
      {
          if (this.renderEntitiesStartupCounter > 0)
          {
              --this.renderEntitiesStartupCounter;
          }
          else
--- 612,639 ----
  
      public void createBindEntityOutlineFbs(int p_72720_1_, int p_72720_2_)
      {
!         if (OpenGlHelper.shadersSupported && this.entityOutlineShader != null)
          {
!             this.entityOutlineShader.createBindFramebuffers(p_72720_1_, p_72720_2_);
          }
      }
  
      public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks)
      {
+         int i = 0;
+ 
+         if (Reflector.MinecraftForgeClient_getRenderPass.exists())
+         {
+             i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass, new Object[0]);
+         }
+ 
          if (this.renderEntitiesStartupCounter > 0)
          {
+             if (i > 0)
+             {
+                 return;
+             }
+ 
              --this.renderEntitiesStartupCounter;
          }
          else
***************
*** 567,575 ****
              this.theWorld.theProfiler.startSection("prepare");
              TileEntityRendererDispatcher.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), partialTicks);
              this.renderManager.cacheActiveRenderInfo(this.theWorld, this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, partialTicks);
!             this.countEntitiesTotal = 0;
!             this.countEntitiesRendered = 0;
!             this.countEntitiesHidden = 0;
              Entity entity = this.mc.getRenderViewEntity();
              double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
              double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
--- 644,658 ----
              this.theWorld.theProfiler.startSection("prepare");
              TileEntityRendererDispatcher.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), partialTicks);
              this.renderManager.cacheActiveRenderInfo(this.theWorld, this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, partialTicks);
! 
!             if (i == 0)
!             {
!                 this.countEntitiesTotal = 0;
!                 this.countEntitiesRendered = 0;
!                 this.countEntitiesHidden = 0;
!                 this.countTileEntitiesRendered = 0;
!             }
! 
              Entity entity = this.mc.getRenderViewEntity();
              double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
              double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
***************
*** 580,596 ****
              this.renderManager.setRenderPosition(d3, d4, d5);
              this.mc.entityRenderer.enableLightmap();
              this.theWorld.theProfiler.endStartSection("global");
!             List<Entity> list = this.theWorld.getLoadedEntityList();
!             this.countEntitiesTotal = list.size();
  
!             for (int i = 0; i < this.theWorld.weatherEffects.size(); ++i)
              {
!                 Entity entity1 = (Entity)this.theWorld.weatherEffects.get(i);
!                 ++this.countEntitiesRendered;
  
!                 if (entity1.isInRangeToRender3d(d0, d1, d2))
                  {
!                     this.renderManager.renderEntitySimple(entity1, partialTicks);
                  }
              }
  
--- 663,695 ----
              this.renderManager.setRenderPosition(d3, d4, d5);
              this.mc.entityRenderer.enableLightmap();
              this.theWorld.theProfiler.endStartSection("global");
!             List list = this.theWorld.getLoadedEntityList();
! 
!             if (i == 0)
!             {
!                 this.countEntitiesTotal = list.size();
!             }
! 
!             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
!             {
!                 GlStateManager.disableFog();
!             }
! 
!             boolean flag = Reflector.ForgeEntity_shouldRenderInPass.exists();
!             boolean flag1 = Reflector.ForgeTileEntity_shouldRenderInPass.exists();
  
!             for (int j = 0; j < this.theWorld.weatherEffects.size(); ++j)
              {
!                 Entity entity1 = (Entity)this.theWorld.weatherEffects.get(j);
  
!                 if (!flag || Reflector.callBoolean(entity1, Reflector.ForgeEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
                  {
!                     ++this.countEntitiesRendered;
! 
!                     if (entity1.isInRangeToRender3d(d0, d1, d2))
!                     {
!                         this.renderManager.renderEntitySimple(entity1, partialTicks);
!                     }
                  }
              }
  
***************
*** 604,618 ****
                  RenderHelper.disableStandardItemLighting();
                  this.renderManager.setRenderOutlines(true);
  
!                 for (int j = 0; j < list.size(); ++j)
                  {
!                     Entity entity3 = (Entity)list.get(j);
!                     boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
!                     boolean flag1 = entity3.isInRangeToRender3d(d0, d1, d2) && (entity3.ignoreFrustumCheck || camera.isBoundingBoxInFrustum(entity3.getEntityBoundingBox()) || entity3.riddenByEntity == this.mc.thePlayer) && entity3 instanceof EntityPlayer;
  
!                     if ((entity3 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag) && flag1)
                      {
!                         this.renderManager.renderEntitySimple(entity3, partialTicks);
                      }
                  }
  
--- 703,721 ----
                  RenderHelper.disableStandardItemLighting();
                  this.renderManager.setRenderOutlines(true);
  
!                 for (int k = 0; k < list.size(); ++k)
                  {
!                     Entity entity3 = (Entity)list.get(k);
  
!                     if (!flag || Reflector.callBoolean(entity3, Reflector.ForgeEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
                      {
!                         boolean flag2 = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
!                         boolean flag3 = entity3.isInRangeToRender3d(d0, d1, d2) && (entity3.ignoreFrustumCheck || camera.isBoundingBoxInFrustum(entity3.getEntityBoundingBox()) || entity3.riddenByEntity == this.mc.thePlayer) && entity3 instanceof EntityPlayer;
! 
!                         if ((entity3 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag2) && flag3)
!                         {
!                             this.renderManager.renderEntitySimple(entity3, partialTicks);
!                         }
                      }
                  }
  
***************
*** 632,643 ****
              }
  
              this.theWorld.theProfiler.endStartSection("entities");
!             label738:
  
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
              {
                  Chunk chunk = this.theWorld.getChunkFromBlockCoords(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
!                 ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
  
                  if (!classinheritancemultimap.isEmpty())
                  {
--- 735,757 ----
              }
  
              this.theWorld.theProfiler.endStartSection("entities");
!             boolean flag7 = Config.isShaders();
  
!             if (flag7)
              {
+                 Shaders.beginEntities();
+             }
+ 
+             Iterator iterator1 = this.renderInfosEntities.iterator();
+             boolean flag4 = this.mc.gameSettings.fancyGraphics;
+             this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
+             label920:
+ 
+             while (iterator1.hasNext())
+             {
+                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation)iterator1.next();
                  Chunk chunk = this.theWorld.getChunkFromBlockCoords(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
!                 ClassInheritanceMultiMap classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
  
                  if (!classinheritancemultimap.isEmpty())
                  {
***************
*** 646,738 ****
                      while (true)
                      {
                          Entity entity2;
!                         boolean flag2;
  
                          while (true)
                          {
                              if (!iterator.hasNext())
                              {
!                                 continue label738;
                              }
  
                              entity2 = (Entity)iterator.next();
-                             flag2 = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.riddenByEntity == this.mc.thePlayer;
  
!                             if (!flag2)
                              {
!                                 break;
!                             }
! 
!                             boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
  
!                             if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))))
!                             {
!                                 ++this.countEntitiesRendered;
!                                 this.renderManager.renderEntitySimple(entity2, partialTicks);
!                                 break;
                              }
                          }
  
!                         if (!flag2 && entity2 instanceof EntityWitherSkull)
                          {
                              this.mc.getRenderManager().renderWitherSkull(entity2, partialTicks);
                          }
                      }
                  }
              }
  
              this.theWorld.theProfiler.endStartSection("blockentities");
              RenderHelper.enableStandardItemLighting();
  
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
              {
!                 List<TileEntity> list1 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
  
                  if (!list1.isEmpty())
                  {
!                     for (TileEntity tileentity2 : list1)
                      {
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, -1);
                      }
                  }
              }
  
              synchronized (this.field_181024_n)
              {
!                 for (TileEntity tileentity : this.field_181024_n)
                  {
!                     TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
                  }
              }
  
              this.preRenderDamagedBlocks();
  
!             for (DestroyBlockProgress destroyblockprogress : this.damagedBlocks.values())
              {
!                 BlockPos blockpos = destroyblockprogress.getPosition();
!                 TileEntity tileentity1 = this.theWorld.getTileEntity(blockpos);
  
!                 if (tileentity1 instanceof TileEntityChest)
                  {
!                     TileEntityChest tileentitychest = (TileEntityChest)tileentity1;
  
                      if (tileentitychest.adjacentChestXNeg != null)
                      {
                          blockpos = blockpos.offset(EnumFacing.WEST);
!                         tileentity1 = this.theWorld.getTileEntity(blockpos);
                      }
                      else if (tileentitychest.adjacentChestZNeg != null)
                      {
                          blockpos = blockpos.offset(EnumFacing.NORTH);
!                         tileentity1 = this.theWorld.getTileEntity(blockpos);
                      }
                  }
  
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
  
!                 if (tileentity1 != null && (block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull))
                  {
!                     TileEntityRendererDispatcher.instance.renderTileEntity(tileentity1, partialTicks, destroyblockprogress.getPartialBlockDamage());
                  }
              }
  
--- 760,1007 ----
                      while (true)
                      {
                          Entity entity2;
!                         boolean flag5;
  
                          while (true)
                          {
                              if (!iterator.hasNext())
                              {
!                                 continue label920;
                              }
  
                              entity2 = (Entity)iterator.next();
  
!                             if (!flag || Reflector.callBoolean(entity2, Reflector.ForgeEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
                              {
!                                 flag5 = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.riddenByEntity == this.mc.thePlayer;
  
!                                 if (!flag5)
!                                 {
!                                     break;
!                                 }
! 
!                                 boolean flag6 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
! 
!                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag6) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(new BlockPos(entity2))))
!                                 {
!                                     ++this.countEntitiesRendered;
! 
!                                     if (entity2.getClass() == EntityItemFrame.class)
!                                     {
!                                         entity2.renderDistanceWeight = 0.06D;
!                                     }
! 
!                                     this.renderedEntity = entity2;
! 
!                                     if (flag7)
!                                     {
!                                         Shaders.nextEntity(entity2);
!                                     }
! 
!                                     this.renderManager.renderEntitySimple(entity2, partialTicks);
!                                     this.renderedEntity = null;
!                                     break;
!                                 }
                              }
                          }
  
!                         if (!flag5 && entity2 instanceof EntityWitherSkull)
                          {
+                             if (flag7)
+                             {
+                                 Shaders.nextEntity(entity2);
+                             }
+ 
                              this.mc.getRenderManager().renderWitherSkull(entity2, partialTicks);
                          }
                      }
                  }
              }
  
+             this.mc.gameSettings.fancyGraphics = flag4;
+             FontRenderer fontrenderer = TileEntityRendererDispatcher.instance.getFontRenderer();
+ 
+             if (flag7)
+             {
+                 Shaders.endEntities();
+                 Shaders.beginBlockEntities();
+             }
+ 
              this.theWorld.theProfiler.endStartSection("blockentities");
              RenderHelper.enableStandardItemLighting();
  
!             if (Reflector.ForgeTileEntityRendererDispatcher_preDrawBatch.exists())
              {
!                 Reflector.call(TileEntityRendererDispatcher.instance, Reflector.ForgeTileEntityRendererDispatcher_preDrawBatch, new Object[0]);
!             }
! 
!             label1385:
! 
!             for (Object renderglobal$containerlocalrenderinformation10 : this.renderInfosTileEntities)
!             {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation10;
!                 List list1 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk()
!                              .getTileEntities();
  
                  if (!list1.isEmpty())
                  {
!                     Iterator iterator2 = list1.iterator();
! 
!                     while (true)
                      {
!                         TileEntity tileentity;
! 
!                         while (true)
!                         {
!                             if (!iterator2.hasNext())
!                             {
!                                 continue label1385;
!                             }
! 
!                             tileentity = (TileEntity)iterator2.next();
! 
!                             if (!flag1)
!                             {
!                                 break;
!                             }
! 
!                             if (Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
!                             {
!                                 AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
! 
!                                 if (axisalignedbb == null || camera.isBoundingBoxInFrustum(axisalignedbb))
!                                 {
!                                     break;
!                                 }
!                             }
!                         }
! 
!                         Class oclass = tileentity.getClass();
! 
!                         if (oclass == TileEntitySign.class && !Config.zoomMode)
!                         {
!                             EntityPlayer entityplayer = this.mc.thePlayer;
!                             double d6 = tileentity.getDistanceSq(entityplayer.posX, entityplayer.posY, entityplayer.posZ);
! 
!                             if (d6 > 256.0D)
!                             {
!                                 fontrenderer.enabled = false;
!                             }
!                         }
! 
!                         if (flag7)
!                         {
!                             Shaders.nextBlockEntity(tileentity);
!                         }
! 
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
!                         ++this.countTileEntitiesRendered;
!                         fontrenderer.enabled = true;
                      }
                  }
              }
  
+             Set var32 = this.field_181024_n;
+ 
              synchronized (this.field_181024_n)
              {
!                 for (Object tileentity1 : this.field_181024_n)
                  {
!                     if (flag1)
!                     {
!                         if (!Reflector.callBoolean(tileentity1, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}))
!                         {
!                             continue;
!                         }
!                         AxisAlignedBB axisalignedbb1 = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
! 
!                         if (axisalignedbb1 != null && !camera.isBoundingBoxInFrustum(axisalignedbb1))
!                         {
!                             continue;
!                         }
!                     }
! 
!                     Class oclass1 = tileentity1.getClass();
! 
!                     if (oclass1 == TileEntitySign.class && !Config.zoomMode)
!                     {
!                         EntityPlayer entityplayer1 = this.mc.thePlayer;
!                         double d7 = ((TileEntity) tileentity1).getDistanceSq(entityplayer1.posX, entityplayer1.posY, entityplayer1.posZ);
! 
!                         if (d7 > 256.0D)
!                         {
!                             fontrenderer.enabled = false;
!                         }
!                     }
! 
!                     if (flag7)
!                     {
!                         Shaders.nextBlockEntity((TileEntity) tileentity1);
!                     }
! 
!                     TileEntityRendererDispatcher.instance.renderTileEntity((TileEntity) tileentity1, partialTicks, -1);
!                     fontrenderer.enabled = true;
                  }
              }
  
+             if (Reflector.ForgeTileEntityRendererDispatcher_drawBatch.exists())
+             {
+                 Reflector.call(TileEntityRendererDispatcher.instance, Reflector.ForgeTileEntityRendererDispatcher_drawBatch, new Object[] {Integer.valueOf(i)});
+             }
+ 
              this.preRenderDamagedBlocks();
  
!             for (Object destroyblockprogress : this.damagedBlocks.values())
              {
!                 BlockPos blockpos = ((DestroyBlockProgress) destroyblockprogress).getPosition();
!                 TileEntity tileentity2 = this.theWorld.getTileEntity(blockpos);
  
!                 if (tileentity2 instanceof TileEntityChest)
                  {
!                     TileEntityChest tileentitychest = (TileEntityChest)tileentity2;
  
                      if (tileentitychest.adjacentChestXNeg != null)
                      {
                          blockpos = blockpos.offset(EnumFacing.WEST);
!                         tileentity2 = this.theWorld.getTileEntity(blockpos);
                      }
                      else if (tileentitychest.adjacentChestZNeg != null)
                      {
                          blockpos = blockpos.offset(EnumFacing.NORTH);
!                         tileentity2 = this.theWorld.getTileEntity(blockpos);
                      }
                  }
  
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
+                 boolean flag8;
  
!                 if (flag1)
                  {
!                     flag8 = false;
! 
!                     if (tileentity2 != null && Reflector.callBoolean(tileentity2, Reflector.ForgeTileEntity_shouldRenderInPass, new Object[] {Integer.valueOf(i)}) && Reflector.callBoolean(tileentity2, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0]))
!                     {
!                         AxisAlignedBB axisalignedbb2 = (AxisAlignedBB)Reflector.call(tileentity2, Reflector.ForgeTileEntity_getRenderBoundingBox, new Object[0]);
! 
!                         if (axisalignedbb2 != null)
!                         {
!                             flag8 = camera.isBoundingBoxInFrustum(axisalignedbb2);
!                         }
!                     }
!                 }
!                 else
!                 {
!                     flag8 = tileentity2 != null && (block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull);
!                 }
! 
!                 if (flag8)
!                 {
!                     if (flag7)
!                     {
!                         Shaders.nextBlockEntity(tileentity2);
!                     }
! 
!                     TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, ((DestroyBlockProgress) destroyblockprogress).getPartialBlockDamage());
                  }
              }
  
***************
*** 750,757 ****
          int i = this.viewFrustum.renderChunks.length;
          int j = 0;
  
!         for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
          {
              CompiledChunk compiledchunk = renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk;
  
              if (compiledchunk != CompiledChunk.DUMMY && !compiledchunk.isEmpty())
--- 1019,1027 ----
          int i = this.viewFrustum.renderChunks.length;
          int j = 0;
  
!         for (Object renderglobal$containerlocalrenderinformation0 : this.renderInfos)
          {
+             RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation0;
              CompiledChunk compiledchunk = renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk;
  
              if (compiledchunk != CompiledChunk.DUMMY && !compiledchunk.isEmpty())
***************
*** 768,774 ****
       */
      public String getDebugInfoEntities()
      {
!         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden + ", I: " + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered);
      }
  
      public void setupTerrain(Entity viewEntity, double partialTicks, ICamera camera, int frameCount, boolean playerSpectator)
--- 1038,1044 ----
       */
      public String getDebugInfoEntities()
      {
!         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden + ", I: " + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered) + ", " + Config.getVersionDebug();
      }
  
      public void setupTerrain(Entity viewEntity, double partialTicks, ICamera camera, int frameCount, boolean playerSpectator)
***************
*** 794,799 ****
--- 1064,1074 ----
              this.viewFrustum.updateChunkPositions(viewEntity.posX, viewEntity.posZ);
          }
  
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.update(this);
+         }
+ 
          this.theWorld.theProfiler.endStartSection("renderlistcamera");
          double d3 = viewEntity.lastTickPosX + (viewEntity.posX - viewEntity.lastTickPosX) * partialTicks;
          double d4 = viewEntity.lastTickPosY + (viewEntity.posY - viewEntity.lastTickPosY) * partialTicks;
***************
*** 809,816 ****
          }
  
          this.mc.mcProfiler.endStartSection("culling");
!         BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
!         RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
          BlockPos blockpos = new BlockPos(MathHelper.floor_double(d3 / 16.0D) * 16, MathHelper.floor_double(d4 / 16.0D) * 16, MathHelper.floor_double(d5 / 16.0D) * 16);
          this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
          this.lastViewEntityX = viewEntity.posX;
--- 1084,1091 ----
          }
  
          this.mc.mcProfiler.endStartSection("culling");
!         BlockPos blockpos2 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
!         RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos2);
          BlockPos blockpos = new BlockPos(MathHelper.floor_double(d3 / 16.0D) * 16, MathHelper.floor_double(d4 / 16.0D) * 16, MathHelper.floor_double(d5 / 16.0D) * 16);
          this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
          this.lastViewEntityX = viewEntity.posX;
***************
*** 819,837 ****
          this.lastViewEntityPitch = (double)viewEntity.rotationPitch;
          this.lastViewEntityYaw = (double)viewEntity.rotationYaw;
          boolean flag = this.debugFixedClippingHelper != null;
  
!         if (!flag && this.displayListEntitiesDirty)
          {
              this.displayListEntitiesDirty = false;
!             this.renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayList();
!             Queue<RenderGlobal.ContainerLocalRenderInformation> queue = Lists.<RenderGlobal.ContainerLocalRenderInformation>newLinkedList();
              boolean flag1 = this.mc.renderChunksMany;
  
              if (renderchunk != null)
              {
                  boolean flag2 = false;
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
!                 Set<EnumFacing> set1 = this.getVisibleFacings(blockpos1);
  
                  if (set1.size() == 1)
                  {
--- 1094,1165 ----
          this.lastViewEntityPitch = (double)viewEntity.rotationPitch;
          this.lastViewEntityYaw = (double)viewEntity.rotationYaw;
          boolean flag = this.debugFixedClippingHelper != null;
+         Lagometer.timerVisibility.start();
  
!         if (Shaders.isShadowPass)
!         {
!             this.renderInfos = this.renderInfosShadow;
!             this.renderInfosEntities = this.renderInfosEntitiesShadow;
!             this.renderInfosTileEntities = this.renderInfosTileEntitiesShadow;
! 
!             if (!flag && this.displayListEntitiesDirty)
!             {
!                 this.renderInfos.clear();
!                 this.renderInfosEntities.clear();
!                 this.renderInfosTileEntities.clear();
!                 RenderInfoLazy renderinfolazy = new RenderInfoLazy();
!                 Iterator<RenderChunk> iterator = ShadowUtils.makeShadowChunkIterator(this.theWorld, partialTicks, viewEntity, this.renderDistanceChunks, this.viewFrustum);
! 
!                 while (iterator.hasNext())
!                 {
!                     RenderChunk renderchunk1 = (RenderChunk)iterator.next();
! 
!                     if (renderchunk1 != null)
!                     {
!                         renderinfolazy.setRenderChunk(renderchunk1);
! 
!                         if (!renderchunk1.compiledChunk.isEmpty() || renderchunk1.isNeedsUpdate())
!                         {
!                             this.renderInfos.add(renderinfolazy.getRenderInfo());
!                         }
! 
!                         BlockPos blockpos1 = renderchunk1.getPosition();
! 
!                         if (ChunkUtils.hasEntities(this.theWorld.getChunkFromBlockCoords(blockpos1)))
!                         {
!                             this.renderInfosEntities.add(renderinfolazy.getRenderInfo());
!                         }
! 
!                         if (renderchunk1.getCompiledChunk().getTileEntities().size() > 0)
!                         {
!                             this.renderInfosTileEntities.add(renderinfolazy.getRenderInfo());
!                         }
!                     }
!                 }
!             }
!         }
!         else
!         {
!             this.renderInfos = this.renderInfosNormal;
!             this.renderInfosEntities = this.renderInfosEntitiesNormal;
!             this.renderInfosTileEntities = this.renderInfosTileEntitiesNormal;
!         }
! 
!         if (!flag && this.displayListEntitiesDirty && !Shaders.isShadowPass)
          {
              this.displayListEntitiesDirty = false;
!             this.renderInfos.clear();
!             this.renderInfosEntities.clear();
!             this.renderInfosTileEntities.clear();
!             this.visibilityDeque.clear();
!             Deque deque = this.visibilityDeque;
              boolean flag1 = this.mc.renderChunksMany;
  
              if (renderchunk != null)
              {
                  boolean flag2 = false;
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0, (Object)null);
!                 Set set1 = SET_ALL_FACINGS;
  
                  if (set1.size() == 1)
                  {
***************
*** 851,902 ****
                  }
                  else
                  {
!                     if (playerSpectator && this.theWorld.getBlockState(blockpos1).getBlock().isOpaqueCube())
                      {
                          flag1 = false;
                      }
  
                      renderchunk.setFrameIndex(frameCount);
!                     queue.add(renderglobal$containerlocalrenderinformation3);
                  }
              }
              else
              {
!                 int i = blockpos1.getY() > 0 ? 248 : 8;
  
                  for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
                  {
                      for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k)
                      {
!                         RenderChunk renderchunk1 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
  
!                         if (renderchunk1 != null && ((ICamera)camera).isBoundingBoxInFrustum(renderchunk1.boundingBox))
                          {
!                             renderchunk1.setFrameIndex(frameCount);
!                             queue.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk1, (EnumFacing)null, 0));
                          }
                      }
                  }
              }
  
!             while (!((Queue)queue).isEmpty())
              {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation)queue.poll();
!                 RenderChunk renderchunk3 = renderglobal$containerlocalrenderinformation1.renderChunk;
                  EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation1.facing;
!                 BlockPos blockpos2 = renderchunk3.getPosition();
!                 this.renderInfos.add(renderglobal$containerlocalrenderinformation1);
  
!                 for (EnumFacing enumfacing1 : EnumFacing.values())
                  {
!                     RenderChunk renderchunk2 = this.func_181562_a(blockpos, renderchunk3, enumfacing1);
  
!                     if ((!flag1 || !renderglobal$containerlocalrenderinformation1.setFacing.contains(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk3.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1)) && renderchunk2 != null && renderchunk2.setFrameIndex(frameCount) && ((ICamera)camera).isBoundingBoxInFrustum(renderchunk2.boundingBox))
                      {
!                         RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1);
!                         renderglobal$containerlocalrenderinformation.setFacing.addAll(renderglobal$containerlocalrenderinformation1.setFacing);
!                         renderglobal$containerlocalrenderinformation.setFacing.add(enumfacing1);
!                         queue.add(renderglobal$containerlocalrenderinformation);
                      }
                  }
              }
--- 1179,1252 ----
                  }
                  else
                  {
!                     if (playerSpectator && this.theWorld.getBlockState(blockpos2).getBlock().isOpaqueCube())
                      {
                          flag1 = false;
                      }
  
                      renderchunk.setFrameIndex(frameCount);
!                     deque.add(renderglobal$containerlocalrenderinformation3);
                  }
              }
              else
              {
!                 int i = blockpos2.getY() > 0 ? 248 : 8;
  
                  for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
                  {
                      for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k)
                      {
!                         RenderChunk renderchunk2 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
  
!                         if (renderchunk2 != null && ((ICamera)camera).isBoundingBoxInFrustum(renderchunk2.boundingBox))
                          {
!                             renderchunk2.setFrameIndex(frameCount);
!                             deque.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, (EnumFacing)null, 0, (Object)null));
                          }
                      }
                  }
              }
  
!             EnumFacing[] aenumfacing = EnumFacing.VALUES;
!             int l = aenumfacing.length;
! 
!             while (!deque.isEmpty())
              {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation)deque.poll();
!                 RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation1.renderChunk;
                  EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation1.facing;
!                 BlockPos blockpos3 = renderchunk4.getPosition();
  
!                 if (!renderchunk4.compiledChunk.isEmpty() || renderchunk4.isNeedsUpdate())
                  {
!                     this.renderInfos.add(renderglobal$containerlocalrenderinformation1);
!                 }
  
!                 if (ChunkUtils.hasEntities(this.theWorld.getChunkFromBlockCoords(blockpos3)))
!                 {
!                     this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation1);
!                 }
! 
!                 if (renderchunk4.getCompiledChunk().getTileEntities().size() > 0)
!                 {
!                     this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation1);
!                 }
! 
!                 for (int i1 = 0; i1 < l; ++i1)
!                 {
!                     EnumFacing enumfacing1 = aenumfacing[i1];
! 
!                     if ((!flag1 || !renderglobal$containerlocalrenderinformation1.setFacing.contains(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk4.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1)))
                      {
!                         RenderChunk renderchunk3 = this.func_181562_a(blockpos2, renderchunk4, enumfacing1);
! 
!                         if (renderchunk3 != null && renderchunk3.setFrameIndex(frameCount) && ((ICamera)camera).isBoundingBoxInFrustum(renderchunk3.boundingBox))
!                         {
!                             RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk3, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1, (Object)null);
!                             renderglobal$containerlocalrenderinformation.setFacing.addAll(renderglobal$containerlocalrenderinformation1.setFacing);
!                             renderglobal$containerlocalrenderinformation.setFacing.add(enumfacing1);
!                             deque.add(renderglobal$containerlocalrenderinformation);
!                         }
                      }
                  }
              }
***************
*** 908,941 ****
              this.debugFixTerrainFrustum = false;
          }
  
!         this.renderDispatcher.clearChunkUpdates();
!         Set<RenderChunk> set = this.chunksToUpdate;
!         this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
  
!         for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
          {
!             RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation2.renderChunk;
  
!             if (renderchunk4.isNeedsUpdate() || set.contains(renderchunk4))
              {
!                 this.displayListEntitiesDirty = true;
  
!                 if (this.isPositionInRenderChunk(blockpos, renderglobal$containerlocalrenderinformation2.renderChunk))
                  {
!                     this.mc.mcProfiler.startSection("build near");
!                     this.renderDispatcher.updateChunkNow(renderchunk4);
!                     renderchunk4.setNeedsUpdate(false);
!                     this.mc.mcProfiler.endSection();
!                 }
!                 else
!                 {
!                     this.chunksToUpdate.add(renderchunk4);
                  }
              }
-         }
  
!         this.chunksToUpdate.addAll(set);
!         this.mc.mcProfiler.endSection();
      }
  
      private boolean isPositionInRenderChunk(BlockPos pos, RenderChunk renderChunkIn)
--- 1258,1311 ----
              this.debugFixTerrainFrustum = false;
          }
  
!         Lagometer.timerVisibility.end();
  
!         if (Shaders.isShadowPass)
          {
!             Shaders.mcProfilerEndSection();
!         }
!         else
!         {
!             this.renderDispatcher.clearChunkUpdates();
!             Set set = this.chunksToUpdate;
!             this.chunksToUpdate = Sets.newLinkedHashSet();
!             Iterator iterator1 = this.renderInfos.iterator();
!             Lagometer.timerChunkUpdate.start();
  
!             while (iterator1.hasNext())
              {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 = (RenderGlobal.ContainerLocalRenderInformation)iterator1.next();
!                 RenderChunk renderchunk5 = renderglobal$containerlocalrenderinformation2.renderChunk;
  
!                 if (renderchunk5.isNeedsUpdate() || set.contains(renderchunk5))
                  {
!                     this.displayListEntitiesDirty = true;
! 
!                     if (this.isPositionInRenderChunk(blockpos, renderglobal$containerlocalrenderinformation2.renderChunk))
!                     {
!                         if (!renderchunk5.isPlayerUpdate())
!                         {
!                             this.chunksToUpdateForced.add(renderchunk5);
!                         }
!                         else
!                         {
!                             this.mc.mcProfiler.startSection("build near");
!                             this.renderDispatcher.updateChunkNow(renderchunk5);
!                             renderchunk5.setNeedsUpdate(false);
!                             this.mc.mcProfiler.endSection();
!                         }
!                     }
!                     else
!                     {
!                         this.chunksToUpdate.add(renderchunk5);
!                     }
                  }
              }
  
!             Lagometer.timerChunkUpdate.end();
!             this.chunksToUpdate.addAll(set);
!             this.mc.mcProfiler.endSection();
!         }
      }
  
      private boolean isPositionInRenderChunk(BlockPos pos, RenderChunk renderChunkIn)
***************
*** 944,950 ****
          return MathHelper.abs_int(pos.getX() - blockpos.getX()) > 16 ? false : (MathHelper.abs_int(pos.getY() - blockpos.getY()) > 16 ? false : MathHelper.abs_int(pos.getZ() - blockpos.getZ()) <= 16);
      }
  
!     private Set<EnumFacing> getVisibleFacings(BlockPos pos)
      {
          VisGraph visgraph = new VisGraph();
          BlockPos blockpos = new BlockPos(pos.getX() >> 4 << 4, pos.getY() >> 4 << 4, pos.getZ() >> 4 << 4);
--- 1314,1320 ----
          return MathHelper.abs_int(pos.getX() - blockpos.getX()) > 16 ? false : (MathHelper.abs_int(pos.getY() - blockpos.getY()) > 16 ? false : MathHelper.abs_int(pos.getZ() - blockpos.getZ()) <= 16);
      }
  
!     private Set getVisibleFacings(BlockPos pos)
      {
          VisGraph visgraph = new VisGraph();
          BlockPos blockpos = new BlockPos(pos.getX() >> 4 << 4, pos.getY() >> 4 << 4, pos.getZ() >> 4 << 4);
***************
*** 962,969 ****
  
      private RenderChunk func_181562_a(BlockPos p_181562_1_, RenderChunk p_181562_2_, EnumFacing p_181562_3_)
      {
!         BlockPos blockpos = p_181562_2_.func_181701_a(p_181562_3_);
!         return MathHelper.abs_int(p_181562_1_.getX() - blockpos.getX()) > this.renderDistanceChunks * 16 ? null : (blockpos.getY() >= 0 && blockpos.getY() < 256 ? (MathHelper.abs_int(p_181562_1_.getZ() - blockpos.getZ()) > this.renderDistanceChunks * 16 ? null : this.viewFrustum.getRenderChunk(blockpos)) : null);
      }
  
      private void fixTerrainFrustum(double x, double y, double z)
--- 1332,1367 ----
  
      private RenderChunk func_181562_a(BlockPos p_181562_1_, RenderChunk p_181562_2_, EnumFacing p_181562_3_)
      {
!         BlockPos blockpos = p_181562_2_.getPositionOffset16(p_181562_3_);
! 
!         if (blockpos.getY() >= 0 && blockpos.getY() < 256)
!         {
!             int i = MathHelper.abs_int(p_181562_1_.getX() - blockpos.getX());
!             int j = MathHelper.abs_int(p_181562_1_.getZ() - blockpos.getZ());
! 
!             if (Config.isFogOff())
!             {
!                 if (i > this.renderDistance || j > this.renderDistance)
!                 {
!                     return null;
!                 }
!             }
!             else
!             {
!                 int k = i * i + j * j;
! 
!                 if (k > this.renderDistanceSq)
!                 {
!                     return null;
!                 }
!             }
! 
!             return this.viewFrustum.getRenderChunk(blockpos);
!         }
!         else
!         {
!             return null;
!         }
      }
  
      private void fixTerrainFrustum(double x, double y, double z)
***************
*** 1033,1044 ****
                  this.prevRenderSortY = entityIn.posY;
                  this.prevRenderSortZ = entityIn.posZ;
                  int k = 0;
  
!                 for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
                  {
                      if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                      {
!                         this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);
                      }
                  }
              }
--- 1431,1446 ----
                  this.prevRenderSortY = entityIn.posY;
                  this.prevRenderSortZ = entityIn.posZ;
                  int k = 0;
+                 Iterator iterator = this.renderInfos.iterator();
+                 this.chunksToResortTransparency.clear();
  
!                 while (iterator.hasNext())
                  {
+                     RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation)iterator.next();
+ 
                      if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                      {
!                         this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
                      }
                  }
              }
***************
*** 1064,1076 ****
              }
          }
  
!         this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
!         this.renderBlockLayer(blockLayerIn);
!         this.mc.mcProfiler.endSection();
!         return l;
      }
  
-     @SuppressWarnings("incomplete-switch")
      private void renderBlockLayer(EnumWorldBlockLayer blockLayerIn)
      {
          this.mc.entityRenderer.enableLightmap();
--- 1466,1490 ----
              }
          }
  
!         if (l == 0)
!         {
!             this.mc.mcProfiler.endSection();
!             return l;
!         }
!         else
!         {
!             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
!             {
!                 GlStateManager.disableFog();
!             }
! 
!             this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
!             this.renderBlockLayer(blockLayerIn);
!             this.mc.mcProfiler.endSection();
!             return l;
!         }
      }
  
      private void renderBlockLayer(EnumWorldBlockLayer blockLayerIn)
      {
          this.mc.entityRenderer.enableLightmap();
***************
*** 1086,1093 ****
--- 1500,1517 ----
              GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
          }
  
+         if (Config.isShaders())
+         {
+             ShadersRender.preRenderChunkLayer(blockLayerIn);
+         }
+ 
          this.renderContainer.renderChunkLayer(blockLayerIn);
  
+         if (Config.isShaders())
+         {
+             ShadersRender.postRenderChunkLayer(blockLayerIn);
+         }
+ 
          if (OpenGlHelper.useVbo())
          {
              for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
***************
*** 1095,1113 ****
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
                  int i = vertexformatelement.getIndex();
  
!                 switch (vertexformatelement$enumusage)
                  {
!                     case POSITION:
                          GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
                          break;
  
!                     case UV:
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
                          GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                          break;
  
!                     case COLOR:
                          GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
                          GlStateManager.resetColor();
                  }
--- 1519,1537 ----
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
                  int i = vertexformatelement.getIndex();
  
!                 switch (RenderGlobal.RenderGlobal$2.field_178037_a[vertexformatelement$enumusage.ordinal()])
                  {
!                     case 1:
                          GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
                          break;
  
!                     case 2:
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
                          GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                          break;
  
!                     case 3:
                          GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
                          GlStateManager.resetColor();
                  }
***************
*** 1117,1123 ****
          this.mc.entityRenderer.disableLightmap();
      }
  
!     private void cleanupDamagedBlocks(Iterator<DestroyBlockProgress> iteratorIn)
      {
          while (iteratorIn.hasNext())
          {
--- 1541,1547 ----
          this.mc.entityRenderer.disableLightmap();
      }
  
!     private void cleanupDamagedBlocks(Iterator iteratorIn)
      {
          while (iteratorIn.hasNext())
          {
***************
*** 1133,1138 ****
--- 1557,1568 ----
  
      public void updateClouds()
      {
+         if (Config.isShaders() && Keyboard.isKeyDown(61) && Keyboard.isKeyDown(19))
+         {
+             Shaders.uninit();
+             Shaders.loadShaderPack();
+         }
+ 
          ++this.cloudTickCounter;
  
          if (this.cloudTickCounter % 20 == 0)
***************
*** 1143,1203 ****
  
      private void renderSkyEnd()
      {
!         GlStateManager.disableFog();
!         GlStateManager.disableAlpha();
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!         RenderHelper.disableStandardItemLighting();
!         GlStateManager.depthMask(false);
!         this.renderEngine.bindTexture(locationEndSkyPng);
!         Tessellator tessellator = Tessellator.getInstance();
!         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
! 
!         for (int i = 0; i < 6; ++i)
          {
!             GlStateManager.pushMatrix();
  
!             if (i == 1)
              {
!                 GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 2)
!             {
!                 GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 3)
!             {
!                 GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 4)
!             {
!                 GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
!             }
  
!             if (i == 5)
!             {
!                 GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
              }
  
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!             worldrenderer.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!             worldrenderer.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!             worldrenderer.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!             worldrenderer.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!             tessellator.draw();
!             GlStateManager.popMatrix();
          }
- 
-         GlStateManager.depthMask(true);
-         GlStateManager.enableTexture2D();
-         GlStateManager.enableAlpha();
      }
  
      public void renderSky(float partialTicks, int pass)
      {
          if (this.mc.theWorld.provider.getDimensionId() == 1)
          {
              this.renderSkyEnd();
--- 1573,1648 ----
  
      private void renderSkyEnd()
      {
!         if (Config.isSkyEnabled())
          {
!             GlStateManager.disableFog();
!             GlStateManager.disableAlpha();
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
!             RenderHelper.disableStandardItemLighting();
!             GlStateManager.depthMask(false);
!             this.renderEngine.bindTexture(locationEndSkyPng);
!             Tessellator tessellator = Tessellator.getInstance();
!             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
  
!             for (int i = 0; i < 6; ++i)
              {
!                 GlStateManager.pushMatrix();
  
!                 if (i == 1)
!                 {
!                     GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (i == 2)
!                 {
!                     GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (i == 3)
!                 {
!                     GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (i == 4)
!                 {
!                     GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
!                 }
! 
!                 if (i == 5)
!                 {
!                     GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
!                 }
! 
!                 worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!                 worldrenderer.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!                 worldrenderer.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!                 worldrenderer.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!                 worldrenderer.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!                 tessellator.draw();
!                 GlStateManager.popMatrix();
              }
  
!             GlStateManager.depthMask(true);
!             GlStateManager.enableTexture2D();
!             GlStateManager.enableAlpha();
          }
      }
  
      public void renderSky(float partialTicks, int pass)
      {
+         if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
+         {
+             WorldProvider worldprovider = this.mc.theWorld.provider;
+             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer, new Object[0]);
+ 
+             if (object != null)
+             {
+                 Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(partialTicks), this.theWorld, this.mc});
+                 return;
+             }
+         }
+ 
          if (this.mc.theWorld.provider.getDimensionId() == 1)
          {
              this.renderSkyEnd();
***************
*** 1205,1211 ****
--- 1650,1670 ----
          else if (this.mc.theWorld.provider.isSurfaceWorld())
          {
              GlStateManager.disableTexture2D();
+             boolean flag1 = Config.isShaders();
+ 
+             if (flag1)
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              Vec3 vec3 = this.theWorld.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
+             vec3 = CustomColors.getSkyColor(vec3, this.mc.theWorld, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
+ 
+             if (flag1)
+             {
+                 Shaders.setSkyColor(vec3);
+             }
+ 
              float f = (float)vec3.xCoord;
              float f1 = (float)vec3.yCoord;
              float f2 = (float)vec3.zCoord;
***************
*** 1225,1256 ****
              WorldRenderer worldrenderer = tessellator.getWorldRenderer();
              GlStateManager.depthMask(false);
              GlStateManager.enableFog();
              GlStateManager.color(f, f1, f2);
  
!             if (this.vboEnabled)
              {
!                 this.skyVBO.bindBuffer();
!                 GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
!                 GL11.glVertexPointer(3, GL11.GL_FLOAT, 12, 0L);
!                 this.skyVBO.drawArrays(7);
!                 this.skyVBO.unbindBuffer();
!                 GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
              }
!             else
              {
!                 GlStateManager.callList(this.glSkyList);
              }
  
              GlStateManager.disableFog();
              GlStateManager.disableAlpha();
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
              RenderHelper.disableStandardItemLighting();
              float[] afloat = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(partialTicks), partialTicks);
  
!             if (afloat != null)
              {
                  GlStateManager.disableTexture2D();
                  GlStateManager.shadeModel(7425);
                  GlStateManager.pushMatrix();
                  GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
--- 1684,1741 ----
              WorldRenderer worldrenderer = tessellator.getWorldRenderer();
              GlStateManager.depthMask(false);
              GlStateManager.enableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.enableFog();
+             }
+ 
              GlStateManager.color(f, f1, f2);
  
!             if (flag1)
              {
!                 Shaders.preSkyList();
              }
! 
!             if (Config.isSkyEnabled())
              {
!                 if (this.vboEnabled)
!                 {
!                     this.skyVBO.bindBuffer();
!                     GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
!                     GL11.glVertexPointer(3, GL11.GL_FLOAT, 12, 0L);
!                     this.skyVBO.drawArrays(7);
!                     this.skyVBO.unbindBuffer();
!                     GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
!                 }
!                 else
!                 {
!                     GlStateManager.callList(this.glSkyList);
!                 }
              }
  
              GlStateManager.disableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.disableFog();
+             }
+ 
              GlStateManager.disableAlpha();
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
              RenderHelper.disableStandardItemLighting();
              float[] afloat = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(partialTicks), partialTicks);
  
!             if (afloat != null && Config.isSunMoonEnabled())
              {
                  GlStateManager.disableTexture2D();
+ 
+                 if (flag1)
+                 {
+                     Shaders.disableTexture2D();
+                 }
+ 
                  GlStateManager.shadeModel(7425);
                  GlStateManager.pushMatrix();
                  GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
***************
*** 1272,1284 ****
  
                  worldrenderer.begin(6, DefaultVertexFormats.POSITION_COLOR);
                  worldrenderer.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
!                 int j = 16;
  
!                 for (int l = 0; l <= 16; ++l)
                  {
!                     float f21 = (float)l * (float)Math.PI * 2.0F / 16.0F;
!                     float f12 = MathHelper.sin(f21);
!                     float f13 = MathHelper.cos(f21);
                      worldrenderer.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
                  }
  
--- 1757,1769 ----
  
                  worldrenderer.begin(6, DefaultVertexFormats.POSITION_COLOR);
                  worldrenderer.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
!                 boolean flag = true;
  
!                 for (int i = 0; i <= 16; ++i)
                  {
!                     float f20 = (float)i * (float)Math.PI * 2.0F / 16.0F;
!                     float f12 = MathHelper.sin(f20);
!                     float f13 = MathHelper.cos(f20);
                      worldrenderer.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
                  }
  
***************
*** 1287,1328 ****
                  GlStateManager.shadeModel(7424);
              }
  
!             GlStateManager.enableTexture2D();
!             GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
!             GlStateManager.pushMatrix();
!             float f16 = 1.0F - this.theWorld.getRainStrength(partialTicks);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, f16);
!             GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
!             GlStateManager.rotate(this.theWorld.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
!             float f17 = 30.0F;
!             this.renderEngine.bindTexture(locationSunPng);
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!             worldrenderer.pos((double)(-f17), 100.0D, (double)(-f17)).tex(0.0D, 0.0D).endVertex();
!             worldrenderer.pos((double)f17, 100.0D, (double)(-f17)).tex(1.0D, 0.0D).endVertex();
!             worldrenderer.pos((double)f17, 100.0D, (double)f17).tex(1.0D, 1.0D).endVertex();
!             worldrenderer.pos((double)(-f17), 100.0D, (double)f17).tex(0.0D, 1.0D).endVertex();
!             tessellator.draw();
!             f17 = 20.0F;
!             this.renderEngine.bindTexture(locationMoonPhasesPng);
!             int i = this.theWorld.getMoonPhase();
!             int k = i % 4;
!             int i1 = i / 4 % 2;
!             float f22 = (float)(k + 0) / 4.0F;
!             float f23 = (float)(i1 + 0) / 2.0F;
!             float f24 = (float)(k + 1) / 4.0F;
!             float f14 = (float)(i1 + 1) / 2.0F;
!             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!             worldrenderer.pos((double)(-f17), -100.0D, (double)f17).tex((double)f24, (double)f14).endVertex();
!             worldrenderer.pos((double)f17, -100.0D, (double)f17).tex((double)f22, (double)f14).endVertex();
!             worldrenderer.pos((double)f17, -100.0D, (double)(-f17)).tex((double)f22, (double)f23).endVertex();
!             worldrenderer.pos((double)(-f17), -100.0D, (double)(-f17)).tex((double)f24, (double)f23).endVertex();
!             tessellator.draw();
              GlStateManager.disableTexture2D();
-             float f15 = this.theWorld.getStarBrightness(partialTicks) * f16;
  
!             if (f15 > 0.0F)
              {
!                 GlStateManager.color(f15, f15, f15, f15);
  
                  if (this.vboEnabled)
                  {
--- 1772,1848 ----
                  GlStateManager.shadeModel(7424);
              }
  
!             GlStateManager.enableTexture2D();
! 
!             if (flag1)
!             {
!                 Shaders.enableTexture2D();
!             }
! 
!             GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
!             GlStateManager.pushMatrix();
!             float f15 = 1.0F - this.theWorld.getRainStrength(partialTicks);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, f15);
!             GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
!             CustomSky.renderSky(this.theWorld, this.renderEngine, this.theWorld.getCelestialAngle(partialTicks), f15);
! 
!             if (flag1)
!             {
!                 Shaders.preCelestialRotate();
!             }
! 
!             GlStateManager.rotate(this.theWorld.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
! 
!             if (flag1)
!             {
!                 Shaders.postCelestialRotate();
!             }
! 
!             float f16 = 30.0F;
! 
!             if (Config.isSunTexture())
!             {
!                 this.renderEngine.bindTexture(locationSunPng);
!                 worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!                 worldrenderer.pos((double)(-f16), 100.0D, (double)(-f16)).tex(0.0D, 0.0D).endVertex();
!                 worldrenderer.pos((double)f16, 100.0D, (double)(-f16)).tex(1.0D, 0.0D).endVertex();
!                 worldrenderer.pos((double)f16, 100.0D, (double)f16).tex(1.0D, 1.0D).endVertex();
!                 worldrenderer.pos((double)(-f16), 100.0D, (double)f16).tex(0.0D, 1.0D).endVertex();
!                 tessellator.draw();
!             }
! 
!             f16 = 20.0F;
! 
!             if (Config.isMoonTexture())
!             {
!                 this.renderEngine.bindTexture(locationMoonPhasesPng);
!                 int l = this.theWorld.getMoonPhase();
!                 int j = l % 4;
!                 int k = l / 4 % 2;
!                 float f21 = (float)(j + 0) / 4.0F;
!                 float f22 = (float)(k + 0) / 2.0F;
!                 float f23 = (float)(j + 1) / 4.0F;
!                 float f14 = (float)(k + 1) / 2.0F;
!                 worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
!                 worldrenderer.pos((double)(-f16), -100.0D, (double)f16).tex((double)f23, (double)f14).endVertex();
!                 worldrenderer.pos((double)f16, -100.0D, (double)f16).tex((double)f21, (double)f14).endVertex();
!                 worldrenderer.pos((double)f16, -100.0D, (double)(-f16)).tex((double)f21, (double)f22).endVertex();
!                 worldrenderer.pos((double)(-f16), -100.0D, (double)(-f16)).tex((double)f23, (double)f22).endVertex();
!                 tessellator.draw();
!             }
! 
              GlStateManager.disableTexture2D();
  
!             if (flag1)
!             {
!                 Shaders.disableTexture2D();
!             }
! 
!             float f24 = this.theWorld.getStarBrightness(partialTicks) * f15;
! 
!             if (f24 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
              {
!                 GlStateManager.color(f24, f24, f24, f24);
  
                  if (this.vboEnabled)
                  {
***************
*** 1343,1350 ****
--- 1863,1882 ----
              GlStateManager.disableBlend();
              GlStateManager.enableAlpha();
              GlStateManager.enableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.enableFog();
+             }
+ 
              GlStateManager.popMatrix();
              GlStateManager.disableTexture2D();
+ 
+             if (flag1)
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              GlStateManager.color(0.0F, 0.0F, 0.0F);
              double d0 = this.mc.thePlayer.getPositionEyes(partialTicks).yCoord - this.theWorld.getHorizon();
  
***************
*** 1368,1391 ****
                  }
  
                  GlStateManager.popMatrix();
!                 float f18 = 1.0F;
!                 float f19 = -((float)(d0 + 65.0D));
!                 float f20 = -1.0F;
                  worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                 worldrenderer.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
--- 1900,1923 ----
                  }
  
                  GlStateManager.popMatrix();
!                 float f17 = 1.0F;
!                 float f18 = -((float)(d0 + 65.0D));
!                 float f19 = -1.0F;
                  worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                 worldrenderer.pos(-1.0D, (double)f18, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f18, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f18, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f18, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f18, 1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(1.0D, (double)f18, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f18, -1.0D).color(0, 0, 0, 255).endVertex();
!                 worldrenderer.pos(-1.0D, (double)f18, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  worldrenderer.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
***************
*** 1404,1480 ****
                  GlStateManager.color(f, f1, f2);
              }
  
              GlStateManager.pushMatrix();
              GlStateManager.translate(0.0F, -((float)(d0 - 16.0D)), 0.0F);
!             GlStateManager.callList(this.glSkyList2);
              GlStateManager.popMatrix();
              GlStateManager.enableTexture2D();
              GlStateManager.depthMask(true);
          }
      }
  
      public void renderClouds(float partialTicks, int pass)
      {
!         if (this.mc.theWorld.provider.isSurfaceWorld())
          {
!             if (this.mc.gameSettings.func_181147_e() == 2)
              {
!                 this.renderCloudsFancy(partialTicks, pass);
              }
-             else
-             {
-                 GlStateManager.disableCull();
-                 float f = (float)(this.mc.getRenderViewEntity().lastTickPosY + (this.mc.getRenderViewEntity().posY - this.mc.getRenderViewEntity().lastTickPosY) * (double)partialTicks);
-                 int i = 32;
-                 int j = 8;
-                 Tessellator tessellator = Tessellator.getInstance();
-                 WorldRenderer worldrenderer = tessellator.getWorldRenderer();
-                 this.renderEngine.bindTexture(locationCloudsPng);
-                 GlStateManager.enableBlend();
-                 GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
-                 Vec3 vec3 = this.theWorld.getCloudColour(partialTicks);
-                 float f1 = (float)vec3.xCoord;
-                 float f2 = (float)vec3.yCoord;
-                 float f3 = (float)vec3.zCoord;
  
!                 if (pass != 2)
                  {
!                     float f4 = (f1 * 30.0F + f2 * 59.0F + f3 * 11.0F) / 100.0F;
!                     float f5 = (f1 * 30.0F + f2 * 70.0F) / 100.0F;
!                     float f6 = (f1 * 30.0F + f3 * 70.0F) / 100.0F;
!                     f1 = f4;
!                     f2 = f5;
!                     f3 = f6;
!                 }
! 
!                 float f10 = 4.8828125E-4F;
!                 double d2 = (double)((float)this.cloudTickCounter + partialTicks);
!                 double d0 = this.mc.getRenderViewEntity().prevPosX + (this.mc.getRenderViewEntity().posX - this.mc.getRenderViewEntity().prevPosX) * (double)partialTicks + d2 * 0.029999999329447746D;
!                 double d1 = this.mc.getRenderViewEntity().prevPosZ + (this.mc.getRenderViewEntity().posZ - this.mc.getRenderViewEntity().prevPosZ) * (double)partialTicks;
!                 int k = MathHelper.floor_double(d0 / 2048.0D);
!                 int l = MathHelper.floor_double(d1 / 2048.0D);
!                 d0 = d0 - (double)(k * 2048);
!                 d1 = d1 - (double)(l * 2048);
!                 float f7 = this.theWorld.provider.getCloudHeight() - f + 0.33F;
!                 float f8 = (float)(d0 * 4.8828125E-4D);
!                 float f9 = (float)(d1 * 4.8828125E-4D);
!                 worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!                 for (int i1 = -256; i1 < 256; i1 += 32)
                  {
!                     for (int j1 = -256; j1 < 256; j1 += 32)
!                     {
!                         worldrenderer.pos((double)(i1 + 0), (double)f7, (double)(j1 + 32)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f8), (double)((float)(j1 + 32) * 4.8828125E-4F + f9)).color(f1, f2, f3, 0.8F).endVertex();
!                         worldrenderer.pos((double)(i1 + 32), (double)f7, (double)(j1 + 32)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f8), (double)((float)(j1 + 32) * 4.8828125E-4F + f9)).color(f1, f2, f3, 0.8F).endVertex();
!                         worldrenderer.pos((double)(i1 + 32), (double)f7, (double)(j1 + 0)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f8), (double)((float)(j1 + 0) * 4.8828125E-4F + f9)).color(f1, f2, f3, 0.8F).endVertex();
!                         worldrenderer.pos((double)(i1 + 0), (double)f7, (double)(j1 + 0)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f8), (double)((float)(j1 + 0) * 4.8828125E-4F + f9)).color(f1, f2, f3, 0.8F).endVertex();
                      }
                  }
  
!                 tessellator.draw();
!                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!                 GlStateManager.disableBlend();
!                 GlStateManager.enableCull();
              }
          }
      }
--- 1936,2064 ----
                  GlStateManager.color(f, f1, f2);
              }
  
+             if (this.mc.gameSettings.renderDistanceChunks <= 4)
+             {
+                 GlStateManager.color(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
+             }
+ 
              GlStateManager.pushMatrix();
              GlStateManager.translate(0.0F, -((float)(d0 - 16.0D)), 0.0F);
! 
!             if (Config.isSkyEnabled())
!             {
!                 GlStateManager.callList(this.glSkyList2);
!             }
! 
              GlStateManager.popMatrix();
              GlStateManager.enableTexture2D();
+ 
+             if (flag1)
+             {
+                 Shaders.enableTexture2D();
+             }
+ 
              GlStateManager.depthMask(true);
          }
      }
  
      public void renderClouds(float partialTicks, int pass)
      {
!         if (!Config.isCloudsOff())
          {
!             if (Reflector.ForgeWorldProvider_getCloudRenderer.exists())
              {
!                 WorldProvider worldprovider = this.mc.theWorld.provider;
!                 Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer, new Object[0]);
! 
!                 if (object != null)
!                 {
!                     Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(partialTicks), this.theWorld, this.mc});
!                     return;
!                 }
              }
  
!             if (this.mc.theWorld.provider.isSurfaceWorld())
!             {
!                 if (Config.isShaders())
                  {
!                     Shaders.beginClouds();
!                 }
  
!                 if (Config.isCloudsFancy())
                  {
!                     this.renderCloudsFancy(partialTicks, pass);
!                 }
!                 else
!                 {
!                     this.cloudRenderer.prepareToRender(false, this.cloudTickCounter, partialTicks);
!                     partialTicks = 0.0F;
!                     GlStateManager.disableCull();
!                     float f9 = (float)(this.mc.getRenderViewEntity().lastTickPosY + (this.mc.getRenderViewEntity().posY - this.mc.getRenderViewEntity().lastTickPosY) * (double)partialTicks);
!                     boolean flag = true;
!                     boolean flag1 = true;
!                     Tessellator tessellator = Tessellator.getInstance();
!                     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
!                     this.renderEngine.bindTexture(locationCloudsPng);
!                     GlStateManager.enableBlend();
!                     GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
! 
!                     if (this.cloudRenderer.shouldUpdateGlList())
!                     {
!                         this.cloudRenderer.startUpdateGlList();
!                         Vec3 vec3 = this.theWorld.getCloudColour(partialTicks);
!                         float f = (float)vec3.xCoord;
!                         float f1 = (float)vec3.yCoord;
!                         float f2 = (float)vec3.zCoord;
! 
!                         if (pass != 2)
!                         {
!                             float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
!                             float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
!                             float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
!                             f = f3;
!                             f1 = f4;
!                             f2 = f5;
!                         }
! 
!                         float f10 = 4.8828125E-4F;
!                         double d2 = (double)((float)this.cloudTickCounter + partialTicks);
!                         double d0 = this.mc.getRenderViewEntity().prevPosX + (this.mc.getRenderViewEntity().posX - this.mc.getRenderViewEntity().prevPosX) * (double)partialTicks + d2 * 0.029999999329447746D;
!                         double d1 = this.mc.getRenderViewEntity().prevPosZ + (this.mc.getRenderViewEntity().posZ - this.mc.getRenderViewEntity().prevPosZ) * (double)partialTicks;
!                         int i = MathHelper.floor_double(d0 / 2048.0D);
!                         int j = MathHelper.floor_double(d1 / 2048.0D);
!                         d0 = d0 - (double)(i * 2048);
!                         d1 = d1 - (double)(j * 2048);
!                         float f6 = this.theWorld.provider.getCloudHeight() - f9 + 0.33F;
!                         f6 = f6 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
!                         float f7 = (float)(d0 * 4.8828125E-4D);
!                         float f8 = (float)(d1 * 4.8828125E-4D);
!                         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
! 
!                         for (int k = -256; k < 256; k += 32)
!                         {
!                             for (int l = -256; l < 256; l += 32)
!                             {
!                                 worldrenderer.pos((double)(k + 0), (double)f6, (double)(l + 32)).tex((double)((float)(k + 0) * 4.8828125E-4F + f7), (double)((float)(l + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 worldrenderer.pos((double)(k + 32), (double)f6, (double)(l + 32)).tex((double)((float)(k + 32) * 4.8828125E-4F + f7), (double)((float)(l + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 worldrenderer.pos((double)(k + 32), (double)f6, (double)(l + 0)).tex((double)((float)(k + 32) * 4.8828125E-4F + f7), (double)((float)(l + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 worldrenderer.pos((double)(k + 0), (double)f6, (double)(l + 0)).tex((double)((float)(k + 0) * 4.8828125E-4F + f7), (double)((float)(l + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                             }
!                         }
! 
!                         tessellator.draw();
!                         this.cloudRenderer.endUpdateGlList();
                      }
+ 
+                     this.cloudRenderer.renderGlList();
+                     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+                     GlStateManager.disableBlend();
+                     GlStateManager.enableCull();
                  }
  
!                 if (Config.isShaders())
!                 {
!                     Shaders.endClouds();
!                 }
              }
          }
      }
***************
*** 1489,1494 ****
--- 2073,2080 ----
  
      private void renderCloudsFancy(float partialTicks, int pass)
      {
+         this.cloudRenderer.prepareToRender(true, this.cloudTickCounter, partialTicks);
+         partialTicks = 0.0F;
          GlStateManager.disableCull();
          float f = (float)(this.mc.getRenderViewEntity().lastTickPosY + (this.mc.getRenderViewEntity().posY - this.mc.getRenderViewEntity().lastTickPosY) * (double)partialTicks);
          Tessellator tessellator = Tessellator.getInstance();
***************
*** 1499,1504 ****
--- 2085,2091 ----
          double d1 = (this.mc.getRenderViewEntity().prevPosX + (this.mc.getRenderViewEntity().posX - this.mc.getRenderViewEntity().prevPosX) * (double)partialTicks + d0 * 0.029999999329447746D) / 12.0D;
          double d2 = (this.mc.getRenderViewEntity().prevPosZ + (this.mc.getRenderViewEntity().posZ - this.mc.getRenderViewEntity().prevPosZ) * (double)partialTicks) / 12.0D + 0.33000001311302185D;
          float f3 = this.theWorld.provider.getCloudHeight() - f + 0.33F;
+         f3 = f3 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
          int i = MathHelper.floor_double(d1 / 2048.0D);
          int j = MathHelper.floor_double(d2 / 2048.0D);
          d1 = d1 - (double)(i * 2048);
***************
*** 1535,1548 ****
          float f18 = (float)MathHelper.floor_double(d2) * 0.00390625F;
          float f19 = (float)(d1 - (double)MathHelper.floor_double(d1));
          float f20 = (float)(d2 - (double)MathHelper.floor_double(d2));
!         int k = 8;
!         int l = 4;
          float f21 = 9.765625E-4F;
          GlStateManager.scale(12.0F, 1.0F, 12.0F);
  
!         for (int i1 = 0; i1 < 2; ++i1)
          {
!             if (i1 == 0)
              {
                  GlStateManager.colorMask(false, false, false, false);
              }
--- 2122,2135 ----
          float f18 = (float)MathHelper.floor_double(d2) * 0.00390625F;
          float f19 = (float)(d1 - (double)MathHelper.floor_double(d1));
          float f20 = (float)(d2 - (double)MathHelper.floor_double(d2));
!         boolean flag = true;
!         boolean flag1 = true;
          float f21 = 9.765625E-4F;
          GlStateManager.scale(12.0F, 1.0F, 12.0F);
  
!         for (int k = 0; k < 2; ++k)
          {
!             if (k == 0)
              {
                  GlStateManager.colorMask(false, false, false, false);
              }
***************
*** 1563,1575 ****
                  }
              }
  
              for (int j1 = -3; j1 <= 4; ++j1)
              {
!                 for (int k1 = -3; k1 <= 4; ++k1)
                  {
                      worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
                      float f22 = (float)(j1 * 8);
!                     float f23 = (float)(k1 * 8);
                      float f24 = f22 - f19;
                      float f25 = f23 - f20;
  
--- 2150,2169 ----
                  }
              }
  
+             this.cloudRenderer.renderGlList();
+         }
+ 
+         if (this.cloudRenderer.shouldUpdateGlList())
+         {
+             this.cloudRenderer.startUpdateGlList();
+ 
              for (int j1 = -3; j1 <= 4; ++j1)
              {
!                 for (int l = -3; l <= 4; ++l)
                  {
                      worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
                      float f22 = (float)(j1 * 8);
!                     float f23 = (float)(l * 8);
                      float f24 = f22 - f19;
                      float f25 = f23 - f20;
  
***************
*** 1591,1641 ****
  
                      if (j1 > -1)
                      {
!                         for (int l1 = 0; l1 < 8; ++l1)
                          {
!                             worldrenderer.pos((double)(f24 + (float)l1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)l1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)l1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)l1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)l1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)l1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)l1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)l1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
                      if (j1 <= 1)
                      {
!                         for (int i2 = 0; i2 < 8; ++i2)
                          {
!                             worldrenderer.pos((double)(f24 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)i2 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)i2 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)i2 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)i2 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (k1 > -1)
                      {
!                         for (int j2 = 0; j2 < 8; ++j2)
                          {
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)j2 + 0.0F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)j2 + 0.0F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)j2 + 0.0F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)j2 + 0.0F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)j2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
                          }
                      }
  
!                     if (k1 <= 1)
                      {
!                         for (int k2 = 0; k2 < 8; ++k2)
                          {
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)k2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
                          }
                      }
  
                      tessellator.draw();
                  }
              }
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
--- 2185,2237 ----
  
                      if (j1 > -1)
                      {
!                         for (int i1 = 0; i1 < 8; ++i1)
                          {
!                             worldrenderer.pos((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)i1 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)i1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
                      if (j1 <= 1)
                      {
!                         for (int k1 = 0; k1 < 8; ++k1)
                          {
!                             worldrenderer.pos((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 8.0F)).tex((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 8.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 4.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + (float)k1 + 1.0F - 9.765625E-4F), (double)(f3 + 0.0F), (double)(f25 + 0.0F)).tex((double)((f22 + (float)k1 + 0.5F) * 0.00390625F + f17), (double)((f23 + 0.0F) * 0.00390625F + f18)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (l > -1)
                      {
!                         for (int l1 = 0; l1 < 8; ++l1)
                          {
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)l1 + 0.0F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)l1 + 0.0F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)l1 + 0.0F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)l1 + 0.0F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)l1 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
                          }
                      }
  
!                     if (l <= 1)
                      {
!                         for (int i2 = 0; i2 < 8; ++i2)
                          {
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 4.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 4.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 8.0F), (double)(f3 + 0.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 8.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             worldrenderer.pos((double)(f24 + 0.0F), (double)(f3 + 0.0F), (double)(f25 + (float)i2 + 1.0F - 9.765625E-4F)).tex((double)((f22 + 0.0F) * 0.00390625F + f17), (double)((f23 + (float)i2 + 0.5F) * 0.00390625F + f18)).color(f13, f14, f15, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
                          }
                      }
  
                      tessellator.draw();
                  }
              }
+ 
+             this.cloudRenderer.endUpdateGlList();
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
***************
*** 1645,1655 ****
  
      public void updateChunks(long finishTimeNano)
      {
          this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
  
!         if (!this.chunksToUpdate.isEmpty())
          {
!             Iterator<RenderChunk> iterator = this.chunksToUpdate.iterator();
  
              while (iterator.hasNext())
              {
--- 2241,2252 ----
  
      public void updateChunks(long finishTimeNano)
      {
+         finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
          this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
  
!         if (this.chunksToUpdateForced.size() > 0)
          {
!             Iterator iterator = this.chunksToUpdateForced.iterator();
  
              while (iterator.hasNext())
              {
***************
*** 1662,1675 ****
  
                  renderchunk.setNeedsUpdate(false);
                  iterator.remove();
!                 long i = finishTimeNano - System.nanoTime();
  
!                 if (i < 0L)
                  {
!                     break;
                  }
              }
          }
      }
  
      public void renderWorldBorder(Entity p_180449_1_, float partialTicks)
--- 2259,2313 ----
  
                  renderchunk.setNeedsUpdate(false);
                  iterator.remove();
!                 this.chunksToUpdate.remove(renderchunk);
!                 this.chunksToResortTransparency.remove(renderchunk);
!             }
!         }
! 
!         if (this.chunksToResortTransparency.size() > 0)
!         {
!             Iterator iterator2 = this.chunksToResortTransparency.iterator();
! 
!             if (iterator2.hasNext())
!             {
!                 RenderChunk renderchunk2 = (RenderChunk)iterator2.next();
  
!                 if (this.renderDispatcher.updateTransparencyLater(renderchunk2))
                  {
!                     iterator2.remove();
                  }
              }
          }
+ 
+         int j = 0;
+         int k = Config.getUpdatesPerFrame();
+         int i = k * 2;
+         Iterator iterator1 = this.chunksToUpdate.iterator();
+ 
+         while (iterator1.hasNext())
+         {
+             RenderChunk renderchunk1 = (RenderChunk)iterator1.next();
+ 
+             if (!this.renderDispatcher.updateChunkLater(renderchunk1))
+             {
+                 break;
+             }
+ 
+             renderchunk1.setNeedsUpdate(false);
+             iterator1.remove();
+ 
+             if (renderchunk1.getCompiledChunk().isEmpty() && k < i)
+             {
+                 ++k;
+             }
+ 
+             ++j;
+ 
+             if (j >= k)
+             {
+                 break;
+             }
+         }
      }
  
      public void renderWorldBorder(Entity p_180449_1_, float partialTicks)
***************
*** 1800,1805 ****
--- 2438,2448 ----
          GlStateManager.alphaFunc(516, 0.1F);
          GlStateManager.enableAlpha();
          GlStateManager.pushMatrix();
+ 
+         if (Config.isShaders())
+         {
+             ShadersRender.beginBlockDamage();
+         }
      }
  
      private void postRenderDamagedBlocks()
***************
*** 1810,1815 ****
--- 2453,2463 ----
          GlStateManager.enableAlpha();
          GlStateManager.depthMask(true);
          GlStateManager.popMatrix();
+ 
+         if (Config.isShaders())
+         {
+             ShadersRender.endBlockDamage();
+         }
      }
  
      public void drawBlockDamageTexture(Tessellator tessellatorIn, WorldRenderer worldRendererIn, Entity entityIn, float partialTicks)
***************
*** 1825,1831 ****
              worldRendererIn.begin(7, DefaultVertexFormats.BLOCK);
              worldRendererIn.setTranslation(-d0, -d1, -d2);
              worldRendererIn.markDirty();
!             Iterator<DestroyBlockProgress> iterator = this.damagedBlocks.values().iterator();
  
              while (iterator.hasNext())
              {
--- 2473,2479 ----
              worldRendererIn.begin(7, DefaultVertexFormats.BLOCK);
              worldRendererIn.setTranslation(-d0, -d1, -d2);
              worldRendererIn.markDirty();
!             Iterator iterator = this.damagedBlocks.values().iterator();
  
              while (iterator.hasNext())
              {
***************
*** 1835,1842 ****
                  double d4 = (double)blockpos.getY() - d1;
                  double d5 = (double)blockpos.getZ() - d2;
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
  
!                 if (!(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull))
                  {
                      if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D)
                      {
--- 2483,2512 ----
                  double d4 = (double)blockpos.getY() - d1;
                  double d5 = (double)blockpos.getZ() - d2;
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
+                 boolean flag;
+ 
+                 if (Reflector.ForgeTileEntity_canRenderBreaking.exists())
+                 {
+                     boolean flag1 = block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull;
+ 
+                     if (!flag1)
+                     {
+                         TileEntity tileentity = this.theWorld.getTileEntity(blockpos);
+ 
+                         if (tileentity != null)
+                         {
+                             flag1 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking, new Object[0]);
+                         }
+                     }
+ 
+                     flag = !flag1;
+                 }
+                 else
+                 {
+                     flag = !(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull);
+                 }
  
!                 if (flag)
                  {
                      if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D)
                      {
***************
*** 1875,1880 ****
--- 2545,2556 ----
              GlStateManager.color(0.0F, 0.0F, 0.0F, 0.4F);
              GL11.glLineWidth(2.0F);
              GlStateManager.disableTexture2D();
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              GlStateManager.depthMask(false);
              float f = 0.002F;
              BlockPos blockpos = movingObjectPositionIn.getBlockPos();
***************
*** 1891,1896 ****
--- 2567,2578 ----
  
              GlStateManager.depthMask(true);
              GlStateManager.enableTexture2D();
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.enableTexture2D();
+             }
+ 
              GlStateManager.disableBlend();
          }
      }
***************
*** 2007,2013 ****
                  this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
              }
  
!             PositionedSoundRecord positionedsoundrecord = PositionedSoundRecord.create(new ResourceLocation(recordName), (float)blockPosIn.getX(), (float)blockPosIn.getY(), (float)blockPosIn.getZ());
              this.mapSoundPositions.put(blockPosIn, positionedsoundrecord);
              this.mc.getSoundHandler().playSound(positionedsoundrecord);
          }
--- 2689,2707 ----
                  this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
              }
  
!             ResourceLocation resourcelocation = null;
! 
!             if (Reflector.ForgeItemRecord_getRecordResource.exists() && itemrecord != null)
!             {
!                 resourcelocation = (ResourceLocation)Reflector.call(itemrecord, Reflector.ForgeItemRecord_getRecordResource, new Object[] {recordName});
!             }
! 
!             if (resourcelocation == null)
!             {
!                 resourcelocation = new ResourceLocation(recordName);
!             }
! 
!             PositionedSoundRecord positionedsoundrecord = PositionedSoundRecord.create(resourcelocation, (float)blockPosIn.getX(), (float)blockPosIn.getY(), (float)blockPosIn.getZ());
              this.mapSoundPositions.put(blockPosIn, positionedsoundrecord);
              this.mc.getSoundHandler().playSound(positionedsoundrecord);
          }
***************
*** 2044,2051 ****
                  crashreportcategory.addCrashSection("Parameters", p_180442_15_);
              }
  
!             crashreportcategory.addCrashSectionCallable("Position", new Callable<String>()
              {
                  public String call() throws Exception
                  {
                      return CrashReportCategory.getCoordinateInfo(xCoord, yCoord, zCoord);
--- 2738,2746 ----
                  crashreportcategory.addCrashSection("Parameters", p_180442_15_);
              }
  
!             crashreportcategory.addCrashSectionCallable("Position", new Callable()
              {
+                 private static final String __OBFID = "CL_00000955";
                  public String call() throws Exception
                  {
                      return CrashReportCategory.getCoordinateInfo(xCoord, yCoord, zCoord);
***************
*** 2075,2088 ****
              double d1 = this.mc.getRenderViewEntity().posY - p_174974_5_;
              double d2 = this.mc.getRenderViewEntity().posZ - p_174974_7_;
  
!             if (ignoreRange)
              {
                  return this.mc.effectRenderer.spawnEffectParticle(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_);
              }
              else
              {
                  double d3 = 16.0D;
!                 return d0 * d0 + d1 * d1 + d2 * d2 > 256.0D ? null : (i > 1 ? null : this.mc.effectRenderer.spawnEffectParticle(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_));
              }
          }
          else
--- 2770,2905 ----
              double d1 = this.mc.getRenderViewEntity().posY - p_174974_5_;
              double d2 = this.mc.getRenderViewEntity().posZ - p_174974_7_;
  
!             if (p_174974_1_ == EnumParticleTypes.EXPLOSION_HUGE.getParticleID() && !Config.isAnimatedExplosion())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.EXPLOSION_LARGE.getParticleID() && !Config.isAnimatedExplosion())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.EXPLOSION_NORMAL.getParticleID() && !Config.isAnimatedExplosion())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SUSPENDED.getParticleID() && !Config.isWaterParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SUSPENDED_DEPTH.getParticleID() && !Config.isVoidParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SMOKE_NORMAL.getParticleID() && !Config.isAnimatedSmoke())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SMOKE_LARGE.getParticleID() && !Config.isAnimatedSmoke())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SPELL_MOB.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SPELL_MOB_AMBIENT.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SPELL.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SPELL_INSTANT.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.SPELL_WITCH.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.PORTAL.getParticleID() && !Config.isAnimatedPortal())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.FLAME.getParticleID() && !Config.isAnimatedFlame())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.REDSTONE.getParticleID() && !Config.isAnimatedRedstone())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.DRIP_WATER.getParticleID() && !Config.isDrippingWaterLava())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.DRIP_LAVA.getParticleID() && !Config.isDrippingWaterLava())
!             {
!                 return null;
!             }
!             else if (p_174974_1_ == EnumParticleTypes.FIREWORKS_SPARK.getParticleID() && !Config.isFireworkParticles())
!             {
!                 return null;
!             }
!             else if (ignoreRange)
              {
                  return this.mc.effectRenderer.spawnEffectParticle(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_);
              }
              else
              {
                  double d3 = 16.0D;
!                 double d4 = 256.0D;
! 
!                 if (p_174974_1_ == EnumParticleTypes.CRIT.getParticleID())
!                 {
!                     d4 = 38416.0D;
!                 }
! 
!                 if (d0 * d0 + d1 * d1 + d2 * d2 > d4)
!                 {
!                     return null;
!                 }
!                 else if (i > 1)
!                 {
!                     return null;
!                 }
!                 else
!                 {
!                     EntityFX entityfx = this.mc.effectRenderer.spawnEffectParticle(p_174974_1_, p_174974_3_, p_174974_5_, p_174974_7_, p_174974_9_, p_174974_11_, p_174974_13_, p_174974_15_);
! 
!                     if (p_174974_1_ == EnumParticleTypes.WATER_BUBBLE.getParticleID())
!                     {
!                         CustomColors.updateWaterFX(entityfx, this.theWorld, p_174974_3_, p_174974_5_, p_174974_7_);
!                     }
! 
!                     if (p_174974_1_ == EnumParticleTypes.WATER_SPLASH.getParticleID())
!                     {
!                         CustomColors.updateWaterFX(entityfx, this.theWorld, p_174974_3_, p_174974_5_, p_174974_7_);
!                     }
! 
!                     if (p_174974_1_ == EnumParticleTypes.WATER_DROP.getParticleID())
!                     {
!                         CustomColors.updateWaterFX(entityfx, this.theWorld, p_174974_3_, p_174974_5_, p_174974_7_);
!                     }
! 
!                     if (p_174974_1_ == EnumParticleTypes.TOWN_AURA.getParticleID())
!                     {
!                         CustomColors.updateMyceliumFX(entityfx);
!                     }
! 
!                     if (p_174974_1_ == EnumParticleTypes.PORTAL.getParticleID())
!                     {
!                         CustomColors.updatePortalFX(entityfx);
!                     }
! 
!                     if (p_174974_1_ == EnumParticleTypes.REDSTONE.getParticleID())
!                     {
!                         CustomColors.updateReddustFX(entityfx, this.theWorld, p_174974_3_, p_174974_5_, p_174974_7_);
!                     }
! 
!                     return entityfx;
!                 }
              }
          }
          else
***************
*** 2097,2102 ****
--- 2914,2925 ----
       */
      public void onEntityAdded(Entity entityIn)
      {
+         RandomMobs.entityLoaded(entityIn, this.theWorld);
+ 
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.entityAdded(entityIn, this);
+         }
      }
  
      /**
***************
*** 2105,2110 ****
--- 2928,2937 ----
       */
      public void onEntityRemoved(Entity entityIn)
      {
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.entityRemoved(entityIn, this);
+         }
      }
  
      /**
***************
*** 2246,2267 ****
                  break;
  
              case 2000:
!                 int l = p_180439_4_ % 3 - 1;
!                 int i = p_180439_4_ / 3 % 3 - 1;
!                 double d15 = (double)blockPosIn.getX() + (double)l * 0.6D + 0.5D;
!                 double d17 = (double)blockPosIn.getY() + 0.5D;
!                 double d19 = (double)blockPosIn.getZ() + (double)i * 0.6D + 0.5D;
  
!                 for (int k1 = 0; k1 < 10; ++k1)
                  {
                      double d20 = random.nextDouble() * 0.2D + 0.01D;
!                     double d21 = d15 + (double)l * 0.01D + (random.nextDouble() - 0.5D) * (double)i * 0.5D;
!                     double d4 = d17 + (random.nextDouble() - 0.5D) * 0.5D;
!                     double d6 = d19 + (double)i * 0.01D + (random.nextDouble() - 0.5D) * (double)l * 0.5D;
!                     double d8 = (double)l * d20 + random.nextGaussian() * 0.01D;
!                     double d10 = -0.03D + random.nextGaussian() * 0.01D;
!                     double d12 = (double)i * d20 + random.nextGaussian() * 0.01D;
!                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d21, d4, d6, d8, d10, d12, new int[0]);
                  }
  
                  return;
--- 3073,3094 ----
                  break;
  
              case 2000:
!                 int k = p_180439_4_ % 3 - 1;
!                 int l = p_180439_4_ / 3 % 3 - 1;
!                 double d13 = (double)blockPosIn.getX() + (double)k * 0.6D + 0.5D;
!                 double d15 = (double)blockPosIn.getY() + 0.5D;
!                 double d19 = (double)blockPosIn.getZ() + (double)l * 0.6D + 0.5D;
  
!                 for (int l1 = 0; l1 < 10; ++l1)
                  {
                      double d20 = random.nextDouble() * 0.2D + 0.01D;
!                     double d21 = d13 + (double)k * 0.01D + (random.nextDouble() - 0.5D) * (double)l * 0.5D;
!                     double d22 = d15 + (random.nextDouble() - 0.5D) * 0.5D;
!                     double d23 = d19 + (double)l * 0.01D + (random.nextDouble() - 0.5D) * (double)k * 0.5D;
!                     double d24 = (double)k * d20 + random.nextGaussian() * 0.01D;
!                     double d9 = -0.03D + random.nextGaussian() * 0.01D;
!                     double d10 = (double)l * d20 + random.nextGaussian() * 0.01D;
!                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d21, d22, d23, d24, d9, d10, new int[0]);
                  }
  
                  return;
***************
*** 2278,2290 ****
                  break;
  
              case 2002:
!                 double d13 = (double)blockPosIn.getX();
!                 double d14 = (double)blockPosIn.getY();
!                 double d16 = (double)blockPosIn.getZ();
  
                  for (int i1 = 0; i1 < 8; ++i1)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d13, d14, d16, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] {Item.getIdFromItem(Items.potionitem), p_180439_4_});
                  }
  
                  int j1 = Items.potionitem.getColorFromDamage(p_180439_4_);
--- 3105,3117 ----
                  break;
  
              case 2002:
!                 double d11 = (double)blockPosIn.getX();
!                 double d12 = (double)blockPosIn.getY();
!                 double d14 = (double)blockPosIn.getZ();
  
                  for (int i1 = 0; i1 < 8; ++i1)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d11, d12, d14, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] {Item.getIdFromItem(Items.potionitem), p_180439_4_});
                  }
  
                  int j1 = Items.potionitem.getColorFromDamage(p_180439_4_);
***************
*** 2298,2317 ****
                      enumparticletypes = EnumParticleTypes.SPELL_INSTANT;
                  }
  
!                 for (int l1 = 0; l1 < 100; ++l1)
                  {
!                     double d22 = random.nextDouble() * 4.0D;
!                     double d23 = random.nextDouble() * Math.PI * 2.0D;
!                     double d24 = Math.cos(d23) * d22;
!                     double d9 = 0.01D + random.nextDouble() * 0.5D;
!                     double d11 = Math.sin(d23) * d22;
!                     EntityFX entityfx = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d13 + d24 * 0.1D, d14 + 0.3D, d16 + d11 * 0.1D, d24, d9, d11, new int[0]);
  
                      if (entityfx != null)
                      {
                          float f3 = 0.75F + random.nextFloat() * 0.25F;
                          entityfx.setRBGColorF(f * f3, f1 * f3, f2 * f3);
!                         entityfx.multiplyVelocity((float)d22);
                      }
                  }
  
--- 3125,3144 ----
                      enumparticletypes = EnumParticleTypes.SPELL_INSTANT;
                  }
  
!                 for (int k1 = 0; k1 < 100; ++k1)
                  {
!                     double d16 = random.nextDouble() * 4.0D;
!                     double d17 = random.nextDouble() * Math.PI * 2.0D;
!                     double d18 = Math.cos(d17) * d16;
!                     double d7 = 0.01D + random.nextDouble() * 0.5D;
!                     double d8 = Math.sin(d17) * d16;
!                     EntityFX entityfx = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d11 + d18 * 0.1D, d12 + 0.3D, d14 + d8 * 0.1D, d18, d7, d8, new int[0]);
  
                      if (entityfx != null)
                      {
                          float f3 = 0.75F + random.nextFloat() * 0.25F;
                          entityfx.setRBGColorF(f * f3, f1 * f3, f2 * f3);
!                         entityfx.multiplyVelocity((float)d16);
                      }
                  }
  
***************
*** 2319,2349 ****
                  break;
  
              case 2003:
!                 double d0 = (double)blockPosIn.getX() + 0.5D;
!                 double d1 = (double)blockPosIn.getY();
!                 double d2 = (double)blockPosIn.getZ() + 0.5D;
  
!                 for (int j = 0; j < 8; ++j)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d0, d1, d2, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] {Item.getIdFromItem(Items.ender_eye)});
                  }
  
!                 for (double d18 = 0.0D; d18 < (Math.PI * 2D); d18 += 0.15707963267948966D)
                  {
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d18) * 5.0D, d1 - 0.4D, d2 + Math.sin(d18) * 5.0D, Math.cos(d18) * -5.0D, 0.0D, Math.sin(d18) * -5.0D, new int[0]);
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d18) * 5.0D, d1 - 0.4D, d2 + Math.sin(d18) * 5.0D, Math.cos(d18) * -7.0D, 0.0D, Math.sin(d18) * -7.0D, new int[0]);
                  }
  
                  return;
  
              case 2004:
!                 for (int k = 0; k < 20; ++k)
                  {
                      double d3 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d5 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d7 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d3, d5, d7, 0.0D, 0.0D, 0.0D, new int[0]);
!                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d3, d5, d7, 0.0D, 0.0D, 0.0D, new int[0]);
                  }
  
                  return;
--- 3146,3176 ----
                  break;
  
              case 2003:
!                 double var7 = (double)blockPosIn.getX() + 0.5D;
!                 double var9 = (double)blockPosIn.getY();
!                 double var11 = (double)blockPosIn.getZ() + 0.5D;
  
!                 for (int var13 = 0; var13 < 8; ++var13)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, var7, var9, var11, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, new int[] {Item.getIdFromItem(Items.ender_eye)});
                  }
  
!                 for (double var32 = 0.0D; var32 < (Math.PI * 2D); var32 += 0.15707963267948966D)
                  {
!                     this.spawnParticle(EnumParticleTypes.PORTAL, var7 + Math.cos(var32) * 5.0D, var9 - 0.4D, var11 + Math.sin(var32) * 5.0D, Math.cos(var32) * -5.0D, 0.0D, Math.sin(var32) * -5.0D, new int[0]);
!                     this.spawnParticle(EnumParticleTypes.PORTAL, var7 + Math.cos(var32) * 5.0D, var9 - 0.4D, var11 + Math.sin(var32) * 5.0D, Math.cos(var32) * -7.0D, 0.0D, Math.sin(var32) * -7.0D, new int[0]);
                  }
  
                  return;
  
              case 2004:
!                 for (int var18 = 0; var18 < 20; ++var18)
                  {
                      double d3 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d4 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d5 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d3, d4, d5, 0.0D, 0.0D, 0.0D, new int[0]);
!                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d3, d4, d5, 0.0D, 0.0D, 0.0D, new int[0]);
                  }
  
                  return;
***************
*** 2379,2386 ****
          this.displayListEntitiesDirty = true;
      }
  
!     public void func_181023_a(Collection<TileEntity> p_181023_1_, Collection<TileEntity> p_181023_2_)
      {
          synchronized (this.field_181024_n)
          {
              this.field_181024_n.removeAll(p_181023_1_);
--- 3206,3263 ----
          this.displayListEntitiesDirty = true;
      }
  
!     public void resetClouds()
!     {
!         this.cloudRenderer.reset();
!     }
! 
!     public int getCountRenderers()
!     {
!         return this.viewFrustum.renderChunks.length;
!     }
! 
!     public int getCountActiveRenderers()
!     {
!         return this.renderInfos.size();
!     }
! 
!     public int getCountEntitiesRendered()
!     {
!         return this.countEntitiesRendered;
!     }
! 
!     public int getCountTileEntitiesRendered()
!     {
!         return this.countTileEntitiesRendered;
!     }
! 
!     public RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_)
!     {
!         return this.viewFrustum.getRenderChunk(p_getRenderChunk_1_);
!     }
! 
!     public RenderChunk getRenderChunk(RenderChunk p_getRenderChunk_1_, EnumFacing p_getRenderChunk_2_)
!     {
!         if (p_getRenderChunk_1_ == null)
!         {
!             return null;
!         }
!         else
!         {
!             BlockPos blockpos = p_getRenderChunk_1_.func_181701_a(p_getRenderChunk_2_);
!             return this.viewFrustum.getRenderChunk(blockpos);
!         }
!     }
! 
!     public WorldClient getWorld()
!     {
!         return this.theWorld;
!     }
! 
!     public void func_181023_a(Collection p_181023_1_, Collection p_181023_2_)
      {
+         Set set = this.field_181024_n;
+ 
          synchronized (this.field_181024_n)
          {
              this.field_181024_n.removeAll(p_181023_1_);
***************
*** 2388,2406 ****
          }
      }
  
!     class ContainerLocalRenderInformation
      {
          final RenderChunk renderChunk;
          final EnumFacing facing;
!         final Set<EnumFacing> setFacing;
          final int counter;
  
!         private ContainerLocalRenderInformation(RenderChunk renderChunkIn, EnumFacing facingIn, int counterIn)
          {
!             this.setFacing = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
!             this.renderChunk = renderChunkIn;
!             this.facing = facingIn;
!             this.counter = counterIn;
          }
      }
  }
--- 3265,3325 ----
          }
      }
  
!     static final class RenderGlobal$2
!     {
!         static final int[] field_178037_a = new int[VertexFormatElement.EnumUsage.values().length];
!         private static final String __OBFID = "CL_00002535";
! 
!         static
!         {
!             try
!             {
!                 field_178037_a[VertexFormatElement.EnumUsage.POSITION.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178037_a[VertexFormatElement.EnumUsage.UV.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try
!             {
!                 field_178037_a[VertexFormatElement.EnumUsage.COLOR.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
!         }
!     }
! 
!     public static class ContainerLocalRenderInformation
      {
          final RenderChunk renderChunk;
          final EnumFacing facing;
!         final Set setFacing;
          final int counter;
+         private static final String __OBFID = "CL_00002534";
+ 
+         public ContainerLocalRenderInformation(RenderChunk p_i4_1_, EnumFacing p_i4_2_, int p_i4_3_)
+         {
+             this.setFacing = EnumSet.noneOf(EnumFacing.class);
+             this.renderChunk = p_i4_1_;
+             this.facing = p_i4_2_;
+             this.counter = p_i4_3_;
+         }
  
!         ContainerLocalRenderInformation(RenderChunk p_i5_1_, EnumFacing p_i5_2_, int p_i5_3_, Object p_i5_4_)
          {
!             this(p_i5_1_, p_i5_2_, p_i5_3_);
          }
      }
  }
diff -rc ./client/renderer/RenderList.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RenderList.java
*** ./client/renderer/RenderList.java	2021-04-03 11:27:27.467535000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/RenderList.java	2019-05-30 22:29:17.819441000 -0700
***************
*** 3,16 ****
--- 3,25 ----
  import net.minecraft.client.renderer.chunk.ListedRenderChunk;
  import net.minecraft.client.renderer.chunk.RenderChunk;
  import net.minecraft.util.EnumWorldBlockLayer;
+ import optifine.Config;
+ 
  import org.lwjgl.opengl.GL11;
  
  public class RenderList extends ChunkRenderContainer
  {
+     private static final String __OBFID = "CL_00000957";
+ 
      public void renderChunkLayer(EnumWorldBlockLayer layer)
      {
          if (this.initialized)
          {
+             if (this.renderChunks.size() == 0)
+             {
+                 return;
+             }
+ 
              for (RenderChunk renderchunk : this.renderChunks)
              {
                  ListedRenderChunk listedrenderchunk = (ListedRenderChunk)renderchunk;
***************
*** 20,25 ****
--- 29,39 ----
                  GlStateManager.popMatrix();
              }
  
+             if (Config.isMultiTexture())
+             {
+                 GlStateManager.bindCurrentTexture();
+             }
+ 
              GlStateManager.resetColor();
              this.renderChunks.clear();
          }
diff -rc ./client/renderer/texture/AbstractTexture.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/AbstractTexture.java
*** ./client/renderer/texture/AbstractTexture.java	2021-04-03 11:27:28.536404000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/AbstractTexture.java	2019-05-30 22:29:19.301616000 -0700
***************
*** 1,6 ****
--- 1,9 ----
  package net.minecraft.client.renderer.texture;
  
+ import net.minecraft.client.renderer.GlStateManager;
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.MultiTexID;
+ import shadersmod.client.ShadersTex;
  
  public abstract class AbstractTexture implements ITextureObject
  {
***************
*** 9,35 ****
      protected boolean mipmap;
      protected boolean blurLast;
      protected boolean mipmapLast;
  
      public void setBlurMipmapDirect(boolean p_174937_1_, boolean p_174937_2_)
      {
          this.blur = p_174937_1_;
          this.mipmap = p_174937_2_;
!         int i = -1;
!         int j = -1;
  
          if (p_174937_1_)
          {
              i = p_174937_2_ ? 9987 : 9729;
!             j = 9729;
          }
          else
          {
              i = p_174937_2_ ? 9986 : 9728;
!             j = 9728;
          }
  
          GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, i);
!         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, j);
      }
  
      public void setBlurMipmap(boolean p_174936_1_, boolean p_174936_2_)
--- 12,43 ----
      protected boolean mipmap;
      protected boolean blurLast;
      protected boolean mipmapLast;
+     private static final String __OBFID = "CL_00001047";
+     public MultiTexID multiTex;
  
      public void setBlurMipmapDirect(boolean p_174937_1_, boolean p_174937_2_)
      {
          this.blur = p_174937_1_;
          this.mipmap = p_174937_2_;
!         boolean flag = true;
!         boolean flag1 = true;
!         int i;
!         short short1;
  
          if (p_174937_1_)
          {
              i = p_174937_2_ ? 9987 : 9729;
!             short1 = 9729;
          }
          else
          {
              i = p_174937_2_ ? 9986 : 9728;
!             short1 = 9728;
          }
  
+         GlStateManager.bindTexture(this.getGlTextureId());
          GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, i);
!         GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, short1);
      }
  
      public void setBlurMipmap(boolean p_174936_1_, boolean p_174936_2_)
***************
*** 56,65 ****
--- 64,80 ----
  
      public void deleteGlTexture()
      {
+         ShadersTex.deleteTextures(this, this.glTextureId);
+ 
          if (this.glTextureId != -1)
          {
              TextureUtil.deleteTexture(this.glTextureId);
              this.glTextureId = -1;
          }
      }
+ 
+     public MultiTexID getMultiTexID()
+     {
+         return ShadersTex.getMultiTexID(this);
+     }
  }
diff -rc ./client/renderer/texture/DynamicTexture.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/DynamicTexture.java
*** ./client/renderer/texture/DynamicTexture.java	2021-04-03 11:27:28.543447000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/DynamicTexture.java	2019-05-30 22:29:19.312609000 -0700
***************
*** 3,8 ****
--- 3,10 ----
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import net.minecraft.client.resources.IResourceManager;
+ import optifine.Config;
+ import shadersmod.client.ShadersTex;
  
  public class DynamicTexture extends AbstractTexture
  {
***************
*** 13,18 ****
--- 15,22 ----
  
      /** height of this icon in pixels */
      private final int height;
+     private static final String __OBFID = "CL_00001048";
+     private boolean shadersInitialized;
  
      public DynamicTexture(BufferedImage bufferedImage)
      {
***************
*** 23,32 ****
  
      public DynamicTexture(int textureWidth, int textureHeight)
      {
          this.width = textureWidth;
          this.height = textureHeight;
!         this.dynamicTextureData = new int[textureWidth * textureHeight];
!         TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
--- 27,46 ----
  
      public DynamicTexture(int textureWidth, int textureHeight)
      {
+         this.shadersInitialized = false;
          this.width = textureWidth;
          this.height = textureHeight;
!         this.dynamicTextureData = new int[textureWidth * textureHeight * 3];
! 
!         if (Config.isShaders())
!         {
!             ShadersTex.initDynamicTexture(this.getGlTextureId(), textureWidth, textureHeight, this);
!             this.shadersInitialized = true;
!         }
!         else
!         {
!             TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
!         }
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
***************
*** 35,41 ****
  
      public void updateDynamicTexture()
      {
!         TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
      }
  
      public int[] getTextureData()
--- 49,68 ----
  
      public void updateDynamicTexture()
      {
!         if (Config.isShaders())
!         {
!             if (!this.shadersInitialized)
!             {
!                 ShadersTex.initDynamicTexture(this.getGlTextureId(), this.width, this.height, this);
!                 this.shadersInitialized = true;
!             }
! 
!             ShadersTex.updateDynamicTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height, this);
!         }
!         else
!         {
!             TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
!         }
      }
  
      public int[] getTextureData()
diff -rc ./client/renderer/texture/ITextureObject.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/ITextureObject.java
*** ./client/renderer/texture/ITextureObject.java	2021-04-03 11:27:28.557446000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/ITextureObject.java	2019-05-30 22:29:19.380569000 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import java.io.IOException;
  import net.minecraft.client.resources.IResourceManager;
+ import shadersmod.client.MultiTexID;
  
  public interface ITextureObject
  {
***************
*** 12,15 ****
--- 13,18 ----
      void loadTexture(IResourceManager resourceManager) throws IOException;
  
      int getGlTextureId();
+ 
+     MultiTexID getMultiTexID();
  }
diff -rc ./client/renderer/texture/SimpleTexture.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/SimpleTexture.java
*** ./client/renderer/texture/SimpleTexture.java	2021-04-03 11:27:28.588774000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/SimpleTexture.java	2019-05-30 22:29:19.474517000 -0700
***************
*** 7,19 ****
--- 7,23 ----
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.data.TextureMetadataSection;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.ShadersTex;
  
  public class SimpleTexture extends AbstractTexture
  {
      private static final Logger logger = LogManager.getLogger();
      protected final ResourceLocation textureLocation;
+     private static final String __OBFID = "CL_00001052";
  
      public SimpleTexture(ResourceLocation textureResourceLocation)
      {
***************
*** 51,57 ****
                  }
              }
  
!             TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
          }
          finally
          {
--- 55,68 ----
                  }
              }
  
!             if (Config.isShaders())
!             {
!                 ShadersTex.loadSimpleTexture(this.getGlTextureId(), bufferedimage, flag, flag1, resourceManager, this.textureLocation, this.getMultiTexID());
!             }
!             else
!             {
!                 TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
!             }
          }
          finally
          {
diff -rc ./client/renderer/texture/Stitcher.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/Stitcher.java
*** ./client/renderer/texture/Stitcher.java	2021-04-03 11:27:28.595761000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/Stitcher.java	2019-05-30 22:29:19.497504000 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Sets;
+ import java.util.ArrayList;
  import java.util.Arrays;
  import java.util.List;
  import java.util.Set;
***************
*** 11,18 ****
  public class Stitcher
  {
      private final int mipmapLevelStitcher;
!     private final Set<Stitcher.Holder> setStitchHolders = Sets.<Stitcher.Holder>newHashSetWithExpectedSize(256);
!     private final List<Stitcher.Slot> stitchSlots = Lists.<Stitcher.Slot>newArrayListWithCapacity(256);
      private int currentWidth;
      private int currentHeight;
      private final int maxWidth;
--- 12,19 ----
  public class Stitcher
  {
      private final int mipmapLevelStitcher;
!     private final Set setStitchHolders = Sets.newHashSetWithExpectedSize(256);
!     private final List stitchSlots = Lists.newArrayListWithCapacity(256);
      private int currentWidth;
      private int currentHeight;
      private final int maxWidth;
***************
*** 21,26 ****
--- 22,28 ----
  
      /** Max size (width or height) of a single tile */
      private final int maxTileDimension;
+     private static final String __OBFID = "CL_00001054";
  
      public Stitcher(int maxTextureWidth, int maxTextureHeight, boolean p_i45095_3_, int p_i45095_4_, int mipmapLevel)
      {
***************
*** 55,68 ****
  
      public void doStitch()
      {
!         Stitcher.Holder[] astitcher$holder = (Stitcher.Holder[])this.setStitchHolders.toArray(new Stitcher.Holder[this.setStitchHolders.size()]);
          Arrays.sort((Object[])astitcher$holder);
  
          for (Stitcher.Holder stitcher$holder : astitcher$holder)
          {
              if (!this.allocateSlot(stitcher$holder))
              {
!                 String s = String.format("Unable to fit: %s - size: %dx%d - Maybe try a lowerresolution resourcepack?", new Object[] {stitcher$holder.getAtlasSprite().getIconName(), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconWidth()), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconHeight())});
                  throw new StitcherException(stitcher$holder, s);
              }
          }
--- 57,70 ----
  
      public void doStitch()
      {
!         Stitcher.Holder[] astitcher$holder = (Stitcher.Holder[])((Stitcher.Holder[])this.setStitchHolders.toArray(new Stitcher.Holder[this.setStitchHolders.size()]));
          Arrays.sort((Object[])astitcher$holder);
  
          for (Stitcher.Holder stitcher$holder : astitcher$holder)
          {
              if (!this.allocateSlot(stitcher$holder))
              {
!                 String s = String.format("Unable to fit: %s, size: %dx%d, atlas: %dx%d, atlasMax: %dx%d - Maybe try a lower resolution resourcepack?", new Object[] {stitcher$holder.getAtlasSprite().getIconName(), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconWidth()), Integer.valueOf(stitcher$holder.getAtlasSprite().getIconHeight()), Integer.valueOf(this.currentWidth), Integer.valueOf(this.currentHeight), Integer.valueOf(this.maxWidth), Integer.valueOf(this.maxHeight)});
                  throw new StitcherException(stitcher$holder, s);
              }
          }
***************
*** 74,99 ****
          }
      }
  
!     public List<TextureAtlasSprite> getStichSlots()
      {
!         List<Stitcher.Slot> list = Lists.<Stitcher.Slot>newArrayList();
  
!         for (Stitcher.Slot stitcher$slot : this.stitchSlots)
          {
!             stitcher$slot.getAllStitchSlots(list);
          }
  
!         List<TextureAtlasSprite> list1 = Lists.<TextureAtlasSprite>newArrayList();
  
!         for (Stitcher.Slot stitcher$slot1 : list)
          {
              Stitcher.Holder stitcher$holder = stitcher$slot1.getStitchHolder();
              TextureAtlasSprite textureatlassprite = stitcher$holder.getAtlasSprite();
              textureatlassprite.initSprite(this.currentWidth, this.currentHeight, stitcher$slot1.getOriginX(), stitcher$slot1.getOriginY(), stitcher$holder.isRotated());
!             list1.add(textureatlassprite);
          }
  
!         return list1;
      }
  
      private static int getMipmapDimension(int p_147969_0_, int p_147969_1_)
--- 76,102 ----
          }
      }
  
!     public List getStichSlots()
      {
!         ArrayList arraylist = Lists.newArrayList();
  
!         for (Object stitcher$slot : this.stitchSlots)
          {
!             ((Slot) stitcher$slot).getAllStitchSlots(arraylist);
          }
  
!         ArrayList arraylist1 = Lists.newArrayList();
  
!         for (Object stitcher$slot10 : arraylist)
          {
+             Slot stitcher$slot1 = (Slot) stitcher$slot10;
              Stitcher.Holder stitcher$holder = stitcher$slot1.getStitchHolder();
              TextureAtlasSprite textureatlassprite = stitcher$holder.getAtlasSprite();
              textureatlassprite.initSprite(this.currentWidth, this.currentHeight, stitcher$slot1.getOriginX(), stitcher$slot1.getOriginY(), stitcher$holder.isRotated());
!             arraylist1.add(textureatlassprite);
          }
  
!         return arraylist1;
      }
  
      private static int getMipmapDimension(int p_147969_0_, int p_147969_1_)
***************
*** 176,182 ****
  
          int j1 = Math.max(p_94311_1_.getWidth(), p_94311_1_.getHeight());
  
!         if (MathHelper.roundUpToPowerOfTwo((flag1 ? this.currentHeight : this.currentWidth) + j1) > (flag1 ? this.maxHeight : this.maxWidth))
          {
              return false;
          }
--- 179,185 ----
  
          int j1 = Math.max(p_94311_1_.getWidth(), p_94311_1_.getHeight());
  
!         if (MathHelper.roundUpToPowerOfTwo((!flag1 ? this.currentHeight : this.currentWidth) + j1) > (!flag1 ? this.maxHeight : this.maxWidth))
          {
              return false;
          }
***************
*** 211,217 ****
          }
      }
  
!     public static class Holder implements Comparable<Stitcher.Holder>
      {
          private final TextureAtlasSprite theTexture;
          private final int width;
--- 214,220 ----
          }
      }
  
!     public static class Holder implements Comparable
      {
          private final TextureAtlasSprite theTexture;
          private final int width;
***************
*** 219,224 ****
--- 222,228 ----
          private final int mipmapLevelHolder;
          private boolean rotated;
          private float scaleFactor = 1.0F;
+         private static final String __OBFID = "CL_00001055";
  
          public Holder(TextureAtlasSprite p_i45094_1_, int p_i45094_2_)
          {
***************
*** 264,270 ****
  
          public String toString()
          {
!             return "Holder{width=" + this.width + ", height=" + this.height + '}';
          }
  
          public int compareTo(Stitcher.Holder p_compareTo_1_)
--- 268,274 ----
  
          public String toString()
          {
!             return "Holder{width=" + this.width + ", height=" + this.height + ", name=" + this.theTexture.getIconName() + '}';
          }
  
          public int compareTo(Stitcher.Holder p_compareTo_1_)
***************
*** 292,297 ****
--- 296,306 ----
  
              return i;
          }
+ 
+         public int compareTo(Object p_compareTo_1_)
+         {
+             return this.compareTo((Stitcher.Holder)p_compareTo_1_);
+         }
      }
  
      public static class Slot
***************
*** 300,307 ****
          private final int originY;
          private final int width;
          private final int height;
!         private List<Stitcher.Slot> subSlots;
          private Stitcher.Holder holder;
  
          public Slot(int p_i1277_1_, int p_i1277_2_, int widthIn, int heightIn)
          {
--- 309,317 ----
          private final int originY;
          private final int width;
          private final int height;
!         private List subSlots;
          private Stitcher.Holder holder;
+         private static final String __OBFID = "CL_00001056";
  
          public Slot(int p_i1277_1_, int p_i1277_2_, int widthIn, int heightIn)
          {
***************
*** 348,354 ****
                      {
                          if (this.subSlots == null)
                          {
!                             this.subSlots = Lists.<Stitcher.Slot>newArrayListWithCapacity(1);
                              this.subSlots.add(new Stitcher.Slot(this.originX, this.originY, i, j));
                              int k = this.width - i;
                              int l = this.height - j;
--- 358,364 ----
                      {
                          if (this.subSlots == null)
                          {
!                             this.subSlots = Lists.newArrayListWithCapacity(1);
                              this.subSlots.add(new Stitcher.Slot(this.originX, this.originY, i, j));
                              int k = this.width - i;
                              int l = this.height - j;
***************
*** 379,387 ****
                              }
                          }
  
!                         for (Stitcher.Slot stitcher$slot : this.subSlots)
                          {
!                             if (stitcher$slot.addSlot(holderIn))
                              {
                                  return true;
                              }
--- 389,397 ----
                              }
                          }
  
!                         for (Object stitcher$slot : this.subSlots)
                          {
!                             if (((Slot) stitcher$slot).addSlot(holderIn))
                              {
                                  return true;
                              }
***************
*** 397,403 ****
              }
          }
  
!         public void getAllStitchSlots(List<Stitcher.Slot> p_94184_1_)
          {
              if (this.holder != null)
              {
--- 407,413 ----
              }
          }
  
!         public void getAllStitchSlots(List p_94184_1_)
          {
              if (this.holder != null)
              {
***************
*** 405,413 ****
              }
              else if (this.subSlots != null)
              {
!                 for (Stitcher.Slot stitcher$slot : this.subSlots)
                  {
!                     stitcher$slot.getAllStitchSlots(p_94184_1_);
                  }
              }
          }
--- 415,423 ----
              }
              else if (this.subSlots != null)
              {
!                 for (Object stitcher$slot : this.subSlots)
                  {
!                     ((Slot) stitcher$slot).getAllStitchSlots(p_94184_1_);
                  }
              }
          }
diff -rc ./client/renderer/texture/TextureAtlasSprite.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureAtlasSprite.java
*** ./client/renderer/texture/TextureAtlasSprite.java	2021-04-03 11:27:28.606896000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureAtlasSprite.java	2019-05-30 22:29:19.561466000 -0700
***************
*** 3,22 ****
  import com.google.common.collect.Lists;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import java.util.Iterator;
  import java.util.List;
  import java.util.concurrent.Callable;
  import net.minecraft.client.resources.data.AnimationFrame;
  import net.minecraft.client.resources.data.AnimationMetadataSection;
  import net.minecraft.crash.CrashReport;
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  
  public class TextureAtlasSprite
  {
      private final String iconName;
!     protected List<int[][]> framesTextureData = Lists.<int[][]>newArrayList();
      protected int[][] interpolatedFrameData;
      private AnimationMetadataSection animationMetadata;
      protected boolean rotated;
--- 3,28 ----
  import com.google.common.collect.Lists;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
+ import java.util.ArrayList;
  import java.util.Iterator;
  import java.util.List;
  import java.util.concurrent.Callable;
+ import net.minecraft.client.resources.IResource;
+ import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.data.AnimationFrame;
  import net.minecraft.client.resources.data.AnimationMetadataSection;
  import net.minecraft.crash.CrashReport;
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.TextureUtils;
+ import shadersmod.client.Shaders;
  
  public class TextureAtlasSprite
  {
      private final String iconName;
!     protected List framesTextureData = Lists.newArrayList();
      protected int[][] interpolatedFrameData;
      private AnimationMetadataSection animationMetadata;
      protected boolean rotated;
***************
*** 32,41 ****
--- 38,71 ----
      protected int tickCounter;
      private static String locationNameClock = "builtin/clock";
      private static String locationNameCompass = "builtin/compass";
+     private static final String __OBFID = "CL_00001062";
+     private int indexInMap = -1;
+     public float baseU;
+     public float baseV;
+     public int sheetWidth;
+     public int sheetHeight;
+     public int glSpriteTextureId = -1;
+     public TextureAtlasSprite spriteSingle = null;
+     public boolean isSpriteSingle = false;
+     public int mipmapLevels = 0;
+     public TextureAtlasSprite spriteNormal = null;
+     public TextureAtlasSprite spriteSpecular = null;
+     public boolean isShadersSprite = false;
+ 
+     private TextureAtlasSprite(TextureAtlasSprite p_i12_1_)
+     {
+         this.iconName = p_i12_1_.iconName;
+         this.isSpriteSingle = true;
+     }
  
      protected TextureAtlasSprite(String spriteName)
      {
          this.iconName = spriteName;
+ 
+         if (Config.isMultiTexture())
+         {
+             this.spriteSingle = new TextureAtlasSprite(this);
+         }
      }
  
      protected static TextureAtlasSprite makeAtlasSprite(ResourceLocation spriteResourceLocation)
***************
*** 65,70 ****
--- 95,117 ----
          this.maxU = (float)(originInX + this.width) / (float)((double)inX) - f;
          this.minV = (float)originInY / (float)inY + f1;
          this.maxV = (float)(originInY + this.height) / (float)inY - f1;
+         this.baseU = Math.min(this.minU, this.maxU);
+         this.baseV = Math.min(this.minV, this.maxV);
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
+         }
+ 
+         if (this.spriteNormal != null)
+         {
+             this.spriteNormal.initSprite(inX, inY, originInX, originInY, rotatedIn);
+         }
+ 
+         if (this.spriteSpecular != null)
+         {
+             this.spriteSpecular.initSprite(inX, inY, originInX, originInY, rotatedIn);
+         }
      }
  
      public void copyFrom(TextureAtlasSprite atlasSpirit)
***************
*** 78,83 ****
--- 125,135 ----
          this.maxU = atlasSpirit.maxU;
          this.minV = atlasSpirit.minV;
          this.maxV = atlasSpirit.maxV;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
+         }
      }
  
      /**
***************
*** 169,192 ****
  
      public void updateAnimation()
      {
!         ++this.tickCounter;
! 
!         if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
          {
!             int i = this.animationMetadata.getFrameIndex(this.frameCounter);
!             int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
!             this.frameCounter = (this.frameCounter + 1) % j;
!             this.tickCounter = 0;
!             int k = this.animationMetadata.getFrameIndex(this.frameCounter);
  
!             if (i != k && k >= 0 && k < this.framesTextureData.size())
              {
!                 TextureUtil.uploadTextureMipmap((int[][])this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, false, false);
              }
-         }
-         else if (this.animationMetadata.isInterpolate())
-         {
-             this.updateAnimationInterpolated();
          }
      }
  
--- 221,249 ----
  
      public void updateAnimation()
      {
!         if (this.animationMetadata != null)
          {
!             ++this.tickCounter;
  
!             if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
              {
!                 int i = this.animationMetadata.getFrameIndex(this.frameCounter);
!                 int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
!                 this.frameCounter = (this.frameCounter + 1) % j;
!                 this.tickCounter = 0;
!                 int k = this.animationMetadata.getFrameIndex(this.frameCounter);
!                 boolean flag = false;
!                 boolean flag1 = this.isSpriteSingle;
! 
!                 if (i != k && k >= 0 && k < this.framesTextureData.size())
!                 {
!                     TextureUtil.uploadTextureMipmap((int[][])((int[][])this.framesTextureData.get(k)), this.width, this.height, this.originX, this.originY, flag, flag1);
!                 }
!             }
!             else if (this.animationMetadata.isInterpolate())
!             {
!                 this.updateAnimationInterpolated();
              }
          }
      }
  
***************
*** 199,206 ****
  
          if (i != k && k >= 0 && k < this.framesTextureData.size())
          {
!             int[][] aint = (int[][])this.framesTextureData.get(i);
!             int[][] aint1 = (int[][])this.framesTextureData.get(k);
  
              if (this.interpolatedFrameData == null || this.interpolatedFrameData.length != aint.length)
              {
--- 256,263 ----
  
          if (i != k && k >= 0 && k < this.framesTextureData.size())
          {
!             int[][] aint = (int[][])((int[][])this.framesTextureData.get(i));
!             int[][] aint1 = (int[][])((int[][])this.framesTextureData.get(k));
  
              if (this.interpolatedFrameData == null || this.interpolatedFrameData.length != aint.length)
              {
***************
*** 234,240 ****
  
      public int[][] getFrameTextureData(int index)
      {
!         return (int[][])this.framesTextureData.get(index);
      }
  
      public int getFrameCount()
--- 291,297 ----
  
      public int[][] getFrameTextureData(int index)
      {
!         return (int[][])((int[][])this.framesTextureData.get(index));
      }
  
      public int getFrameCount()
***************
*** 245,255 ****
--- 302,322 ----
      public void setIconWidth(int newWidth)
      {
          this.width = newWidth;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.setIconWidth(this.width);
+         }
      }
  
      public void setIconHeight(int newHeight)
      {
          this.height = newHeight;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.setIconHeight(this.height);
+         }
      }
  
      public void loadSprite(BufferedImage[] images, AnimationMetadataSection meta) throws IOException
***************
*** 314,353 ****
              }
              else
              {
!                 List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
  
!                 for (int l1 = 0; l1 < j1; ++l1)
                  {
!                     this.framesTextureData.add(getFrameTextureData(aint, k1, l, l1));
!                     list.add(new AnimationFrame(l1, -1));
                  }
  
!                 this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, meta.getFrameTime(), meta.isInterpolate());
              }
          }
      }
  
      public void generateMipmaps(int level)
      {
!         List<int[][]> list = Lists.<int[][]>newArrayList();
  
          for (int i = 0; i < this.framesTextureData.size(); ++i)
          {
!             final int[][] aint = (int[][])this.framesTextureData.get(i);
  
              if (aint != null)
              {
                  try
                  {
!                     list.add(TextureUtil.generateMipmapData(level, this.width, aint));
                  }
                  catch (Throwable throwable)
                  {
                      CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Generating mipmaps for frame");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Frame being iterated");
                      crashreportcategory.addCrashSection("Frame index", Integer.valueOf(i));
!                     crashreportcategory.addCrashSectionCallable("Frame sizes", new Callable<String>()
                      {
                          public String call() throws Exception
                          {
                              StringBuilder stringbuilder = new StringBuilder();
--- 381,448 ----
              }
              else
              {
!                 ArrayList arraylist = Lists.newArrayList();
  
!                 for (int i2 = 0; i2 < j1; ++i2)
                  {
!                     this.framesTextureData.add(getFrameTextureData(aint, k1, l, i2));
!                     arraylist.add(new AnimationFrame(i2, -1));
                  }
  
!                 this.animationMetadata = new AnimationMetadataSection(arraylist, this.width, this.height, meta.getFrameTime(), meta.isInterpolate());
!             }
!         }
! 
!         if (!this.isShadersSprite)
!         {
!             if (Config.isShaders())
!             {
!                 this.loadShadersSprites();
!             }
! 
!             for (int l1 = 0; l1 < this.framesTextureData.size(); ++l1)
!             {
!                 int[][] aint1 = (int[][])((int[][])this.framesTextureData.get(l1));
! 
!                 if (aint1 != null && !this.iconName.startsWith("minecraft:blocks/leaves_"))
!                 {
!                     for (int j2 = 0; j2 < aint1.length; ++j2)
!                     {
!                         int[] aint2 = aint1[j2];
!                         this.fixTransparentColor(aint2);
!                     }
!                 }
!             }
! 
!             if (this.spriteSingle != null)
!             {
!                 this.spriteSingle.loadSprite(images, meta);
              }
          }
      }
  
      public void generateMipmaps(int level)
      {
!         ArrayList arraylist = Lists.newArrayList();
  
          for (int i = 0; i < this.framesTextureData.size(); ++i)
          {
!             final int[][] aint = (int[][])((int[][])this.framesTextureData.get(i));
  
              if (aint != null)
              {
                  try
                  {
!                     arraylist.add(TextureUtil.generateMipmapData(level, this.width, aint));
                  }
                  catch (Throwable throwable)
                  {
                      CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Generating mipmaps for frame");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Frame being iterated");
                      crashreportcategory.addCrashSection("Frame index", Integer.valueOf(i));
!                     crashreportcategory.addCrashSectionCallable("Frame sizes", new Callable()
                      {
+                         private static final String __OBFID = "CL_00001063";
                          public String call() throws Exception
                          {
                              StringBuilder stringbuilder = new StringBuilder();
***************
*** 370,376 ****
              }
          }
  
!         this.setFramesTextureData(list);
      }
  
      private void allocateFrameTextureData(int index)
--- 465,476 ----
              }
          }
  
!         this.setFramesTextureData(arraylist);
! 
!         if (this.spriteSingle != null)
!         {
!             this.spriteSingle.generateMipmaps(level);
!         }
      }
  
      private void allocateFrameTextureData(int index)
***************
*** 379,387 ****
          {
              for (int i = this.framesTextureData.size(); i <= index; ++i)
              {
!                 this.framesTextureData.add((int[][])null);
              }
          }
      }
  
      private static int[][] getFrameTextureData(int[][] data, int rows, int columns, int p_147962_3_)
--- 479,492 ----
          {
              for (int i = this.framesTextureData.size(); i <= index; ++i)
              {
!                 this.framesTextureData.add((Object)null);
              }
          }
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.allocateFrameTextureData(index);
+         }
      }
  
      private static int[][] getFrameTextureData(int[][] data, int rows, int columns, int p_147962_3_)
***************
*** 405,410 ****
--- 510,520 ----
      public void clearFramesTextureData()
      {
          this.framesTextureData.clear();
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.clearFramesTextureData();
+         }
      }
  
      public boolean hasAnimationMetadata()
***************
*** 412,432 ****
          return this.animationMetadata != null;
      }
  
!     public void setFramesTextureData(List<int[][]> newFramesTextureData)
      {
          this.framesTextureData = newFramesTextureData;
      }
  
      private void resetSprite()
      {
          this.animationMetadata = null;
!         this.setFramesTextureData(Lists.<int[][]>newArrayList());
          this.frameCounter = 0;
          this.tickCounter = 0;
      }
  
      public String toString()
      {
          return "TextureAtlasSprite{name=\'" + this.iconName + '\'' + ", frameCount=" + this.framesTextureData.size() + ", rotated=" + this.rotated + ", x=" + this.originX + ", y=" + this.originY + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.minU + ", u1=" + this.maxU + ", v0=" + this.minV + ", v1=" + this.maxV + '}';
      }
  }
--- 522,797 ----
          return this.animationMetadata != null;
      }
  
!     public void setFramesTextureData(List newFramesTextureData)
      {
          this.framesTextureData = newFramesTextureData;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.setFramesTextureData(newFramesTextureData);
+         }
      }
  
      private void resetSprite()
      {
          this.animationMetadata = null;
!         this.setFramesTextureData(Lists.newArrayList());
          this.frameCounter = 0;
          this.tickCounter = 0;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.resetSprite();
+         }
      }
  
      public String toString()
      {
          return "TextureAtlasSprite{name=\'" + this.iconName + '\'' + ", frameCount=" + this.framesTextureData.size() + ", rotated=" + this.rotated + ", x=" + this.originX + ", y=" + this.originY + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.minU + ", u1=" + this.maxU + ", v0=" + this.minV + ", v1=" + this.maxV + '}';
      }
+ 
+     public boolean hasCustomLoader(IResourceManager p_hasCustomLoader_1_, ResourceLocation p_hasCustomLoader_2_)
+     {
+         return false;
+     }
+ 
+     public boolean load(IResourceManager p_load_1_, ResourceLocation p_load_2_)
+     {
+         return true;
+     }
+ 
+     public int getIndexInMap()
+     {
+         return this.indexInMap;
+     }
+ 
+     public void setIndexInMap(int p_setIndexInMap_1_)
+     {
+         this.indexInMap = p_setIndexInMap_1_;
+     }
+ 
+     private void fixTransparentColor(int[] p_fixTransparentColor_1_)
+     {
+         if (p_fixTransparentColor_1_ != null)
+         {
+             long i = 0L;
+             long j = 0L;
+             long k = 0L;
+             long l = 0L;
+ 
+             for (int i1 = 0; i1 < p_fixTransparentColor_1_.length; ++i1)
+             {
+                 int j1 = p_fixTransparentColor_1_[i1];
+                 int k1 = j1 >> 24 & 255;
+ 
+                 if (k1 >= 16)
+                 {
+                     int l1 = j1 >> 16 & 255;
+                     int i2 = j1 >> 8 & 255;
+                     int j2 = j1 & 255;
+                     i += (long)l1;
+                     j += (long)i2;
+                     k += (long)j2;
+                     ++l;
+                 }
+             }
+ 
+             if (l > 0L)
+             {
+                 int l2 = (int)(i / l);
+                 int i3 = (int)(j / l);
+                 int j3 = (int)(k / l);
+                 int k3 = l2 << 16 | i3 << 8 | j3;
+ 
+                 for (int l3 = 0; l3 < p_fixTransparentColor_1_.length; ++l3)
+                 {
+                     int i4 = p_fixTransparentColor_1_[l3];
+                     int k2 = i4 >> 24 & 255;
+ 
+                     if (k2 <= 16)
+                     {
+                         p_fixTransparentColor_1_[l3] = k3;
+                     }
+                 }
+             }
+         }
+     }
+ 
+     public double getSpriteU16(float p_getSpriteU16_1_)
+     {
+         float f = this.maxU - this.minU;
+         return (double)((p_getSpriteU16_1_ - this.minU) / f * 16.0F);
+     }
+ 
+     public double getSpriteV16(float p_getSpriteV16_1_)
+     {
+         float f = this.maxV - this.minV;
+         return (double)((p_getSpriteV16_1_ - this.minV) / f * 16.0F);
+     }
+ 
+     public void bindSpriteTexture()
+     {
+         if (this.glSpriteTextureId < 0)
+         {
+             this.glSpriteTextureId = TextureUtil.glGenTextures();
+             TextureUtil.allocateTextureImpl(this.glSpriteTextureId, this.mipmapLevels, this.width, this.height);
+             TextureUtils.applyAnisotropicLevel();
+         }
+ 
+         TextureUtils.bindTexture(this.glSpriteTextureId);
+     }
+ 
+     public void deleteSpriteTexture()
+     {
+         if (this.glSpriteTextureId >= 0)
+         {
+             TextureUtil.deleteTexture(this.glSpriteTextureId);
+             this.glSpriteTextureId = -1;
+         }
+     }
+ 
+     public float toSingleU(float p_toSingleU_1_)
+     {
+         p_toSingleU_1_ = p_toSingleU_1_ - this.baseU;
+         float f = (float)this.sheetWidth / (float)this.width;
+         p_toSingleU_1_ = p_toSingleU_1_ * f;
+         return p_toSingleU_1_;
+     }
+ 
+     public float toSingleV(float p_toSingleV_1_)
+     {
+         p_toSingleV_1_ = p_toSingleV_1_ - this.baseV;
+         float f = (float)this.sheetHeight / (float)this.height;
+         p_toSingleV_1_ = p_toSingleV_1_ * f;
+         return p_toSingleV_1_;
+     }
+ 
+     public List<int[][]> getFramesTextureData()
+     {
+         List<int[][]> list = new ArrayList();
+         list.addAll(this.framesTextureData);
+         return list;
+     }
+ 
+     public AnimationMetadataSection getAnimationMetadata()
+     {
+         return this.animationMetadata;
+     }
+ 
+     public void setAnimationMetadata(AnimationMetadataSection p_setAnimationMetadata_1_)
+     {
+         this.animationMetadata = p_setAnimationMetadata_1_;
+     }
+ 
+     private void loadShadersSprites()
+     {
+         this.mipmapLevels = Config.getTextureMap().getMipmapLevels();
+ 
+         if (Shaders.configNormalMap)
+         {
+             String s = this.iconName + "_n";
+             ResourceLocation resourcelocation = new ResourceLocation(s);
+             resourcelocation = Config.getTextureMap().completeResourceLocation(resourcelocation, 0);
+ 
+             if (Config.hasResource(resourcelocation))
+             {
+                 try
+                 {
+                     TextureAtlasSprite textureatlassprite = new TextureAtlasSprite(s);
+                     textureatlassprite.isShadersSprite = true;
+                     textureatlassprite.copyFrom(this);
+                     textureatlassprite.loadShaderSpriteFrames(resourcelocation, this.mipmapLevels + 1);
+                     textureatlassprite.generateMipmaps(this.mipmapLevels);
+                     this.spriteNormal = textureatlassprite;
+                 }
+                 catch (IOException ioexception1)
+                 {
+                     Config.warn("Error loading normal texture: " + s);
+                     Config.warn(ioexception1.getClass().getName() + ": " + ioexception1.getMessage());
+                 }
+             }
+         }
+ 
+         if (Shaders.configSpecularMap)
+         {
+             String s1 = this.iconName + "_s";
+             ResourceLocation resourcelocation1 = new ResourceLocation(s1);
+             resourcelocation1 = Config.getTextureMap().completeResourceLocation(resourcelocation1, 0);
+ 
+             if (Config.hasResource(resourcelocation1))
+             {
+                 try
+                 {
+                     TextureAtlasSprite textureatlassprite1 = new TextureAtlasSprite(s1);
+                     textureatlassprite1.isShadersSprite = true;
+                     textureatlassprite1.copyFrom(this);
+                     textureatlassprite1.loadShaderSpriteFrames(resourcelocation1, this.mipmapLevels + 1);
+                     textureatlassprite1.generateMipmaps(this.mipmapLevels);
+                     this.spriteSpecular = textureatlassprite1;
+                 }
+                 catch (IOException ioexception)
+                 {
+                     Config.warn("Error loading specular texture: " + s1);
+                     Config.warn(ioexception.getClass().getName() + ": " + ioexception.getMessage());
+                 }
+             }
+         }
+     }
+ 
+     public void loadShaderSpriteFrames(ResourceLocation p_loadShaderSpriteFrames_1_, int p_loadShaderSpriteFrames_2_) throws IOException
+     {
+         IResource iresource = Config.getResource(p_loadShaderSpriteFrames_1_);
+         BufferedImage bufferedimage = TextureUtil.readBufferedImage(iresource.getInputStream());
+ 
+         if (this.width != bufferedimage.getWidth())
+         {
+             bufferedimage = TextureUtils.scaleImage(bufferedimage, this.width);
+         }
+ 
+         AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)iresource.getMetadata("animation");
+         int[][] aint = new int[p_loadShaderSpriteFrames_2_][];
+         aint[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
+         bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), aint[0], 0, bufferedimage.getWidth());
+ 
+         if (animationmetadatasection == null)
+         {
+             this.framesTextureData.add(aint);
+         }
+         else
+         {
+             int i = bufferedimage.getHeight() / this.width;
+ 
+             if (animationmetadatasection.getFrameCount() > 0)
+             {
+                 Iterator iterator = animationmetadatasection.getFrameIndexSet().iterator();
+ 
+                 while (iterator.hasNext())
+                 {
+                     int j = ((Integer)iterator.next()).intValue();
+ 
+                     if (j >= i)
+                     {
+                         throw new RuntimeException("invalid frameindex " + j);
+                     }
+ 
+                     this.allocateFrameTextureData(j);
+                     this.framesTextureData.set(j, getFrameTextureData(aint, this.width, this.width, j));
+                 }
+ 
+                 this.animationMetadata = animationmetadatasection;
+             }
+             else
+             {
+                 List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
+ 
+                 for (int k = 0; k < i; ++k)
+                 {
+                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, k));
+                     list.add(new AnimationFrame(k, -1));
+                 }
+ 
+                 this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate());
+             }
+         }
+     }
  }
diff -rc ./client/renderer/texture/TextureClock.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureClock.java
*** ./client/renderer/texture/TextureClock.java	2021-04-03 11:27:28.619578000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureClock.java	2019-05-30 22:29:19.591449000 -0700
***************
*** 2,12 ****
--- 2,15 ----
  
  import net.minecraft.client.Minecraft;
  import net.minecraft.util.MathHelper;
+ import optifine.Config;
+ import shadersmod.client.ShadersTex;
  
  public class TextureClock extends TextureAtlasSprite
  {
      private double field_94239_h;
      private double field_94240_i;
+     private static final String __OBFID = "CL_00001070";
  
      public TextureClock(String iconName)
      {
***************
*** 56,62 ****
              if (i != this.frameCounter)
              {
                  this.frameCounter = i;
!                 TextureUtil.uploadTextureMipmap((int[][])this.framesTextureData.get(this.frameCounter), this.width, this.height, this.originX, this.originY, false, false);
              }
          }
      }
--- 59,73 ----
              if (i != this.frameCounter)
              {
                  this.frameCounter = i;
! 
!                 if (Config.isShaders())
!                 {
!                     ShadersTex.uploadTexSub((int[][])((int[][])this.framesTextureData.get(this.frameCounter)), this.width, this.height, this.originX, this.originY, false, false);
!                 }
!                 else
!                 {
!                     TextureUtil.uploadTextureMipmap((int[][])((int[][])this.framesTextureData.get(this.frameCounter)), this.width, this.height, this.originX, this.originY, false, false);
!                 }
              }
          }
      }
diff -rc ./client/renderer/texture/TextureCompass.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureCompass.java
*** ./client/renderer/texture/TextureCompass.java	2021-04-03 11:27:28.626580000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureCompass.java	2019-05-30 22:29:19.604442000 -0700
***************
*** 4,9 ****
--- 4,11 ----
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.MathHelper;
  import net.minecraft.world.World;
+ import optifine.Config;
+ import shadersmod.client.ShadersTex;
  
  public class TextureCompass extends TextureAtlasSprite
  {
***************
*** 13,18 ****
--- 15,21 ----
      /** Speed and direction of compass rotation */
      public double angleDelta;
      public static String field_176608_l;
+     private static final String __OBFID = "CL_00001071";
  
      public TextureCompass(String iconName)
      {
***************
*** 91,97 ****
              if (i != this.frameCounter)
              {
                  this.frameCounter = i;
!                 TextureUtil.uploadTextureMipmap((int[][])this.framesTextureData.get(this.frameCounter), this.width, this.height, this.originX, this.originY, false, false);
              }
          }
      }
--- 94,108 ----
              if (i != this.frameCounter)
              {
                  this.frameCounter = i;
! 
!                 if (Config.isShaders())
!                 {
!                     ShadersTex.uploadTexSub((int[][])((int[][])this.framesTextureData.get(this.frameCounter)), this.width, this.height, this.originX, this.originY, false, false);
!                 }
!                 else
!                 {
!                     TextureUtil.uploadTextureMipmap((int[][])((int[][])this.framesTextureData.get(this.frameCounter)), this.width, this.height, this.originX, this.originY, false, false);
!                 }
              }
          }
      }
diff -rc ./client/renderer/texture/TextureManager.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureManager.java
*** ./client/renderer/texture/TextureManager.java	2021-04-03 11:27:28.632623000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureManager.java	2019-05-30 22:29:19.620432000 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import java.io.IOException;
+ import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import java.util.Map.Entry;
***************
*** 13,28 ****
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
  public class TextureManager implements ITickable, IResourceManagerReloadListener
  {
      private static final Logger logger = LogManager.getLogger();
!     private final Map<ResourceLocation, ITextureObject> mapTextureObjects = Maps.<ResourceLocation, ITextureObject>newHashMap();
!     private final List<ITickable> listTickables = Lists.<ITickable>newArrayList();
!     private final Map<String, Integer> mapTextureCounters = Maps.<String, Integer>newHashMap();
      private IResourceManager theResourceManager;
  
      public TextureManager(IResourceManager resourceManager)
      {
--- 14,34 ----
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.RandomMobs;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.ShadersTex;
  
  public class TextureManager implements ITickable, IResourceManagerReloadListener
  {
      private static final Logger logger = LogManager.getLogger();
!     private final Map mapTextureObjects = Maps.newHashMap();
!     private final List listTickables = Lists.newArrayList();
!     private final Map mapTextureCounters = Maps.newHashMap();
      private IResourceManager theResourceManager;
+     private static final String __OBFID = "CL_00001064";
  
      public TextureManager(IResourceManager resourceManager)
      {
***************
*** 31,45 ****
  
      public void bindTexture(ResourceLocation resource)
      {
!         ITextureObject itextureobject = (ITextureObject)this.mapTextureObjects.get(resource);
  
!         if (itextureobject == null)
          {
!             itextureobject = new SimpleTexture(resource);
!             this.loadTexture(resource, itextureobject);
          }
  
!         TextureUtil.bindTexture(itextureobject.getGlTextureId());
      }
  
      public boolean loadTickableTexture(ResourceLocation textureLocation, ITickableTextureObject textureObj)
--- 37,63 ----
  
      public void bindTexture(ResourceLocation resource)
      {
!         if (Config.isRandomMobs())
!         {
!             resource = RandomMobs.getTextureLocation(resource);
!         }
! 
!         Object object = (ITextureObject)this.mapTextureObjects.get(resource);
  
!         if (object == null)
          {
!             object = new SimpleTexture(resource);
!             this.loadTexture(resource, (ITextureObject)object);
          }
  
!         if (Config.isShaders())
!         {
!             ShadersTex.bindTexture((ITextureObject)object);
!         }
!         else
!         {
!             TextureUtil.bindTexture(((ITextureObject)object).getGlTextureId());
!         }
      }
  
      public boolean loadTickableTexture(ResourceLocation textureLocation, ITickableTextureObject textureObj)
***************
*** 55,92 ****
          }
      }
  
!     public boolean loadTexture(ResourceLocation textureLocation, ITextureObject textureObj)
      {
          boolean flag = true;
  
          try
          {
!             ((ITextureObject)textureObj).loadTexture(this.theResourceManager);
          }
          catch (IOException ioexception)
          {
              logger.warn((String)("Failed to load texture: " + textureLocation), (Throwable)ioexception);
!             textureObj = TextureUtil.missingTexture;
!             this.mapTextureObjects.put(textureLocation, (ITextureObject)textureObj);
              flag = false;
          }
          catch (Throwable throwable)
          {
-             final ITextureObject textureObjf = textureObj;
              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Registering texture");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Resource location being registered");
              crashreportcategory.addCrashSection("Resource location", textureLocation);
!             crashreportcategory.addCrashSectionCallable("Texture object class", new Callable<String>()
              {
                  public String call() throws Exception
                  {
!                     return textureObjf.getClass().getName();
                  }
              });
              throw new ReportedException(crashreport);
          }
  
!         this.mapTextureObjects.put(textureLocation, (ITextureObject)textureObj);
          return flag;
      }
  
--- 73,111 ----
          }
      }
  
!     public boolean loadTexture(ResourceLocation textureLocation, final ITextureObject textureObj)
      {
          boolean flag = true;
+         ITextureObject itextureobject = textureObj;
  
          try
          {
!             textureObj.loadTexture(this.theResourceManager);
          }
          catch (IOException ioexception)
          {
              logger.warn((String)("Failed to load texture: " + textureLocation), (Throwable)ioexception);
!             itextureobject = TextureUtil.missingTexture;
!             this.mapTextureObjects.put(textureLocation, itextureobject);
              flag = false;
          }
          catch (Throwable throwable)
          {
              CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Registering texture");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Resource location being registered");
              crashreportcategory.addCrashSection("Resource location", textureLocation);
!             crashreportcategory.addCrashSectionCallable("Texture object class", new Callable()
              {
+                 private static final String __OBFID = "CL_00001065";
                  public String call() throws Exception
                  {
!                     return textureObj.getClass().getName();
                  }
              });
              throw new ReportedException(crashreport);
          }
  
!         this.mapTextureObjects.put(textureLocation, itextureobject);
          return flag;
      }
  
***************
*** 97,102 ****
--- 116,126 ----
  
      public ResourceLocation getDynamicTextureLocation(String name, DynamicTexture texture)
      {
+         if (name.equals("logo"))
+         {
+             texture = Config.getMojangLogoTexture(texture);
+         }
+ 
          Integer integer = (Integer)this.mapTextureCounters.get(name);
  
          if (integer == null)
***************
*** 116,124 ****
  
      public void tick()
      {
!         for (ITickable itickable : this.listTickables)
          {
!             itickable.tick();
          }
      }
  
--- 140,148 ----
  
      public void tick()
      {
!         for (Object itickable : this.listTickables)
          {
!             ((ITickable) itickable).tick();
          }
      }
  
***************
*** 128,142 ****
  
          if (itextureobject != null)
          {
              TextureUtil.deleteTexture(itextureobject.getGlTextureId());
          }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
!         for (Entry<ResourceLocation, ITextureObject> entry : this.mapTextureObjects.entrySet())
          {
!             this.loadTexture((ResourceLocation)entry.getKey(), (ITextureObject)entry.getValue());
          }
      }
  }
--- 152,204 ----
  
          if (itextureobject != null)
          {
+             this.mapTextureObjects.remove(textureLocation);
              TextureUtil.deleteTexture(itextureobject.getGlTextureId());
          }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
!         Config.dbg("*** Reloading textures ***");
!         Config.log("Resource packs: " + Config.getResourcePackNames());
!         Iterator iterator = this.mapTextureObjects.keySet().iterator();
! 
!         while (iterator.hasNext())
          {
!             ResourceLocation resourcelocation = (ResourceLocation)iterator.next();
!             String s = resourcelocation.getResourcePath();
! 
!             if (s.startsWith("mcpatcher/") || s.startsWith("optifine/"))
!             {
!                 ITextureObject itextureobject = (ITextureObject)this.mapTextureObjects.get(resourcelocation);
! 
!                 if (itextureobject instanceof AbstractTexture)
!                 {
!                     AbstractTexture abstracttexture = (AbstractTexture)itextureobject;
!                     abstracttexture.deleteGlTexture();
!                 }
! 
!                 iterator.remove();
!             }
!         }
! 
!         for (Object entry : this.mapTextureObjects.entrySet())
!         {
!             this.loadTexture((ResourceLocation)((Entry) entry).getKey(), (ITextureObject)((Entry) entry).getValue());
!         }
!     }
! 
!     public void reloadBannerTextures()
!     {
!         for (Object entry : this.mapTextureObjects.entrySet())
!         {
!             ResourceLocation resourcelocation = (ResourceLocation)((Entry) entry).getKey();
!             ITextureObject itextureobject = (ITextureObject)((Entry) entry).getValue();
! 
!             if (itextureobject instanceof LayeredColorMaskTexture)
!             {
!                 this.loadTexture(resourcelocation, itextureobject);
!             }
          }
      }
  }
diff -rc ./client/renderer/texture/TextureMap.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureMap.java
*** ./client/renderer/texture/TextureMap.java	2021-04-03 11:27:28.641636000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureMap.java	2019-05-30 22:29:19.653414000 -0700
***************
*** 1,15 ****
  package net.minecraft.client.renderer.texture;
  
! import com.google.common.collect.Lists;
! import com.google.common.collect.Maps;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import java.util.Map.Entry;
  import java.util.concurrent.Callable;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.StitcherException;
  import net.minecraft.client.resources.IResource;
  import net.minecraft.client.resources.IResourceManager;
--- 1,26 ----
  package net.minecraft.client.renderer.texture;
  
! import java.awt.Dimension;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
+ import java.io.InputStream;
+ import java.util.HashMap;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import java.util.Map.Entry;
+ import java.util.Set;
+ import java.util.TreeSet;
  import java.util.concurrent.Callable;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ 
+ import com.google.common.collect.Lists;
+ import com.google.common.collect.Maps;
+ 
  import net.minecraft.client.Minecraft;
+ import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.StitcherException;
  import net.minecraft.client.resources.IResource;
  import net.minecraft.client.resources.IResourceManager;
***************
*** 20,68 ****
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
! import org.apache.logging.log4j.LogManager;
! import org.apache.logging.log4j.Logger;
  
  public class TextureMap extends AbstractTexture implements ITickableTextureObject
  {
      private static final Logger logger = LogManager.getLogger();
      public static final ResourceLocation LOCATION_MISSING_TEXTURE = new ResourceLocation("missingno");
      public static final ResourceLocation locationBlocksTexture = new ResourceLocation("textures/atlas/blocks.png");
!     private final List<TextureAtlasSprite> listAnimatedSprites;
!     private final Map<String, TextureAtlasSprite> mapRegisteredSprites;
!     private final Map<String, TextureAtlasSprite> mapUploadedSprites;
      private final String basePath;
      private final IIconCreator iconCreator;
      private int mipmapLevels;
      private final TextureAtlasSprite missingImage;
  
      public TextureMap(String p_i46099_1_)
      {
          this(p_i46099_1_, (IIconCreator)null);
      }
  
      public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn)
      {
!         this.listAnimatedSprites = Lists.<TextureAtlasSprite>newArrayList();
!         this.mapRegisteredSprites = Maps.<String, TextureAtlasSprite>newHashMap();
!         this.mapUploadedSprites = Maps.<String, TextureAtlasSprite>newHashMap();
          this.missingImage = new TextureAtlasSprite("missingno");
!         this.basePath = p_i46100_1_;
!         this.iconCreator = iconCreatorIn;
      }
  
      private void initMissingImage()
      {
!         int[] aint = TextureUtil.missingTextureData;
!         this.missingImage.setIconWidth(16);
!         this.missingImage.setIconHeight(16);
          int[][] aint1 = new int[this.mipmapLevels + 1][];
          aint1[0] = aint;
          this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {aint1}));
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
      {
          if (this.iconCreator != null)
          {
              this.loadSprites(resourceManager, this.iconCreator);
--- 31,119 ----
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
! import optifine.Config;
! import optifine.ConnectedTextures;
! import optifine.Reflector;
! import optifine.TextureUtils;
! import shadersmod.client.ShadersTex;
  
  public class TextureMap extends AbstractTexture implements ITickableTextureObject
  {
+     private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
      private static final Logger logger = LogManager.getLogger();
      public static final ResourceLocation LOCATION_MISSING_TEXTURE = new ResourceLocation("missingno");
      public static final ResourceLocation locationBlocksTexture = new ResourceLocation("textures/atlas/blocks.png");
!     private final List listAnimatedSprites;
!     private final Map mapRegisteredSprites;
!     private final Map mapUploadedSprites;
      private final String basePath;
      private final IIconCreator iconCreator;
      private int mipmapLevels;
      private final TextureAtlasSprite missingImage;
+     private static final String __OBFID = "CL_00001058";
+     private boolean skipFirst;
+     private TextureAtlasSprite[] iconGrid;
+     private int iconGridSize;
+     private int iconGridCountX;
+     private int iconGridCountY;
+     private double iconGridSizeU;
+     private double iconGridSizeV;
+     private int counterIndexInMap;
+     public int atlasWidth;
+     public int atlasHeight;
  
      public TextureMap(String p_i46099_1_)
      {
          this(p_i46099_1_, (IIconCreator)null);
      }
  
+     public TextureMap(String p_i10_1_, boolean p_i10_2_)
+     {
+         this(p_i10_1_, (IIconCreator)null, p_i10_2_);
+     }
+ 
      public TextureMap(String p_i46100_1_, IIconCreator iconCreatorIn)
      {
!         this(p_i46100_1_, iconCreatorIn, false);
!     }
! 
!     public TextureMap(String p_i11_1_, IIconCreator p_i11_2_, boolean p_i11_3_)
!     {
!         this.skipFirst = false;
!         this.iconGrid = null;
!         this.iconGridSize = -1;
!         this.iconGridCountX = -1;
!         this.iconGridCountY = -1;
!         this.iconGridSizeU = -1.0D;
!         this.iconGridSizeV = -1.0D;
!         this.counterIndexInMap = 0;
!         this.atlasWidth = 0;
!         this.atlasHeight = 0;
!         this.listAnimatedSprites = Lists.newArrayList();
!         this.mapRegisteredSprites = Maps.newHashMap();
!         this.mapUploadedSprites = Maps.newHashMap();
          this.missingImage = new TextureAtlasSprite("missingno");
!         this.basePath = p_i11_1_;
!         this.iconCreator = p_i11_2_;
!         this.skipFirst = p_i11_3_ && ENABLE_SKIP;
      }
  
      private void initMissingImage()
      {
!         int i = this.getMinSpriteSize();
!         int[] aint = this.getMissingImageData(i);
!         this.missingImage.setIconWidth(i);
!         this.missingImage.setIconHeight(i);
          int[][] aint1 = new int[this.mipmapLevels + 1][];
          aint1[0] = aint;
          this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {aint1}));
+         this.missingImage.setIndexInMap(this.counterIndexInMap++);
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
      {
+         ShadersTex.resManager = resourceManager;
+ 
          if (this.iconCreator != null)
          {
              this.loadSprites(resourceManager, this.iconCreator);
***************
*** 72,78 ****
--- 123,137 ----
      public void loadSprites(IResourceManager resourceManager, IIconCreator p_174943_2_)
      {
          this.mapRegisteredSprites.clear();
+         this.counterIndexInMap = 0;
          p_174943_2_.registerSprites(this);
+ 
+         if (this.mipmapLevels >= 4)
+         {
+             this.mipmapLevels = this.detectMaxMipmapLevel(this.mapRegisteredSprites, resourceManager);
+             Config.log("Mipmap levels: " + this.mipmapLevels);
+         }
+ 
          this.initMissingImage();
          this.deleteGlTexture();
          this.loadTextureAtlas(resourceManager);
***************
*** 80,206 ****
  
      public void loadTextureAtlas(IResourceManager resourceManager)
      {
!         int i = Minecraft.getGLMaximumTextureSize();
!         Stitcher stitcher = new Stitcher(i, i, true, 0, this.mipmapLevels);
          this.mapUploadedSprites.clear();
          this.listAnimatedSprites.clear();
!         int j = Integer.MAX_VALUE;
          int k = 1 << this.mipmapLevels;
  
!         for (Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet())
          {
!             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
!             ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.getIconName());
              ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation, 0);
  
!             try
              {
!                 IResource iresource = resourceManager.getResource(resourcelocation1);
!                 BufferedImage[] abufferedimage = new BufferedImage[1 + this.mipmapLevels];
!                 abufferedimage[0] = TextureUtil.readBufferedImage(iresource.getInputStream());
!                 TextureMetadataSection texturemetadatasection = (TextureMetadataSection)iresource.getMetadata("texture");
! 
!                 if (texturemetadatasection != null)
                  {
!                     List<Integer> list = texturemetadatasection.getListMipmaps();
  
!                     if (!list.isEmpty())
                      {
                          int l = abufferedimage[0].getWidth();
!                         int i1 = abufferedimage[0].getHeight();
  
!                         if (MathHelper.roundUpToPowerOfTwo(l) != l || MathHelper.roundUpToPowerOfTwo(i1) != i1)
                          {
!                             throw new RuntimeException("Unable to load extra miplevels, source-texture is not power of two");
                          }
                      }
  
!                     Iterator iterator = list.iterator();
  
!                     while (iterator.hasNext())
                      {
!                         int i2 = ((Integer)iterator.next()).intValue();
  
!                         if (i2 > 0 && i2 < abufferedimage.length - 1 && abufferedimage[i2] == null)
                          {
!                             ResourceLocation resourcelocation2 = this.completeResourceLocation(resourcelocation, i2);
  
!                             try
                              {
!                                 abufferedimage[i2] = TextureUtil.readBufferedImage(resourceManager.getResource(resourcelocation2).getInputStream());
                              }
!                             catch (IOException ioexception)
                              {
!                                 logger.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(i2), resourcelocation2, ioexception});
                              }
                          }
                      }
                  }
  
!                 AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)iresource.getMetadata("animation");
!                 textureatlassprite.loadSprite(abufferedimage, animationmetadatasection);
!             }
!             catch (RuntimeException runtimeexception)
!             {
!                 logger.error((String)("Unable to parse metadata from " + resourcelocation1), (Throwable)runtimeexception);
!                 continue;
!             }
!             catch (IOException ioexception1)
!             {
!                 logger.error((String)("Using missing texture, unable to load " + resourcelocation1), (Throwable)ioexception1);
!                 continue;
!             }
  
!             j = Math.min(j, Math.min(textureatlassprite.getIconWidth(), textureatlassprite.getIconHeight()));
!             int l1 = Math.min(Integer.lowestOneBit(textureatlassprite.getIconWidth()), Integer.lowestOneBit(textureatlassprite.getIconHeight()));
  
!             if (l1 < k)
              {
!                 logger.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[] {resourcelocation1, Integer.valueOf(textureatlassprite.getIconWidth()), Integer.valueOf(textureatlassprite.getIconHeight()), Integer.valueOf(MathHelper.calculateLogBaseTwo(k)), Integer.valueOf(MathHelper.calculateLogBaseTwo(l1))});
!                 k = l1;
              }
- 
-             stitcher.addSprite(textureatlassprite);
          }
  
!         int j1 = Math.min(j, k);
!         int k1 = MathHelper.calculateLogBaseTwo(j1);
  
!         if (k1 < this.mipmapLevels)
          {
!             logger.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(k1), Integer.valueOf(j1)});
!             this.mipmapLevels = k1;
          }
  
!         for (final TextureAtlasSprite textureatlassprite1 : this.mapRegisteredSprites.values())
          {
              try
              {
!                 textureatlassprite1.generateMipmaps(this.mipmapLevels);
              }
              catch (Throwable throwable1)
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Applying mipmap");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Sprite being mipmapped");
!                 crashreportcategory.addCrashSectionCallable("Sprite name", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
!                         return textureatlassprite1.getIconName();
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Sprite size", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
!                         return textureatlassprite1.getIconWidth() + " x " + textureatlassprite1.getIconHeight();
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Sprite frames", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
!                         return textureatlassprite1.getFrameCount() + " frames";
                      }
                  });
                  crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
--- 139,309 ----
  
      public void loadTextureAtlas(IResourceManager resourceManager)
      {
!         Config.dbg("Multitexture: " + Config.isMultiTexture());
! 
!         if (Config.isMultiTexture())
!         {
!             for (Object textureatlassprite : this.mapUploadedSprites.values())
!             {
!                 ((TextureAtlasSprite) textureatlassprite).deleteSpriteTexture();
!             }
!         }
! 
!         ConnectedTextures.updateIcons(this);
!         int l1 = Minecraft.getGLMaximumTextureSize();
!         Stitcher stitcher = new Stitcher(l1, l1, true, 0, this.mipmapLevels);
          this.mapUploadedSprites.clear();
          this.listAnimatedSprites.clear();
!         int i = Integer.MAX_VALUE;
!         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, new Object[] {this});
!         int j = this.getMinSpriteSize();
          int k = 1 << this.mipmapLevels;
  
!         for (Object entry : this.mapRegisteredSprites.entrySet())
          {
!             TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)((Entry) entry).getValue();
!             ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite1.getIconName());
              ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation, 0);
  
!             if (!textureatlassprite1.hasCustomLoader(resourceManager, resourcelocation))
              {
!                 try
                  {
!                     IResource iresource = resourceManager.getResource(resourcelocation1);
!                     BufferedImage[] abufferedimage = new BufferedImage[1 + this.mipmapLevels];
!                     abufferedimage[0] = TextureUtil.readBufferedImage(iresource.getInputStream());
  
!                     if (this.mipmapLevels > 0 && abufferedimage != null)
                      {
                          int l = abufferedimage[0].getWidth();
!                         abufferedimage[0] = TextureUtils.scaleToPowerOfTwo(abufferedimage[0], j);
!                         int i1 = abufferedimage[0].getWidth();
  
!                         if (!TextureUtils.isPowerOfTwo(l))
                          {
!                             Config.log("Scaled non power of 2: " + textureatlassprite1.getIconName() + ", " + l + " -> " + i1);
                          }
                      }
  
!                     TextureMetadataSection texturemetadatasection = (TextureMetadataSection)iresource.getMetadata("texture");
  
!                     if (texturemetadatasection != null)
                      {
!                         List list = texturemetadatasection.getListMipmaps();
  
!                         if (!list.isEmpty())
                          {
!                             int k1 = abufferedimage[0].getWidth();
!                             int j1 = abufferedimage[0].getHeight();
  
!                             if (MathHelper.roundUpToPowerOfTwo(k1) != k1 || MathHelper.roundUpToPowerOfTwo(j1) != j1)
                              {
!                                 throw new RuntimeException("Unable to load extra miplevels, source-texture is not power of two");
                              }
!                         }
! 
!                         Iterator iterator = list.iterator();
! 
!                         while (iterator.hasNext())
!                         {
!                             int j3 = ((Integer)iterator.next()).intValue();
! 
!                             if (j3 > 0 && j3 < abufferedimage.length - 1 && abufferedimage[j3] == null)
                              {
!                                 ResourceLocation resourcelocation2 = this.completeResourceLocation(resourcelocation, j3);
! 
!                                 try
!                                 {
!                                     abufferedimage[j3] = TextureUtil.readBufferedImage(resourceManager.getResource(resourcelocation2).getInputStream());
!                                 }
!                                 catch (IOException ioexception)
!                                 {
!                                     logger.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(j3), resourcelocation2, ioexception});
!                                 }
                              }
                          }
                      }
+ 
+                     AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)iresource.getMetadata("animation");
+                     textureatlassprite1.loadSprite(abufferedimage, animationmetadatasection);
+                 }
+                 catch (RuntimeException runtimeexception)
+                 {
+                     logger.error((String)("Unable to parse metadata from " + resourcelocation1), (Throwable)runtimeexception);
+                     continue;
+                 }
+                 catch (IOException ioexception1)
+                 {
+                     logger.error("Using missing texture, unable to load " + resourcelocation1 + ", " + ioexception1.getClass().getName());
+                     continue;
                  }
  
!                 i = Math.min(i, Math.min(textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight()));
!                 int k2 = Math.min(Integer.lowestOneBit(textureatlassprite1.getIconWidth()), Integer.lowestOneBit(textureatlassprite1.getIconHeight()));
  
!                 if (k2 < k)
!                 {
!                     logger.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[] {resourcelocation1, Integer.valueOf(textureatlassprite1.getIconWidth()), Integer.valueOf(textureatlassprite1.getIconHeight()), Integer.valueOf(MathHelper.calculateLogBaseTwo(k)), Integer.valueOf(MathHelper.calculateLogBaseTwo(k2))});
!                     k = k2;
!                 }
  
!                 stitcher.addSprite(textureatlassprite1);
!             }
!             else if (!textureatlassprite1.load(resourceManager, resourcelocation))
              {
!                 i = Math.min(i, Math.min(textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight()));
!                 stitcher.addSprite(textureatlassprite1);
              }
          }
  
!         int i2 = Math.min(i, k);
!         int j2 = MathHelper.calculateLogBaseTwo(i2);
  
!         if (j2 < 0)
          {
!             j2 = 0;
          }
  
!         if (j2 < this.mipmapLevels)
          {
+             logger.info("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(j2), Integer.valueOf(i2)});
+             this.mipmapLevels = j2;
+         }
+ 
+         for (final Object textureatlassprite20 : this.mapRegisteredSprites.values())
+         {
+             final TextureAtlasSprite textureatlassprite2 = (TextureAtlasSprite) textureatlassprite20;
+ 
              try
              {
!                 textureatlassprite2.generateMipmaps(this.mipmapLevels);
              }
              catch (Throwable throwable1)
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Applying mipmap");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Sprite being mipmapped");
!                 crashreportcategory.addCrashSectionCallable("Sprite name", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001059";
                      public String call() throws Exception
                      {
!                         return textureatlassprite2.getIconName();
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Sprite size", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001060";
                      public String call() throws Exception
                      {
!                         return textureatlassprite2.getIconWidth() + " x " + textureatlassprite2.getIconHeight();
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Sprite frames", new Callable()
                  {
+                     private static final String __OBFID = "CL_00001061";
                      public String call() throws Exception
                      {
!                         return textureatlassprite2.getFrameCount() + " frames";
                      }
                  });
                  crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
***************
*** 222,263 ****
  
          logger.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath});
          TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
!         Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.mapRegisteredSprites);
  
!         for (TextureAtlasSprite textureatlassprite2 : stitcher.getStichSlots())
          {
!             String s = textureatlassprite2.getIconName();
!             map.remove(s);
!             this.mapUploadedSprites.put(s, textureatlassprite2);
  
              try
              {
!                 TextureUtil.uploadTextureMipmap(textureatlassprite2.getFrameTextureData(0), textureatlassprite2.getIconWidth(), textureatlassprite2.getIconHeight(), textureatlassprite2.getOriginX(), textureatlassprite2.getOriginY(), false, false);
              }
              catch (Throwable throwable)
              {
                  CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
                  CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Texture being stitched together");
                  crashreportcategory1.addCrashSection("Atlas path", this.basePath);
!                 crashreportcategory1.addCrashSection("Sprite", textureatlassprite2);
                  throw new ReportedException(crashreport1);
              }
  
!             if (textureatlassprite2.hasAnimationMetadata())
              {
!                 this.listAnimatedSprites.add(textureatlassprite2);
              }
          }
  
!         for (TextureAtlasSprite textureatlassprite3 : map.values())
          {
!             textureatlassprite3.copyFrom(this.missingImage);
          }
      }
  
!     private ResourceLocation completeResourceLocation(ResourceLocation location, int p_147634_2_)
      {
!         return p_147634_2_ == 0 ? new ResourceLocation(location.getResourceDomain(), String.format("%s/%s%s", new Object[] {this.basePath, location.getResourcePath(), ".png"})): new ResourceLocation(location.getResourceDomain(), String.format("%s/mipmaps/%s.%d%s", new Object[] {this.basePath, location.getResourcePath(), Integer.valueOf(p_147634_2_), ".png"}));
      }
  
      public TextureAtlasSprite getAtlasSprite(String iconName)
--- 325,402 ----
  
          logger.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath});
          TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
!         HashMap hashmap = Maps.newHashMap(this.mapRegisteredSprites);
  
!         for (Object textureatlassprite30 : stitcher.getStichSlots())
          {
!             TextureAtlasSprite textureatlassprite3 = (TextureAtlasSprite) textureatlassprite30;
!             String s = textureatlassprite3.getIconName();
!             hashmap.remove(s);
!             this.mapUploadedSprites.put(s, textureatlassprite3);
  
              try
              {
!                 TextureUtil.uploadTextureMipmap(textureatlassprite3.getFrameTextureData(0), textureatlassprite3.getIconWidth(), textureatlassprite3.getIconHeight(), textureatlassprite3.getOriginX(), textureatlassprite3.getOriginY(), false, false);
              }
              catch (Throwable throwable)
              {
                  CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
                  CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Texture being stitched together");
                  crashreportcategory1.addCrashSection("Atlas path", this.basePath);
!                 crashreportcategory1.addCrashSection("Sprite", textureatlassprite3);
                  throw new ReportedException(crashreport1);
              }
  
!             if (textureatlassprite3.hasAnimationMetadata())
!             {
!                 this.listAnimatedSprites.add(textureatlassprite3);
!             }
!         }
! 
!         for (Object textureatlassprite4 : hashmap.values())
!         {
!             ((TextureAtlasSprite) textureatlassprite4).copyFrom(this.missingImage);
!         }
! 
!         if (Config.isMultiTexture())
!         {
!             int l2 = stitcher.getCurrentWidth();
!             int i3 = stitcher.getCurrentHeight();
! 
!             for (Object textureatlassprite50 : stitcher.getStichSlots())
              {
!                 TextureAtlasSprite textureatlassprite5 = (TextureAtlasSprite) textureatlassprite50;
!                 textureatlassprite5.sheetWidth = l2;
!                 textureatlassprite5.sheetHeight = i3;
!                 textureatlassprite5.mipmapLevels = this.mipmapLevels;
!                 TextureAtlasSprite textureatlassprite6 = textureatlassprite5.spriteSingle;
! 
!                 if (textureatlassprite6 != null)
!                 {
!                     textureatlassprite6.sheetWidth = l2;
!                     textureatlassprite6.sheetHeight = i3;
!                     textureatlassprite6.mipmapLevels = this.mipmapLevels;
!                     textureatlassprite5.bindSpriteTexture();
!                     boolean flag = false;
!                     boolean flag1 = true;
!                     TextureUtil.uploadTextureMipmap(textureatlassprite6.getFrameTextureData(0), textureatlassprite6.getIconWidth(), textureatlassprite6.getIconHeight(), textureatlassprite6.getOriginX(), textureatlassprite6.getOriginY(), flag, flag1);
!                 }
              }
+ 
+             Config.getMinecraft().getTextureManager().bindTexture(locationBlocksTexture);
          }
  
!         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, new Object[] {this});
! 
!         if (Config.equals(System.getProperty("saveTextureMap"), "true"))
          {
!             TextureUtil.saveGlTexture(this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
          }
      }
  
!     public ResourceLocation completeResourceLocation(ResourceLocation location, int p_147634_2_)
      {
!         return this.isAbsoluteLocation(location) ? (p_147634_2_ == 0 ? new ResourceLocation(location.getResourceDomain(), location.getResourcePath() + ".png") : new ResourceLocation(location.getResourceDomain(), location.getResourcePath() + "mipmap" + p_147634_2_ + ".png")) : (p_147634_2_ == 0 ? new ResourceLocation(location.getResourceDomain(), String.format("%s/%s%s", new Object[] {this.basePath, location.getResourcePath(), ".png"})): new ResourceLocation(location.getResourceDomain(), String.format("%s/mipmaps/%s.%d%s", new Object[] {this.basePath, location.getResourcePath(), Integer.valueOf(p_147634_2_), ".png"})));
      }
  
      public TextureAtlasSprite getAtlasSprite(String iconName)
***************
*** 274,284 ****
  
      public void updateAnimations()
      {
          TextureUtil.bindTexture(this.getGlTextureId());
  
!         for (TextureAtlasSprite textureatlassprite : this.listAnimatedSprites)
          {
!             textureatlassprite.updateAnimation();
          }
      }
  
--- 413,524 ----
  
      public void updateAnimations()
      {
+         if (Config.isShaders())
+         {
+             ShadersTex.updatingTex = this.getMultiTexID();
+         }
+ 
+         boolean flag = false;
+         boolean flag1 = false;
          TextureUtil.bindTexture(this.getGlTextureId());
  
!         for (Object textureatlassprite0 : this.listAnimatedSprites)
!         {
!             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite) textureatlassprite0;
! 
!             if (this.isTerrainAnimationActive(textureatlassprite))
!             {
!                 textureatlassprite.updateAnimation();
! 
!                 if (textureatlassprite.spriteNormal != null)
!                 {
!                     flag = true;
!                 }
! 
!                 if (textureatlassprite.spriteSpecular != null)
!                 {
!                     flag1 = true;
!                 }
!             }
!         }
! 
!         if (Config.isMultiTexture())
          {
!             for (Object textureatlassprite10 : this.listAnimatedSprites)
!             {
!                 TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite) textureatlassprite10;
! 
!                 if (this.isTerrainAnimationActive(textureatlassprite1))
!                 {
!                     TextureAtlasSprite textureatlassprite2 = textureatlassprite1.spriteSingle;
! 
!                     if (textureatlassprite2 != null)
!                     {
!                         if (textureatlassprite1 == TextureUtils.iconClock || textureatlassprite1 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite2.frameCounter = textureatlassprite1.frameCounter;
!                         }
! 
!                         textureatlassprite1.bindSpriteTexture();
!                         textureatlassprite2.updateAnimation();
!                     }
!                 }
!             }
! 
!             TextureUtil.bindTexture(this.getGlTextureId());
!         }
! 
!         if (Config.isShaders())
!         {
!             if (flag)
!             {
!                 TextureUtil.bindTexture(this.getMultiTexID().norm);
! 
!                 for (Object textureatlassprite30 : this.listAnimatedSprites)
!                 {
!                     TextureAtlasSprite textureatlassprite3 = (TextureAtlasSprite) textureatlassprite30;
! 
!                     if (textureatlassprite3.spriteNormal != null && this.isTerrainAnimationActive(textureatlassprite3))
!                     {
!                         if (textureatlassprite3 == TextureUtils.iconClock || textureatlassprite3 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite3.spriteNormal.frameCounter = textureatlassprite3.frameCounter;
!                         }
! 
!                         textureatlassprite3.spriteNormal.updateAnimation();
!                     }
!                 }
!             }
! 
!             if (flag1)
!             {
!                 TextureUtil.bindTexture(this.getMultiTexID().spec);
! 
!                 for (Object textureatlassprite40 : this.listAnimatedSprites)
!                 {
!                     TextureAtlasSprite textureatlassprite4 = (TextureAtlasSprite) textureatlassprite40;
! 
!                     if (textureatlassprite4.spriteSpecular != null && this.isTerrainAnimationActive(textureatlassprite4))
!                     {
!                         if (textureatlassprite4 == TextureUtils.iconClock || textureatlassprite4 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite4.spriteNormal.frameCounter = textureatlassprite4.frameCounter;
!                         }
! 
!                         textureatlassprite4.spriteSpecular.updateAnimation();
!                     }
!                 }
!             }
! 
!             if (flag || flag1)
!             {
!                 TextureUtil.bindTexture(this.getGlTextureId());
!             }
!         }
! 
!         if (Config.isShaders())
!         {
!             ShadersTex.updatingTex = null;
          }
      }
  
***************
*** 290,301 ****
          }
          else
          {
!             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.mapRegisteredSprites.get(location);
  
              if (textureatlassprite == null)
              {
                  textureatlassprite = TextureAtlasSprite.makeAtlasSprite(location);
                  this.mapRegisteredSprites.put(location.toString(), textureatlassprite);
              }
  
              return textureatlassprite;
--- 530,546 ----
          }
          else
          {
!             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.mapRegisteredSprites.get(location.toString());
  
              if (textureatlassprite == null)
              {
                  textureatlassprite = TextureAtlasSprite.makeAtlasSprite(location);
                  this.mapRegisteredSprites.put(location.toString(), textureatlassprite);
+ 
+                 if (textureatlassprite.getIndexInMap() < 0)
+                 {
+                     textureatlassprite.setIndexInMap(this.counterIndexInMap++);
+                 }
              }
  
              return textureatlassprite;
***************
*** 316,319 ****
--- 561,841 ----
      {
          return this.missingImage;
      }
+ 
+     public TextureAtlasSprite getTextureExtry(String p_getTextureExtry_1_)
+     {
+         ResourceLocation resourcelocation = new ResourceLocation(p_getTextureExtry_1_);
+         return (TextureAtlasSprite)this.mapRegisteredSprites.get(resourcelocation.toString());
+     }
+ 
+     public boolean setTextureEntry(String p_setTextureEntry_1_, TextureAtlasSprite p_setTextureEntry_2_)
+     {
+         if (!this.mapRegisteredSprites.containsKey(p_setTextureEntry_1_))
+         {
+             this.mapRegisteredSprites.put(p_setTextureEntry_1_, p_setTextureEntry_2_);
+ 
+             if (p_setTextureEntry_2_.getIndexInMap() < 0)
+             {
+                 p_setTextureEntry_2_.setIndexInMap(this.counterIndexInMap++);
+             }
+ 
+             return true;
+         }
+         else
+         {
+             return false;
+         }
+     }
+ 
+     public boolean setTextureEntry(TextureAtlasSprite p_setTextureEntry_1_)
+     {
+         return this.setTextureEntry(p_setTextureEntry_1_.getIconName(), p_setTextureEntry_1_);
+     }
+ 
+     public String getBasePath()
+     {
+         return this.basePath;
+     }
+ 
+     public int getMipmapLevels()
+     {
+         return this.mipmapLevels;
+     }
+ 
+     private boolean isAbsoluteLocation(ResourceLocation p_isAbsoluteLocation_1_)
+     {
+         String s = p_isAbsoluteLocation_1_.getResourcePath();
+         return this.isAbsoluteLocationPath(s);
+     }
+ 
+     private boolean isAbsoluteLocationPath(String p_isAbsoluteLocationPath_1_)
+     {
+         String s = p_isAbsoluteLocationPath_1_.toLowerCase();
+         return s.startsWith("mcpatcher/") || s.startsWith("optifine/");
+     }
+ 
+     public TextureAtlasSprite getSpriteSafe(String p_getSpriteSafe_1_)
+     {
+         ResourceLocation resourcelocation = new ResourceLocation(p_getSpriteSafe_1_);
+         return (TextureAtlasSprite)this.mapRegisteredSprites.get(resourcelocation.toString());
+     }
+ 
+     private boolean isTerrainAnimationActive(TextureAtlasSprite p_isTerrainAnimationActive_1_)
+     {
+         return p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterFlow ? (p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaFlow ? (p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer0 && p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer1 ? (p_isTerrainAnimationActive_1_ == TextureUtils.iconPortal ? Config.isAnimatedPortal() : (p_isTerrainAnimationActive_1_ != TextureUtils.iconClock && p_isTerrainAnimationActive_1_ != TextureUtils.iconCompass ? Config.isAnimatedTerrain() : true)) : Config.isAnimatedFire()) : Config.isAnimatedLava()) : Config.isAnimatedWater();
+     }
+ 
+     public int getCountRegisteredSprites()
+     {
+         return this.counterIndexInMap;
+     }
+ 
+     private int detectMaxMipmapLevel(Map p_detectMaxMipmapLevel_1_, IResourceManager p_detectMaxMipmapLevel_2_)
+     {
+         int i = this.detectMinimumSpriteSize(p_detectMaxMipmapLevel_1_, p_detectMaxMipmapLevel_2_, 20);
+ 
+         if (i < 16)
+         {
+             i = 16;
+         }
+ 
+         i = MathHelper.roundUpToPowerOfTwo(i);
+ 
+         if (i > 16)
+         {
+             Config.log("Sprite size: " + i);
+         }
+ 
+         int j = MathHelper.calculateLogBaseTwo(i);
+ 
+         if (j < 4)
+         {
+             j = 4;
+         }
+ 
+         return j;
+     }
+ 
+     private int detectMinimumSpriteSize(Map p_detectMinimumSpriteSize_1_, IResourceManager p_detectMinimumSpriteSize_2_, int p_detectMinimumSpriteSize_3_)
+     {
+         Map map = new HashMap();
+ 
+         for (Object entry : p_detectMinimumSpriteSize_1_.entrySet())
+         {
+             TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)((Entry) entry).getValue();
+             ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.getIconName());
+             ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation, 0);
+ 
+             if (!textureatlassprite.hasCustomLoader(p_detectMinimumSpriteSize_2_, resourcelocation))
+             {
+                 try
+                 {
+                     IResource iresource = p_detectMinimumSpriteSize_2_.getResource(resourcelocation1);
+ 
+                     if (iresource != null)
+                     {
+                         InputStream inputstream = iresource.getInputStream();
+ 
+                         if (inputstream != null)
+                         {
+                             Dimension dimension = TextureUtils.getImageSize(inputstream, "png");
+ 
+                             if (dimension != null)
+                             {
+                                 int i = dimension.width;
+                                 int j = MathHelper.roundUpToPowerOfTwo(i);
+ 
+                                 if (!map.containsKey(Integer.valueOf(j)))
+                                 {
+                                     map.put(Integer.valueOf(j), Integer.valueOf(1));
+                                 }
+                                 else
+                                 {
+                                     int k = ((Integer)map.get(Integer.valueOf(j))).intValue();
+                                     map.put(Integer.valueOf(j), Integer.valueOf(k + 1));
+                                 }
+                             }
+                         }
+                     }
+                 }
+                 catch (Exception var17)
+                 {
+                     ;
+                 }
+             }
+         }
+ 
+         int l = 0;
+         Set set = map.keySet();
+         Set set1 = new TreeSet(set);
+         int l1;
+ 
+         for (Iterator iterator = set1.iterator(); iterator.hasNext(); l += l1)
+         {
+             int j1 = ((Integer)iterator.next()).intValue();
+             l1 = ((Integer)map.get(Integer.valueOf(j1))).intValue();
+         }
+ 
+         int i1 = 16;
+         int k1 = 0;
+         l1 = l * p_detectMinimumSpriteSize_3_ / 100;
+         Iterator iterator1 = set1.iterator();
+ 
+         while (iterator1.hasNext())
+         {
+             int i2 = ((Integer)iterator1.next()).intValue();
+             int j2 = ((Integer)map.get(Integer.valueOf(i2))).intValue();
+             k1 += j2;
+ 
+             if (i2 > i1)
+             {
+                 i1 = i2;
+             }
+ 
+             if (k1 > l1)
+             {
+                 return i1;
+             }
+         }
+ 
+         return i1;
+     }
+ 
+     private int getMinSpriteSize()
+     {
+         int i = 1 << this.mipmapLevels;
+ 
+         if (i < 8)
+         {
+             i = 8;
+         }
+ 
+         return i;
+     }
+ 
+     private int[] getMissingImageData(int p_getMissingImageData_1_)
+     {
+         BufferedImage bufferedimage = new BufferedImage(16, 16, 2);
+         bufferedimage.setRGB(0, 0, 16, 16, TextureUtil.missingTextureData, 0, 16);
+         BufferedImage bufferedimage1 = TextureUtils.scaleToPowerOfTwo(bufferedimage, p_getMissingImageData_1_);
+         int[] aint = new int[p_getMissingImageData_1_ * p_getMissingImageData_1_];
+         bufferedimage1.getRGB(0, 0, p_getMissingImageData_1_, p_getMissingImageData_1_, aint, 0, p_getMissingImageData_1_);
+         return aint;
+     }
+ 
+     public boolean isTextureBound()
+     {
+         int i = GlStateManager.getBoundTexture();
+         int j = this.getGlTextureId();
+         return i == j;
+     }
+ 
+     private void updateIconGrid(int p_updateIconGrid_1_, int p_updateIconGrid_2_)
+     {
+         this.iconGridCountX = -1;
+         this.iconGridCountY = -1;
+         this.iconGrid = null;
+ 
+         if (this.iconGridSize > 0)
+         {
+             this.iconGridCountX = p_updateIconGrid_1_ / this.iconGridSize;
+             this.iconGridCountY = p_updateIconGrid_2_ / this.iconGridSize;
+             this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
+             this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
+             this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;
+ 
+             for (Object textureatlassprite0 : this.mapUploadedSprites.values())
+             {
+                 TextureAtlasSprite textureatlassprite = (TextureAtlasSprite) textureatlassprite0;
+                 double d0 = 0.5D / (double)p_updateIconGrid_1_;
+                 double d1 = 0.5D / (double)p_updateIconGrid_2_;
+                 double d2 = (double)Math.min(textureatlassprite.getMinU(), textureatlassprite.getMaxU()) + d0;
+                 double d3 = (double)Math.min(textureatlassprite.getMinV(), textureatlassprite.getMaxV()) + d1;
+                 double d4 = (double)Math.max(textureatlassprite.getMinU(), textureatlassprite.getMaxU()) - d0;
+                 double d5 = (double)Math.max(textureatlassprite.getMinV(), textureatlassprite.getMaxV()) - d1;
+                 int i = (int)(d2 / this.iconGridSizeU);
+                 int j = (int)(d3 / this.iconGridSizeV);
+                 int k = (int)(d4 / this.iconGridSizeU);
+                 int l = (int)(d5 / this.iconGridSizeV);
+ 
+                 for (int i1 = i; i1 <= k; ++i1)
+                 {
+                     if (i1 >= 0 && i1 < this.iconGridCountX)
+                     {
+                         for (int j1 = j; j1 <= l; ++j1)
+                         {
+                             if (j1 >= 0 && j1 < this.iconGridCountX)
+                             {
+                                 int k1 = j1 * this.iconGridCountX + i1;
+                                 this.iconGrid[k1] = textureatlassprite;
+                             }
+                             else
+                             {
+                                 Config.warn("Invalid grid V: " + j1 + ", icon: " + textureatlassprite.getIconName());
+                             }
+                         }
+                     }
+                     else
+                     {
+                         Config.warn("Invalid grid U: " + i1 + ", icon: " + textureatlassprite.getIconName());
+                     }
+                 }
+             }
+         }
+     }
+ 
+     public TextureAtlasSprite getIconByUV(double p_getIconByUV_1_, double p_getIconByUV_3_)
+     {
+         if (this.iconGrid == null)
+         {
+             return null;
+         }
+         else
+         {
+             int i = (int)(p_getIconByUV_1_ / this.iconGridSizeU);
+             int j = (int)(p_getIconByUV_3_ / this.iconGridSizeV);
+             int k = j * this.iconGridCountX + i;
+             return k >= 0 && k <= this.iconGrid.length ? this.iconGrid[k] : null;
+         }
+     }
  }
diff -rc ./client/renderer/texture/TextureUtil.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureUtil.java
*** ./client/renderer/texture/TextureUtil.java	2021-04-03 11:27:28.653412000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/texture/TextureUtil.java	2019-05-30 22:29:19.690394000 -0700
***************
*** 1,6 ****
--- 1,7 ----
  package net.minecraft.client.renderer.texture;
  
  import java.awt.image.BufferedImage;
+ import java.io.File;
  import java.io.IOException;
  import java.io.InputStream;
  import java.nio.IntBuffer;
***************
*** 10,18 ****
--- 11,24 ----
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.Mipmaps;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.lwjgl.BufferUtils;
  import org.lwjgl.opengl.GL11;
  import org.lwjgl.opengl.GL14;
  import org.lwjgl.opengl.GL12;
***************
*** 24,29 ****
--- 30,36 ----
      public static final DynamicTexture missingTexture = new DynamicTexture(16, 16);
      public static final int[] missingTextureData = missingTexture.getTextureData();
      private static final int[] mipmapBuffer;
+     private static final String __OBFID = "CL_00001067";
  
      public static int glGenTextures()
      {
***************
*** 97,148 ****
  
      private static int blendColors(int p_147943_0_, int p_147943_1_, int p_147943_2_, int p_147943_3_, boolean p_147943_4_)
      {
!         if (!p_147943_4_)
!         {
!             int i1 = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 24);
!             int j1 = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 16);
!             int k1 = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 8);
!             int l1 = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 0);
!             return i1 << 24 | j1 << 16 | k1 << 8 | l1;
!         }
!         else
!         {
!             mipmapBuffer[0] = p_147943_0_;
!             mipmapBuffer[1] = p_147943_1_;
!             mipmapBuffer[2] = p_147943_2_;
!             mipmapBuffer[3] = p_147943_3_;
!             float f = 0.0F;
!             float f1 = 0.0F;
!             float f2 = 0.0F;
!             float f3 = 0.0F;
! 
!             for (int i = 0; i < 4; ++i)
!             {
!                 if (mipmapBuffer[i] >> 24 != 0)
!                 {
!                     f += (float)Math.pow((double)((float)(mipmapBuffer[i] >> 24 & 255) / 255.0F), 2.2D);
!                     f1 += (float)Math.pow((double)((float)(mipmapBuffer[i] >> 16 & 255) / 255.0F), 2.2D);
!                     f2 += (float)Math.pow((double)((float)(mipmapBuffer[i] >> 8 & 255) / 255.0F), 2.2D);
!                     f3 += (float)Math.pow((double)((float)(mipmapBuffer[i] >> 0 & 255) / 255.0F), 2.2D);
!                 }
!             }
! 
!             f = f / 4.0F;
!             f1 = f1 / 4.0F;
!             f2 = f2 / 4.0F;
!             f3 = f3 / 4.0F;
!             int i2 = (int)(Math.pow((double)f, 0.45454545454545453D) * 255.0D);
!             int j = (int)(Math.pow((double)f1, 0.45454545454545453D) * 255.0D);
!             int k = (int)(Math.pow((double)f2, 0.45454545454545453D) * 255.0D);
!             int l = (int)(Math.pow((double)f3, 0.45454545454545453D) * 255.0D);
! 
!             if (i2 < 96)
!             {
!                 i2 = 0;
!             }
! 
!             return i2 << 24 | j << 16 | k << 8 | l;
!         }
      }
  
      private static int blendColorComponent(int p_147944_0_, int p_147944_1_, int p_147944_2_, int p_147944_3_, int p_147944_4_)
--- 104,110 ----
  
      private static int blendColors(int p_147943_0_, int p_147943_1_, int p_147943_2_, int p_147943_3_, boolean p_147943_4_)
      {
!         return Mipmaps.alphaBlend(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_);
      }
  
      private static int blendColorComponent(int p_147944_0_, int p_147944_1_, int p_147944_2_, int p_147944_3_, int p_147944_4_)
***************
*** 169,183 ****
          int i = 4194304 / p_147947_2_;
          setTextureBlurMipmap(p_147947_6_, p_147947_8_);
          setTextureClamped(p_147947_7_);
!         int l;
  
!         for (int j = 0; j < p_147947_2_ * p_147947_3_; j += p_147947_2_ * l)
          {
!             int k = j / p_147947_2_;
!             l = Math.min(i, p_147947_3_ - k);
!             int i1 = p_147947_2_ * l;
!             copyToBufferPos(p_147947_1_, j, i1);
!             GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, p_147947_0_, p_147947_4_, p_147947_5_ + k, p_147947_2_, l, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)dataBuffer);
          }
      }
  
--- 131,145 ----
          int i = 4194304 / p_147947_2_;
          setTextureBlurMipmap(p_147947_6_, p_147947_8_);
          setTextureClamped(p_147947_7_);
!         int j;
  
!         for (int k = 0; k < p_147947_2_ * p_147947_3_; k += p_147947_2_ * j)
          {
!             int l = k / p_147947_2_;
!             j = Math.min(i, p_147947_3_ - l);
!             int i1 = p_147947_2_ * j;
!             copyToBufferPos(p_147947_1_, k, i1);
!             GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, p_147947_0_, p_147947_4_, p_147947_5_ + l, p_147947_2_, j, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)dataBuffer);
          }
      }
  
***************
*** 194,201 ****
  
      public static void allocateTextureImpl(int p_180600_0_, int p_180600_1_, int p_180600_2_, int p_180600_3_)
      {
!         deleteTexture(p_180600_0_);
!         bindTexture(p_180600_0_);
  
          if (p_180600_1_ >= 0)
          {
--- 156,173 ----
  
      public static void allocateTextureImpl(int p_180600_0_, int p_180600_1_, int p_180600_2_, int p_180600_3_)
      {
!         Object object = TextureUtil.class;
! 
!         if (Reflector.SplashScreen.exists())
!         {
!             object = Reflector.SplashScreen.getTargetClass();
!         }
! 
!         synchronized (object)
!         {
!             deleteTexture(p_180600_0_);
!             bindTexture(p_180600_0_);
!         }
  
          if (p_180600_1_ >= 0)
          {
***************
*** 238,249 ****
          }
      }
  
!     private static void setTextureClamped(boolean p_110997_0_)
      {
          if (p_110997_0_)
          {
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
          }
          else
          {
--- 210,221 ----
          }
      }
  
!     public static void setTextureClamped(boolean p_110997_0_)
      {
          if (p_110997_0_)
          {
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);
          }
          else
          {
***************
*** 257,263 ****
          setTextureBlurMipmap(p_147951_0_, false);
      }
  
!     private static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
      {
          if (p_147954_0_)
          {
--- 229,235 ----
          setTextureBlurMipmap(p_147951_0_, false);
      }
  
!     public static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
      {
          if (p_147954_0_)
          {
***************
*** 266,272 ****
          }
          else
          {
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, p_147954_1_ ? GL11.GL_NEAREST_MIPMAP_LINEAR : GL11.GL_NEAREST);
              GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
          }
      }
--- 238,245 ----
          }
          else
          {
!             int i = Config.getMipmapType();
!             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, p_147954_1_ ? i : GL11.GL_NEAREST);
              GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
          }
      }
***************
*** 298,324 ****
      public static int[] readImageData(IResourceManager resourceManager, ResourceLocation imageLocation) throws IOException
      {
          BufferedImage bufferedimage = readBufferedImage(resourceManager.getResource(imageLocation).getInputStream());
!         int i = bufferedimage.getWidth();
!         int j = bufferedimage.getHeight();
!         int[] aint = new int[i * j];
!         bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
!         return aint;
      }
  
      public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException
      {
!         BufferedImage bufferedimage;
! 
!         try
          {
!             bufferedimage = ImageIO.read(imageStream);
          }
!         finally
          {
!             IOUtils.closeQuietly(imageStream);
!         }
  
!         return bufferedimage;
      }
  
      public static int[] updateAnaglyph(int[] p_110985_0_)
--- 271,312 ----
      public static int[] readImageData(IResourceManager resourceManager, ResourceLocation imageLocation) throws IOException
      {
          BufferedImage bufferedimage = readBufferedImage(resourceManager.getResource(imageLocation).getInputStream());
! 
!         if (bufferedimage == null)
!         {
!             return null;
!         }
!         else
!         {
!             int i = bufferedimage.getWidth();
!             int j = bufferedimage.getHeight();
!             int[] aint = new int[i * j];
!             bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
!             return aint;
!         }
      }
  
      public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException
      {
!         if (imageStream == null)
          {
!             return null;
          }
!         else
          {
!             BufferedImage bufferedimage;
  
!             try
!             {
!                 bufferedimage = ImageIO.read(imageStream);
!             }
!             finally
!             {
!                 IOUtils.closeQuietly(imageStream);
!             }
! 
!             return bufferedimage;
!         }
      }
  
      public static int[] updateAnaglyph(int[] p_110985_0_)
***************
*** 345,350 ****
--- 333,369 ----
          return i << 24 | i1 << 16 | j1 << 8 | k1;
      }
  
+     public static void saveGlTexture(String p_saveGlTexture_0_, int p_saveGlTexture_1_, int p_saveGlTexture_2_, int p_saveGlTexture_3_, int p_saveGlTexture_4_)
+     {
+         bindTexture(p_saveGlTexture_1_);
+         GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);
+         GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
+ 
+         for (int i = 0; i <= p_saveGlTexture_2_; ++i)
+         {
+             File file1 = new File(p_saveGlTexture_0_ + "_" + i + ".png");
+             int j = p_saveGlTexture_3_ >> i;
+             int k = p_saveGlTexture_4_ >> i;
+             int l = j * k;
+             IntBuffer intbuffer = BufferUtils.createIntBuffer(l);
+             int[] aint = new int[l];
+             GL11.glGetTexImage(GL11.GL_TEXTURE_2D, i, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)intbuffer);
+             intbuffer.get(aint);
+             BufferedImage bufferedimage = new BufferedImage(j, k, 2);
+             bufferedimage.setRGB(0, 0, j, k, aint, 0, j);
+ 
+             try
+             {
+                 ImageIO.write(bufferedimage, "png", (File)file1);
+                 logger.debug("Exported png to: {}", new Object[] {file1.getAbsolutePath()});
+             }
+             catch (Exception exception)
+             {
+                 logger.debug((String)"Unable to write: ", (Throwable)exception);
+             }
+         }
+     }
+ 
      public static void processPixelValues(int[] p_147953_0_, int p_147953_1_, int p_147953_2_)
      {
          int[] aint = new int[p_147953_1_];
diff -rc ./client/renderer/ThreadDownloadImageData.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ThreadDownloadImageData.java
*** ./client/renderer/ThreadDownloadImageData.java	2021-04-03 11:27:27.488420000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ThreadDownloadImageData.java	2019-05-30 22:29:17.846438000 -0700
***************
*** 1,10 ****
--- 1,13 ----
  package net.minecraft.client.renderer;
  
  import java.awt.image.BufferedImage;
+ import java.io.ByteArrayInputStream;
  import java.io.File;
  import java.io.IOException;
  import java.net.HttpURLConnection;
+ import java.net.Proxy;
  import java.net.URL;
+ import java.net.Proxy.Type;
  import java.util.concurrent.atomic.AtomicInteger;
  import javax.imageio.ImageIO;
  import net.minecraft.client.Minecraft;
***************
*** 12,17 ****
--- 15,25 ----
  import net.minecraft.client.renderer.texture.TextureUtil;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.HttpPipeline;
+ import optifine.HttpRequest;
+ import optifine.HttpResponse;
+ 
  import org.apache.commons.io.FileUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
***************
*** 26,31 ****
--- 34,42 ----
      private BufferedImage bufferedImage;
      private Thread imageThread;
      private boolean textureUploaded;
+     private static final String __OBFID = "CL_00001049";
+     public Boolean imageFound = null;
+     public boolean pipeline = false;
  
      public ThreadDownloadImageData(File cacheFileIn, String imageUrlIn, ResourceLocation textureResourceLocation, IImageBuffer imageBufferIn)
      {
***************
*** 37,54 ****
  
      private void checkTextureUploaded()
      {
!         if (!this.textureUploaded)
          {
!             if (this.bufferedImage != null)
!             {
!                 if (this.textureLocation != null)
!                 {
!                     this.deleteGlTexture();
!                 }
  
!                 TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
!                 this.textureUploaded = true;
              }
          }
      }
  
--- 48,63 ----
  
      private void checkTextureUploaded()
      {
!         if (!this.textureUploaded && this.bufferedImage != null)
          {
!             this.textureUploaded = true;
  
!             if (this.textureLocation != null)
!             {
!                 this.deleteGlTexture();
              }
+ 
+             TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
          }
      }
  
***************
*** 66,71 ****
--- 75,82 ----
          {
              this.imageBuffer.skinAvailable();
          }
+ 
+         this.imageFound = Boolean.valueOf(this.bufferedImage != null);
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
***************
*** 89,94 ****
--- 100,107 ----
                      {
                          this.setBufferedImage(this.imageBuffer.parseUserSkin(this.bufferedImage));
                      }
+ 
+                     this.imageFound = Boolean.valueOf(this.bufferedImage != null);
                  }
                  catch (IOException ioexception)
                  {
***************
*** 107,126 ****
      {
          this.imageThread = new Thread("Texture Downloader #" + threadDownloadCounter.incrementAndGet())
          {
              public void run()
              {
                  HttpURLConnection httpurlconnection = null;
                  ThreadDownloadImageData.logger.debug("Downloading http texture from {} to {}", new Object[] {ThreadDownloadImageData.this.imageUrl, ThreadDownloadImageData.this.cacheFile});
  
!                 try
                  {
!                     httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
!                     httpurlconnection.setDoInput(true);
!                     httpurlconnection.setDoOutput(false);
!                     httpurlconnection.connect();
! 
!                     if (httpurlconnection.getResponseCode() / 100 == 2)
                      {
                          BufferedImage bufferedimage;
  
                          if (ThreadDownloadImageData.this.cacheFile != null)
--- 120,154 ----
      {
          this.imageThread = new Thread("Texture Downloader #" + threadDownloadCounter.incrementAndGet())
          {
+             private static final String __OBFID = "CL_00001050";
              public void run()
              {
                  HttpURLConnection httpurlconnection = null;
                  ThreadDownloadImageData.logger.debug("Downloading http texture from {} to {}", new Object[] {ThreadDownloadImageData.this.imageUrl, ThreadDownloadImageData.this.cacheFile});
  
!                 if (ThreadDownloadImageData.this.shouldPipeline())
                  {
!                     ThreadDownloadImageData.this.loadPipelined();
!                 }
!                 else
!                 {
!                     try
                      {
+                         httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
+                         httpurlconnection.setDoInput(true);
+                         httpurlconnection.setDoOutput(false);
+                         httpurlconnection.connect();
+ 
+                         if (httpurlconnection.getResponseCode() / 100 != 2)
+                         {
+                             if (httpurlconnection.getErrorStream() != null)
+                             {
+                                 Config.readAll(httpurlconnection.getErrorStream());
+                             }
+ 
+                             return;
+                         }
+ 
                          BufferedImage bufferedimage;
  
                          if (ThreadDownloadImageData.this.cacheFile != null)
***************
*** 139,157 ****
                          }
  
                          ThreadDownloadImageData.this.setBufferedImage(bufferedimage);
                          return;
                      }
!                 }
!                 catch (Exception exception)
!                 {
!                     ThreadDownloadImageData.logger.error((String)"Couldn\'t download http texture", (Throwable)exception);
!                     return;
!                 }
!                 finally
!                 {
!                     if (httpurlconnection != null)
                      {
!                         httpurlconnection.disconnect();
                      }
                  }
              }
--- 167,186 ----
                          }
  
                          ThreadDownloadImageData.this.setBufferedImage(bufferedimage);
+                     }
+                     catch (Exception exception)
+                     {
+                         ThreadDownloadImageData.logger.error("Couldn\'t download http texture: " + exception.getClass().getName() + ": " + exception.getMessage());
                          return;
                      }
!                     finally
                      {
!                         if (httpurlconnection != null)
!                         {
!                             httpurlconnection.disconnect();
!                         }
! 
!                         ThreadDownloadImageData.this.imageFound = Boolean.valueOf(ThreadDownloadImageData.this.bufferedImage != null);
                      }
                  }
              }
***************
*** 159,162 ****
--- 188,248 ----
          this.imageThread.setDaemon(true);
          this.imageThread.start();
      }
+ 
+     private boolean shouldPipeline()
+     {
+         if (!this.pipeline)
+         {
+             return false;
+         }
+         else
+         {
+             Proxy proxy = Minecraft.getMinecraft().getProxy();
+             return proxy.type() != Type.DIRECT && proxy.type() != Type.SOCKS ? false : this.imageUrl.startsWith("http://");
+         }
+     }
+ 
+     private void loadPipelined()
+     {
+         try
+         {
+             HttpRequest httprequest = HttpPipeline.makeRequest(this.imageUrl, Minecraft.getMinecraft().getProxy());
+             HttpResponse httpresponse = HttpPipeline.executeRequest(httprequest);
+ 
+             if (httpresponse.getStatus() / 100 != 2)
+             {
+                 return;
+             }
+ 
+             byte[] abyte = httpresponse.getBody();
+             ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(abyte);
+             BufferedImage bufferedimage;
+ 
+             if (this.cacheFile != null)
+             {
+                 FileUtils.copyInputStreamToFile(bytearrayinputstream, this.cacheFile);
+                 bufferedimage = ImageIO.read(this.cacheFile);
+             }
+             else
+             {
+                 bufferedimage = TextureUtil.readBufferedImage(bytearrayinputstream);
+             }
+ 
+             if (this.imageBuffer != null)
+             {
+                 bufferedimage = this.imageBuffer.parseUserSkin(bufferedimage);
+             }
+ 
+             this.setBufferedImage(bufferedimage);
+         }
+         catch (Exception exception)
+         {
+             logger.error("Couldn\'t download http texture: " + exception.getClass().getName() + ": " + exception.getMessage());
+             return;
+         }
+         finally
+         {
+             this.imageFound = Boolean.valueOf(this.bufferedImage != null);
+         }
+     }
  }
diff -rc ./client/renderer/tileentity/RenderItemFrame.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/tileentity/RenderItemFrame.java
*** ./client/renderer/tileentity/RenderItemFrame.java	2021-04-03 11:27:28.672327000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/tileentity/RenderItemFrame.java	2019-05-30 22:29:19.731792000 -0700
***************
*** 18,42 ****
  import net.minecraft.client.resources.model.IBakedModel;
  import net.minecraft.client.resources.model.ModelManager;
  import net.minecraft.client.resources.model.ModelResourceLocation;
  import net.minecraft.entity.item.EntityItem;
  import net.minecraft.entity.item.EntityItemFrame;
  import net.minecraft.init.Items;
  import net.minecraft.item.Item;
  import net.minecraft.item.ItemSkull;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.storage.MapData;
  import org.lwjgl.opengl.GL11;
  
! public class RenderItemFrame extends Render<EntityItemFrame>
  {
      private static final ResourceLocation mapBackgroundTextures = new ResourceLocation("textures/map/map_background.png");
      private final Minecraft mc = Minecraft.getMinecraft();
      private final ModelResourceLocation itemFrameModel = new ModelResourceLocation("item_frame", "normal");
      private final ModelResourceLocation mapModel = new ModelResourceLocation("item_frame", "map");
      private RenderItem itemRenderer;
  
      public RenderItemFrame(RenderManager renderManagerIn, RenderItem itemRendererIn)
      {
--- 18,49 ----
  import net.minecraft.client.resources.model.IBakedModel;
  import net.minecraft.client.resources.model.ModelManager;
  import net.minecraft.client.resources.model.ModelResourceLocation;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.item.EntityItem;
  import net.minecraft.entity.item.EntityItemFrame;
  import net.minecraft.init.Items;
  import net.minecraft.item.Item;
+ import net.minecraft.item.ItemMap;
  import net.minecraft.item.ItemSkull;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.MathHelper;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.world.storage.MapData;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.ShadersTex;
  
! public class RenderItemFrame extends Render
  {
      private static final ResourceLocation mapBackgroundTextures = new ResourceLocation("textures/map/map_background.png");
      private final Minecraft mc = Minecraft.getMinecraft();
      private final ModelResourceLocation itemFrameModel = new ModelResourceLocation("item_frame", "normal");
      private final ModelResourceLocation mapModel = new ModelResourceLocation("item_frame", "map");
      private RenderItem itemRenderer;
+     private static final String __OBFID = "CL_00001002";
  
      public RenderItemFrame(RenderManager renderManagerIn, RenderItem itemRendererIn)
      {
***************
*** 105,177 ****
              GlStateManager.disableLighting();
              int i = itemFrame.getRotation();
  
!             if (item == Items.filled_map)
              {
                  i = i % 4 * 2;
              }
  
              GlStateManager.rotate((float)i * 360.0F / 8.0F, 0.0F, 0.0F, 1.0F);
  
!             if (item == Items.filled_map)
!             {
!                 this.renderManager.renderEngine.bindTexture(mapBackgroundTextures);
!                 GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
!                 float f = 0.0078125F;
!                 GlStateManager.scale(f, f, f);
!                 GlStateManager.translate(-64.0F, -64.0F, 0.0F);
!                 MapData mapdata = Items.filled_map.getMapData(entityitem.getEntityItem(), itemFrame.worldObj);
!                 GlStateManager.translate(0.0F, 0.0F, -1.0F);
! 
!                 if (mapdata != null)
!                 {
!                     this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
!                 }
!             }
!             else
              {
!                 TextureAtlasSprite textureatlassprite = null;
! 
!                 if (item == Items.compass)
                  {
!                     textureatlassprite = this.mc.getTextureMapBlocks().getAtlasSprite(TextureCompass.field_176608_l);
!                     this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
  
!                     if (textureatlassprite instanceof TextureCompass)
                      {
!                         TextureCompass texturecompass = (TextureCompass)textureatlassprite;
!                         double d0 = texturecompass.currentAngle;
!                         double d1 = texturecompass.angleDelta;
!                         texturecompass.currentAngle = 0.0D;
!                         texturecompass.angleDelta = 0.0D;
!                         texturecompass.updateCompass(itemFrame.worldObj, itemFrame.posX, itemFrame.posZ, (double)MathHelper.wrapAngleTo180_float((float)(180 + itemFrame.facingDirection.getHorizontalIndex() * 90)), false, true);
!                         texturecompass.currentAngle = d0;
!                         texturecompass.angleDelta = d1;
                      }
!                     else
                      {
!                         textureatlassprite = null;
                      }
-                 }
  
!                 GlStateManager.scale(0.5F, 0.5F, 0.5F);
  
!                 if (!this.itemRenderer.shouldRenderItemIn3D(entityitem.getEntityItem()) || item instanceof ItemSkull)
!                 {
!                     GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
!                 }
  
!                 GlStateManager.pushAttrib();
!                 RenderHelper.enableStandardItemLighting();
!                 this.itemRenderer.func_181564_a(entityitem.getEntityItem(), ItemCameraTransforms.TransformType.FIXED);
!                 RenderHelper.disableStandardItemLighting();
!                 GlStateManager.popAttrib();
  
!                 if (textureatlassprite != null && textureatlassprite.getFrameCount() > 0)
!                 {
!                     textureatlassprite.updateAnimation();
                  }
              }
- 
              GlStateManager.enableLighting();
              GlStateManager.popMatrix();
          }
--- 112,194 ----
              GlStateManager.disableLighting();
              int i = itemFrame.getRotation();
  
!             if (item instanceof ItemMap)
              {
                  i = i % 4 * 2;
              }
  
              GlStateManager.rotate((float)i * 360.0F / 8.0F, 0.0F, 0.0F, 1.0F);
  
!             if (!Reflector.postForgeBusEvent(Reflector.RenderItemInFrameEvent_Constructor, new Object[] {itemFrame, this}))
              {
!                 if (item instanceof ItemMap)
                  {
!                     this.renderManager.renderEngine.bindTexture(mapBackgroundTextures);
!                     GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
!                     float f = 0.0078125F;
!                     GlStateManager.scale(f, f, f);
!                     GlStateManager.translate(-64.0F, -64.0F, 0.0F);
!                     MapData mapdata = Items.filled_map.getMapData(entityitem.getEntityItem(), itemFrame.worldObj);
!                     GlStateManager.translate(0.0F, 0.0F, -1.0F);
  
!                     if (mapdata != null)
                      {
!                         this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
                      }
!                 }
!                 else
!                 {
!                     TextureAtlasSprite textureatlassprite = null;
! 
!                     if (item == Items.compass)
                      {
!                         textureatlassprite = this.mc.getTextureMapBlocks().getAtlasSprite(TextureCompass.field_176608_l);
! 
!                         if (Config.isShaders())
!                         {
!                             ShadersTex.bindTextureMapForUpdateAndRender(this.mc.getTextureManager(), TextureMap.locationBlocksTexture);
!                         }
!                         else
!                         {
!                             this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
!                         }
! 
!                         if (textureatlassprite instanceof TextureCompass)
!                         {
!                             TextureCompass texturecompass = (TextureCompass)textureatlassprite;
!                             double d0 = texturecompass.currentAngle;
!                             double d1 = texturecompass.angleDelta;
!                             texturecompass.currentAngle = 0.0D;
!                             texturecompass.angleDelta = 0.0D;
!                             texturecompass.updateCompass(itemFrame.worldObj, itemFrame.posX, itemFrame.posZ, (double)MathHelper.wrapAngleTo180_float((float)(180 + itemFrame.facingDirection.getHorizontalIndex() * 90)), false, true);
!                             texturecompass.currentAngle = d0;
!                             texturecompass.angleDelta = d1;
!                         }
!                         else
!                         {
!                             textureatlassprite = null;
!                         }
                      }
  
!                     GlStateManager.scale(0.5F, 0.5F, 0.5F);
  
!                     if (!this.itemRenderer.shouldRenderItemIn3D(entityitem.getEntityItem()) || item instanceof ItemSkull)
!                     {
!                         GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
!                     }
  
!                     GlStateManager.pushAttrib();
!                     RenderHelper.enableStandardItemLighting();
!                     this.itemRenderer.func_181564_a(entityitem.getEntityItem(), ItemCameraTransforms.TransformType.FIXED);
!                     RenderHelper.disableStandardItemLighting();
!                     GlStateManager.popAttrib();
  
!                     if (textureatlassprite != null && textureatlassprite.getFrameCount() > 0)
!                     {
!                         textureatlassprite.updateAnimation();
!                     }
                  }
              }
              GlStateManager.enableLighting();
              GlStateManager.popMatrix();
          }
***************
*** 229,232 ****
--- 246,273 ----
              }
          }
      }
+ 
+     /**
+      * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+      */
+     protected ResourceLocation getEntityTexture(Entity entity)
+     {
+         return this.getEntityTexture((EntityItemFrame)entity);
+     }
+ 
+     protected void renderName(Entity entity, double x, double y, double z)
+     {
+         this.renderName((EntityItemFrame)entity, x, y, z);
+     }
+ 
+     /**
+      * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+      * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+      * (Render<T extends Entity>) and this method has signature public void doRender(T entity, double d, double d1,
+      * double d2, float f, float f1). But JAD is pre 1.5 so doe
+      */
+     public void doRender(Entity entity, double x, double y, double z, float entityYaw, float partialTicks)
+     {
+         this.doRender((EntityItemFrame)entity, x, y, z, entityYaw, partialTicks);
+     }
  }
diff -rc ./client/renderer/tileentity/TileEntitySignRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
*** ./client/renderer/tileentity/TileEntitySignRenderer.java	2021-04-03 11:27:28.769450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/tileentity/TileEntitySignRenderer.java	2019-05-30 22:29:19.949666000 -0700
***************
*** 7,23 ****
  import net.minecraft.client.model.ModelSign;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.init.Blocks;
  import net.minecraft.tileentity.TileEntitySign;
  import net.minecraft.util.IChatComponent;
  import net.minecraft.util.ResourceLocation;
  import org.lwjgl.opengl.GL11;
  
! public class TileEntitySignRenderer extends TileEntitySpecialRenderer<TileEntitySign>
  {
      private static final ResourceLocation SIGN_TEXTURE = new ResourceLocation("textures/entity/sign.png");
  
      /** The ModelSign instance for use in this renderer */
      private final ModelSign model = new ModelSign();
  
      public void renderTileEntityAt(TileEntitySign te, double x, double y, double z, float partialTicks, int destroyStage)
      {
--- 7,28 ----
  import net.minecraft.client.model.ModelSign;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.init.Blocks;
+ import net.minecraft.tileentity.TileEntity;
  import net.minecraft.tileentity.TileEntitySign;
  import net.minecraft.util.IChatComponent;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
+ 
  import org.lwjgl.opengl.GL11;
  
! public class TileEntitySignRenderer extends TileEntitySpecialRenderer
  {
      private static final ResourceLocation SIGN_TEXTURE = new ResourceLocation("textures/entity/sign.png");
  
      /** The ModelSign instance for use in this renderer */
      private final ModelSign model = new ModelSign();
+     private static final String __OBFID = "CL_00000970";
  
      public void renderTileEntityAt(TileEntitySign te, double x, double y, double z, float partialTicks, int destroyStage)
      {
***************
*** 28,59 ****
          if (block == Blocks.standing_sign)
          {
              GlStateManager.translate((float)x + 0.5F, (float)y + 0.75F * f, (float)z + 0.5F);
!             float f1 = (float)(te.getBlockMetadata() * 360) / 16.0F;
!             GlStateManager.rotate(-f1, 0.0F, 1.0F, 0.0F);
              this.model.signStick.showModel = true;
          }
          else
          {
              int k = te.getBlockMetadata();
!             float f2 = 0.0F;
  
              if (k == 2)
              {
!                 f2 = 180.0F;
              }
  
              if (k == 4)
              {
!                 f2 = 90.0F;
              }
  
              if (k == 5)
              {
!                 f2 = -90.0F;
              }
  
              GlStateManager.translate((float)x + 0.5F, (float)y + 0.75F * f, (float)z + 0.5F);
!             GlStateManager.rotate(-f2, 0.0F, 1.0F, 0.0F);
              GlStateManager.translate(0.0F, -0.3125F, -0.4375F);
              this.model.signStick.showModel = false;
          }
--- 33,64 ----
          if (block == Blocks.standing_sign)
          {
              GlStateManager.translate((float)x + 0.5F, (float)y + 0.75F * f, (float)z + 0.5F);
!             float f2 = (float)(te.getBlockMetadata() * 360) / 16.0F;
!             GlStateManager.rotate(-f2, 0.0F, 1.0F, 0.0F);
              this.model.signStick.showModel = true;
          }
          else
          {
              int k = te.getBlockMetadata();
!             float f1 = 0.0F;
  
              if (k == 2)
              {
!                 f1 = 180.0F;
              }
  
              if (k == 4)
              {
!                 f1 = 90.0F;
              }
  
              if (k == 5)
              {
!                 f1 = -90.0F;
              }
  
              GlStateManager.translate((float)x + 0.5F, (float)y + 0.75F * f, (float)z + 0.5F);
!             GlStateManager.rotate(-f1, 0.0F, 1.0F, 0.0F);
              GlStateManager.translate(0.0F, -0.3125F, -0.4375F);
              this.model.signStick.showModel = false;
          }
***************
*** 85,90 ****
--- 90,100 ----
          GlStateManager.depthMask(false);
          int i = 0;
  
+         if (Config.isCustomColors())
+         {
+             i = CustomColors.getSignTextColor(i);
+         }
+ 
          if (destroyStage < 0)
          {
              for (int j = 0; j < te.signText.length; ++j)
***************
*** 92,98 ****
                  if (te.signText[j] != null)
                  {
                      IChatComponent ichatcomponent = te.signText[j];
!                     List<IChatComponent> list = GuiUtilRenderComponents.func_178908_a(ichatcomponent, 90, fontrenderer, false, true);
                      String s = list != null && list.size() > 0 ? ((IChatComponent)list.get(0)).getFormattedText() : "";
  
                      if (j == te.lineBeingEdited)
--- 102,108 ----
                  if (te.signText[j] != null)
                  {
                      IChatComponent ichatcomponent = te.signText[j];
!                     List list = GuiUtilRenderComponents.func_178908_a(ichatcomponent, 90, fontrenderer, false, true);
                      String s = list != null && list.size() > 0 ? ((IChatComponent)list.get(0)).getFormattedText() : "";
  
                      if (j == te.lineBeingEdited)
***************
*** 119,122 ****
--- 129,137 ----
              GlStateManager.matrixMode(5888);
          }
      }
+ 
+     public void renderTileEntityAt(TileEntity te, double x, double y, double z, float partialTicks, int destroyStage)
+     {
+         this.renderTileEntityAt((TileEntitySign)te, x, y, z, partialTicks, destroyStage);
+     }
  }
diff -rc ./client/renderer/VboRenderList.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/VboRenderList.java
*** ./client/renderer/VboRenderList.java	2021-04-03 11:27:27.497408000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/VboRenderList.java	2019-05-30 22:29:17.867411000 -0700
***************
*** 3,12 ****
--- 3,17 ----
  import net.minecraft.client.renderer.chunk.RenderChunk;
  import net.minecraft.client.renderer.vertex.VertexBuffer;
  import net.minecraft.util.EnumWorldBlockLayer;
+ import optifine.Config;
+ 
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.ShadersRender;
  
  public class VboRenderList extends ChunkRenderContainer
  {
+     private static final String __OBFID = "CL_00002533";
+ 
      public void renderChunkLayer(EnumWorldBlockLayer layer)
      {
          if (this.initialized)
***************
*** 31,41 ****
  
      private void setupArrayPointers()
      {
!         GL11.glVertexPointer(3, GL11.GL_FLOAT, 28, 0L);
!         GL11.glColorPointer(4, GL11.GL_UNSIGNED_BYTE, 28, 12L);
!         GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 28, 16L);
!         OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
!         GL11.glTexCoordPointer(2, GL11.GL_SHORT, 28, 24L);
!         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
      }
  }
--- 36,53 ----
  
      private void setupArrayPointers()
      {
!         if (Config.isShaders())
!         {
!             ShadersRender.setupArrayPointersVbo();
!         }
!         else
!         {
!             GL11.glVertexPointer(3, GL11.GL_FLOAT, 28, 0L);
!             GL11.glColorPointer(4, GL11.GL_UNSIGNED_BYTE, 28, 12L);
!             GL11.glTexCoordPointer(2, GL11.GL_FLOAT, 28, 16L);
!             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
!             GL11.glTexCoordPointer(2, GL11.GL_SHORT, 28, 24L);
!             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!         }
      }
  }
diff -rc ./client/renderer/vertex/DefaultVertexFormats.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/vertex/DefaultVertexFormats.java
*** ./client/renderer/vertex/DefaultVertexFormats.java	2021-04-03 11:27:28.791450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/vertex/DefaultVertexFormats.java	2019-05-30 22:29:19.983646000 -0700
***************
*** 1,9 ****
  package net.minecraft.client.renderer.vertex;
  
  public class DefaultVertexFormats
  {
!     public static final VertexFormat BLOCK = new VertexFormat();
!     public static final VertexFormat ITEM = new VertexFormat();
      public static final VertexFormat OLDMODEL_POSITION_TEX_NORMAL = new VertexFormat();
      public static final VertexFormat PARTICLE_POSITION_TEX_COLOR_LMAP = new VertexFormat();
      public static final VertexFormat POSITION = new VertexFormat();
--- 1,15 ----
  package net.minecraft.client.renderer.vertex;
  
+ import optifine.Config;
+ import optifine.Reflector;
+ import shadersmod.client.SVertexFormat;
+ 
  public class DefaultVertexFormats
  {
!     public static VertexFormat BLOCK = new VertexFormat();
!     public static VertexFormat ITEM = new VertexFormat();
!     private static final VertexFormat BLOCK_VANILLA = BLOCK;
!     private static final VertexFormat ITEM_VANILLA = ITEM;
      public static final VertexFormat OLDMODEL_POSITION_TEX_NORMAL = new VertexFormat();
      public static final VertexFormat PARTICLE_POSITION_TEX_COLOR_LMAP = new VertexFormat();
      public static final VertexFormat POSITION = new VertexFormat();
***************
*** 20,25 ****
--- 26,58 ----
      public static final VertexFormatElement TEX_2S = new VertexFormatElement(1, VertexFormatElement.EnumType.SHORT, VertexFormatElement.EnumUsage.UV, 2);
      public static final VertexFormatElement NORMAL_3B = new VertexFormatElement(0, VertexFormatElement.EnumType.BYTE, VertexFormatElement.EnumUsage.NORMAL, 3);
      public static final VertexFormatElement PADDING_1B = new VertexFormatElement(0, VertexFormatElement.EnumType.BYTE, VertexFormatElement.EnumUsage.PADDING, 1);
+     private static final String __OBFID = "CL_00002403";
+ 
+     public static void updateVertexFormats()
+     {
+         if (Config.isShaders())
+         {
+             BLOCK = SVertexFormat.makeDefVertexFormatBlock();
+             ITEM = SVertexFormat.makeDefVertexFormatItem();
+         }
+         else
+         {
+             BLOCK = BLOCK_VANILLA;
+             ITEM = ITEM_VANILLA;
+         }
+ 
+         if (Reflector.Attributes_DEFAULT_BAKED_FORMAT.exists())
+         {
+             VertexFormat vertexformat = ITEM;
+             VertexFormat vertexformat1 = (VertexFormat)Reflector.getFieldValue(Reflector.Attributes_DEFAULT_BAKED_FORMAT);
+             vertexformat1.clear();
+ 
+             for (int i = 0; i < vertexformat.getElementCount(); ++i)
+             {
+                 vertexformat1.func_181721_a(vertexformat.getElement(i));
+             }
+         }
+     }
  
      static
      {
diff -rc ./client/renderer/ViewFrustum.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ViewFrustum.java
*** ./client/renderer/ViewFrustum.java	2021-04-03 11:27:27.509408000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/ViewFrustum.java	2019-05-30 22:29:17.884416000 -0700
***************
*** 14,19 ****
--- 14,20 ----
      protected int countChunksX;
      protected int countChunksZ;
      public RenderChunk[] renderChunks;
+     private static final String __OBFID = "CL_00002531";
  
      public ViewFrustum(World worldIn, int renderDistanceChunks, RenderGlobal p_i46246_3_, IRenderChunkFactory renderChunkFactory)
      {
***************
*** 77,87 ****
                  {
                      int i2 = l1 * 16;
                      RenderChunk renderchunk = this.renderChunks[(j1 * this.countChunksY + l1) * this.countChunksX + l];
!                     BlockPos blockpos = new BlockPos(i1, i2, k1);
  
!                     if (!blockpos.equals(renderchunk.getPosition()))
                      {
!                         renderchunk.setPosition(blockpos);
                      }
                  }
              }
--- 78,93 ----
                  {
                      int i2 = l1 * 16;
                      RenderChunk renderchunk = this.renderChunks[(j1 * this.countChunksY + l1) * this.countChunksX + l];
!                     BlockPos blockpos = renderchunk.getPosition();
  
!                     if (blockpos.getX() != i1 || blockpos.getY() != i2 || blockpos.getZ() != k1)
                      {
!                         BlockPos blockpos1 = new BlockPos(i1, i2, k1);
! 
!                         if (!blockpos1.equals(renderchunk.getPosition()))
!                         {
!                             renderchunk.setPosition(blockpos1);
!                         }
                      }
                  }
              }
***************
*** 145,155 ****
          }
      }
  
!     protected RenderChunk getRenderChunk(BlockPos pos)
      {
!         int i = MathHelper.bucketInt(pos.getX(), 16);
!         int j = MathHelper.bucketInt(pos.getY(), 16);
!         int k = MathHelper.bucketInt(pos.getZ(), 16);
  
          if (j >= 0 && j < this.countChunksY)
          {
--- 151,161 ----
          }
      }
  
!     public RenderChunk getRenderChunk(BlockPos pos)
      {
!         int i = pos.getX() >> 4;
!         int j = pos.getY() >> 4;
!         int k = pos.getZ() >> 4;
  
          if (j >= 0 && j < this.countChunksY)
          {
diff -rc ./client/renderer/WorldRenderer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/WorldRenderer.java
*** ./client/renderer/WorldRenderer.java	2021-04-03 11:27:27.517450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/WorldRenderer.java	2019-05-31 10:54:07.692101600 -0700
***************
*** 1,6 ****
  package net.minecraft.client.renderer;
  
- import com.google.common.primitives.Floats;
  import java.nio.ByteBuffer;
  import java.nio.ByteOrder;
  import java.nio.FloatBuffer;
--- 1,5 ----
***************
*** 9,48 ****
  import java.util.Arrays;
  import java.util.BitSet;
  import java.util.Comparator;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
  import net.minecraft.util.MathHelper;
! import org.apache.logging.log4j.LogManager;
  
  public class WorldRenderer
  {
      private ByteBuffer byteBuffer;
!     private IntBuffer rawIntBuffer;
      private ShortBuffer field_181676_c;
!     private FloatBuffer rawFloatBuffer;
!     private int vertexCount;
      private VertexFormatElement field_181677_f;
      private int field_181678_g;
  
      /** Boolean for whether this renderer needs to be updated or not */
      private boolean needsUpdate;
!     private int drawMode;
      private double xOffset;
      private double yOffset;
      private double zOffset;
      private VertexFormat vertexFormat;
      private boolean isDrawing;
  
      public WorldRenderer(int bufferSizeIn)
      {
          this.byteBuffer = GLAllocation.createDirectByteBuffer(bufferSizeIn * 4);
          this.rawIntBuffer = this.byteBuffer.asIntBuffer();
          this.field_181676_c = this.byteBuffer.asShortBuffer();
          this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
      }
  
      private void func_181670_b(int p_181670_1_)
      {
          if (p_181670_1_ > this.rawIntBuffer.remaining())
          {
              int i = this.byteBuffer.capacity();
--- 8,75 ----
  import java.util.Arrays;
  import java.util.BitSet;
  import java.util.Comparator;
+ 
+ import org.apache.logging.log4j.LogManager;
+ import org.lwjgl.opengl.GL11;
+ 
+ import com.google.common.primitives.Floats;
+ 
+ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
+ import net.minecraft.util.EnumWorldBlockLayer;
  import net.minecraft.util.MathHelper;
! import optifine.Config;
! import optifine.TextureUtils;
! import shadersmod.client.SVertexBuilder;
  
  public class WorldRenderer
  {
      private ByteBuffer byteBuffer;
!     public IntBuffer rawIntBuffer;
      private ShortBuffer field_181676_c;
!     public FloatBuffer rawFloatBuffer;
!     public int vertexCount;
      private VertexFormatElement field_181677_f;
      private int field_181678_g;
  
      /** Boolean for whether this renderer needs to be updated or not */
      private boolean needsUpdate;
!     public int drawMode;
      private double xOffset;
      private double yOffset;
      private double zOffset;
      private VertexFormat vertexFormat;
      private boolean isDrawing;
+     private static final String __OBFID = "CL_00000942";
+     private EnumWorldBlockLayer blockLayer = null;
+     private boolean[] drawnIcons = new boolean[256];
+     private TextureAtlasSprite[] quadSprites = null;
+     private TextureAtlasSprite[] quadSpritesPrev = null;
+     private TextureAtlasSprite quadSprite = null;
+     public SVertexBuilder sVertexBuilder;
  
      public WorldRenderer(int bufferSizeIn)
      {
+         if (Config.isShaders())
+         {
+             bufferSizeIn *= 2;
+         }
+ 
          this.byteBuffer = GLAllocation.createDirectByteBuffer(bufferSizeIn * 4);
          this.rawIntBuffer = this.byteBuffer.asIntBuffer();
          this.field_181676_c = this.byteBuffer.asShortBuffer();
          this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
+         SVertexBuilder.initVertexBuilder(this);
      }
  
      private void func_181670_b(int p_181670_1_)
      {
+         if (Config.isShaders())
+         {
+             p_181670_1_ *= 2;
+         }
+ 
          if (p_181670_1_ > this.rawIntBuffer.remaining())
          {
              int i = this.byteBuffer.capacity();
***************
*** 55,72 ****
              bytebuffer.put(this.byteBuffer);
              bytebuffer.rewind();
              this.byteBuffer = bytebuffer;
!             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer().asReadOnlyBuffer();
              this.rawIntBuffer = this.byteBuffer.asIntBuffer();
              this.rawIntBuffer.position(l);
              this.field_181676_c = this.byteBuffer.asShortBuffer();
              this.field_181676_c.position(l << 1);
          }
      }
  
      public void func_181674_a(float p_181674_1_, float p_181674_2_, float p_181674_3_)
      {
          int i = this.vertexCount / 4;
!         final float[] afloat = new float[i];
  
          for (int j = 0; j < i; ++j)
          {
--- 82,108 ----
              bytebuffer.put(this.byteBuffer);
              bytebuffer.rewind();
              this.byteBuffer = bytebuffer;
!             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
              this.rawIntBuffer = this.byteBuffer.asIntBuffer();
              this.rawIntBuffer.position(l);
              this.field_181676_c = this.byteBuffer.asShortBuffer();
              this.field_181676_c.position(l << 1);
+ 
+             if (this.quadSprites != null)
+             {
+                 TextureAtlasSprite[] atextureatlassprite = this.quadSprites;
+                 int i1 = this.getBufferQuadSize();
+                 this.quadSprites = new TextureAtlasSprite[i1];
+                 System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, Math.min(atextureatlassprite.length, this.quadSprites.length));
+                 this.quadSpritesPrev = null;
+             }
          }
      }
  
      public void func_181674_a(float p_181674_1_, float p_181674_2_, float p_181674_3_)
      {
          int i = this.vertexCount / 4;
!         float[] afloat = new float[i];
  
          for (int j = 0; j < i; ++j)
          {
***************
*** 80,92 ****
              ainteger[k] = Integer.valueOf(k);
          }
  
!         Arrays.sort(ainteger, new Comparator<Integer>()
!         {
!             public int compare(Integer p_compare_1_, Integer p_compare_2_)
!             {
!                 return Floats.compare(afloat[p_compare_2_.intValue()], afloat[p_compare_1_.intValue()]);
!             }
!         });
          BitSet bitset = new BitSet();
          int l = this.vertexFormat.getNextOffset();
          int[] aint = new int[l];
--- 116,122 ----
              ainteger[k] = Integer.valueOf(k);
          }
  
!         Arrays.sort(ainteger, new WorldRendererComparator(this, afloat));
          BitSet bitset = new BitSet();
          int l = this.vertexFormat.getNextOffset();
          int[] aint = new int[l];
***************
*** 121,126 ****
--- 151,173 ----
  
              bitset.set(l1);
          }
+ 
+         this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
+         this.rawIntBuffer.position(this.func_181664_j());
+ 
+         if (this.quadSprites != null)
+         {
+             TextureAtlasSprite[] atextureatlassprite = new TextureAtlasSprite[this.vertexCount / 4];
+             int i2 = this.vertexFormat.func_181719_f() / 4 * 4;
+ 
+             for (int j2 = 0; j2 < ainteger.length; ++j2)
+             {
+                 int k2 = ainteger[j2].intValue();
+                 atextureatlassprite[j2] = this.quadSprites[k2];
+             }
+ 
+             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
+         }
      }
  
      public WorldRenderer.State func_181672_a()
***************
*** 132,141 ****
          this.rawIntBuffer.get(aint);
          this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
          this.rawIntBuffer.position(i);
!         return new WorldRenderer.State(aint, new VertexFormat(this.vertexFormat));
      }
  
!     private int func_181664_j()
      {
          return this.vertexCount * this.vertexFormat.func_181719_f();
      }
--- 179,197 ----
          this.rawIntBuffer.get(aint);
          this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
          this.rawIntBuffer.position(i);
!         TextureAtlasSprite[] atextureatlassprite = null;
! 
!         if (this.quadSprites != null)
!         {
!             int j = this.vertexCount / 4;
!             atextureatlassprite = new TextureAtlasSprite[j];
!             System.arraycopy(this.quadSprites, 0, atextureatlassprite, 0, j);
!         }
! 
!         return new WorldRenderer.State(aint, new VertexFormat(this.vertexFormat), atextureatlassprite);
      }
  
!     public int func_181664_j()
      {
          return this.vertexCount * this.vertexFormat.func_181719_f();
      }
***************
*** 167,172 ****
--- 223,253 ----
          this.rawIntBuffer.put(state.getRawBuffer());
          this.vertexCount = state.getVertexCount();
          this.vertexFormat = new VertexFormat(state.getVertexFormat());
+ 
+         if (state.stateQuadSprites != null)
+         {
+             if (this.quadSprites == null)
+             {
+                 this.quadSprites = this.quadSpritesPrev;
+             }
+ 
+             if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
+             {
+                 this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
+             }
+ 
+             TextureAtlasSprite[] atextureatlassprite = state.stateQuadSprites;
+             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
+         }
+         else
+         {
+             if (this.quadSprites != null)
+             {
+                 this.quadSpritesPrev = this.quadSprites;
+             }
+ 
+             this.quadSprites = null;
+         }
      }
  
      public void reset()
***************
*** 174,179 ****
--- 255,261 ----
          this.vertexCount = 0;
          this.field_181677_f = null;
          this.field_181678_g = 0;
+         this.quadSprite = null;
      }
  
      public void begin(int p_181668_1_, VertexFormat p_181668_2_)
***************
*** 191,224 ****
              this.field_181677_f = p_181668_2_.getElement(this.field_181678_g);
              this.needsUpdate = false;
              this.byteBuffer.limit(this.byteBuffer.capacity());
          }
      }
  
      public WorldRenderer tex(double p_181673_1_, double p_181673_3_)
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (this.field_181677_f.getType())
          {
!             case FLOAT:
                  this.byteBuffer.putFloat(i, (float)p_181673_1_);
                  this.byteBuffer.putFloat(i + 4, (float)p_181673_3_);
                  break;
  
!             case UINT:
!             case INT:
                  this.byteBuffer.putInt(i, (int)p_181673_1_);
                  this.byteBuffer.putInt(i + 4, (int)p_181673_3_);
                  break;
  
!             case USHORT:
!             case SHORT:
                  this.byteBuffer.putShort(i, (short)((int)p_181673_3_));
                  this.byteBuffer.putShort(i + 2, (short)((int)p_181673_1_));
                  break;
  
!             case UBYTE:
!             case BYTE:
                  this.byteBuffer.put(i, (byte)((int)p_181673_3_));
                  this.byteBuffer.put(i + 1, (byte)((int)p_181673_1_));
          }
--- 273,343 ----
              this.field_181677_f = p_181668_2_.getElement(this.field_181678_g);
              this.needsUpdate = false;
              this.byteBuffer.limit(this.byteBuffer.capacity());
+ 
+             if (Config.isShaders())
+             {
+                 SVertexBuilder.endSetVertexFormat(this);
+             }
+ 
+             if (Config.isMultiTexture())
+             {
+                 if (this.blockLayer != null)
+                 {
+                     if (this.quadSprites == null)
+                     {
+                         this.quadSprites = this.quadSpritesPrev;
+                     }
+ 
+                     if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
+                     {
+                         this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
+                     }
+                 }
+             }
+             else
+             {
+                 if (this.quadSprites != null)
+                 {
+                     this.quadSpritesPrev = this.quadSprites;
+                 }
+ 
+                 this.quadSprites = null;
+             }
          }
      }
  
      public WorldRenderer tex(double p_181673_1_, double p_181673_3_)
      {
+         if (this.quadSprite != null && this.quadSprites != null)
+         {
+             p_181673_1_ = (double)this.quadSprite.toSingleU((float)p_181673_1_);
+             p_181673_3_ = (double)this.quadSprite.toSingleV((float)p_181673_3_);
+             this.quadSprites[this.vertexCount / 4] = this.quadSprite;
+         }
+ 
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (WorldRenderer.WorldRenderer$2.field_181661_a[this.field_181677_f.getType().ordinal()])
          {
!             case 1:
                  this.byteBuffer.putFloat(i, (float)p_181673_1_);
                  this.byteBuffer.putFloat(i + 4, (float)p_181673_3_);
                  break;
  
!             case 2:
!             case 3:
                  this.byteBuffer.putInt(i, (int)p_181673_1_);
                  this.byteBuffer.putInt(i + 4, (int)p_181673_3_);
                  break;
  
!             case 4:
!             case 5:
                  this.byteBuffer.putShort(i, (short)((int)p_181673_3_));
                  this.byteBuffer.putShort(i + 2, (short)((int)p_181673_1_));
                  break;
  
!             case 6:
!             case 7:
                  this.byteBuffer.put(i, (byte)((int)p_181673_3_));
                  this.byteBuffer.put(i + 1, (byte)((int)p_181673_1_));
          }
***************
*** 231,257 ****
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (this.field_181677_f.getType())
          {
!             case FLOAT:
                  this.byteBuffer.putFloat(i, (float)p_181671_1_);
                  this.byteBuffer.putFloat(i + 4, (float)p_181671_2_);
                  break;
  
!             case UINT:
!             case INT:
                  this.byteBuffer.putInt(i, p_181671_1_);
                  this.byteBuffer.putInt(i + 4, p_181671_2_);
                  break;
  
!             case USHORT:
!             case SHORT:
                  this.byteBuffer.putShort(i, (short)p_181671_2_);
                  this.byteBuffer.putShort(i + 2, (short)p_181671_1_);
                  break;
  
!             case UBYTE:
!             case BYTE:
                  this.byteBuffer.put(i, (byte)p_181671_2_);
                  this.byteBuffer.put(i + 1, (byte)p_181671_1_);
          }
--- 350,376 ----
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (WorldRenderer.WorldRenderer$2.field_181661_a[this.field_181677_f.getType().ordinal()])
          {
!             case 1:
                  this.byteBuffer.putFloat(i, (float)p_181671_1_);
                  this.byteBuffer.putFloat(i + 4, (float)p_181671_2_);
                  break;
  
!             case 2:
!             case 3:
                  this.byteBuffer.putInt(i, p_181671_1_);
                  this.byteBuffer.putInt(i + 4, p_181671_2_);
                  break;
  
!             case 4:
!             case 5:
                  this.byteBuffer.putShort(i, (short)p_181671_2_);
                  this.byteBuffer.putShort(i + 2, (short)p_181671_1_);
                  break;
  
!             case 6:
!             case 7:
                  this.byteBuffer.put(i, (byte)p_181671_2_);
                  this.byteBuffer.put(i + 1, (byte)p_181671_1_);
          }
***************
*** 289,295 ****
      /**
       * Takes in the pass the call list is being requested for. Args: renderPass
       */
!     private int getColorIndex(int p_78909_1_)
      {
          return ((this.vertexCount - p_78909_1_) * this.vertexFormat.getNextOffset() + this.vertexFormat.getColorOffset()) / 4;
      }
--- 408,414 ----
      /**
       * Takes in the pass the call list is being requested for. Args: renderPass
       */
!     public int getColorIndex(int p_78909_1_)
      {
          return ((this.vertexCount - p_78909_1_) * this.vertexFormat.getNextOffset() + this.vertexFormat.getColorOffset()) / 4;
      }
***************
*** 343,349 ****
          this.putColorRGBA(i, j, k, l, 255);
      }
  
!     private void putColorRGBA(int index, int red, int p_178972_3_, int p_178972_4_, int p_178972_5_)
      {
          if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
          {
--- 462,468 ----
          this.putColorRGBA(i, j, k, l, 255);
      }
  
!     public void putColorRGBA(int index, int red, int p_178972_3_, int p_178972_4_, int p_178972_5_)
      {
          if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
          {
***************
*** 378,410 ****
          {
              int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!             switch (this.field_181677_f.getType())
              {
!                 case FLOAT:
                      this.byteBuffer.putFloat(i, (float)p_181669_1_ / 255.0F);
                      this.byteBuffer.putFloat(i + 4, (float)p_181669_2_ / 255.0F);
                      this.byteBuffer.putFloat(i + 8, (float)p_181669_3_ / 255.0F);
                      this.byteBuffer.putFloat(i + 12, (float)p_181669_4_ / 255.0F);
                      break;
  
!                 case UINT:
!                 case INT:
                      this.byteBuffer.putFloat(i, (float)p_181669_1_);
                      this.byteBuffer.putFloat(i + 4, (float)p_181669_2_);
                      this.byteBuffer.putFloat(i + 8, (float)p_181669_3_);
                      this.byteBuffer.putFloat(i + 12, (float)p_181669_4_);
                      break;
  
!                 case USHORT:
!                 case SHORT:
                      this.byteBuffer.putShort(i, (short)p_181669_1_);
                      this.byteBuffer.putShort(i + 2, (short)p_181669_2_);
                      this.byteBuffer.putShort(i + 4, (short)p_181669_3_);
                      this.byteBuffer.putShort(i + 6, (short)p_181669_4_);
                      break;
  
!                 case UBYTE:
!                 case BYTE:
                      if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
                      {
                          this.byteBuffer.put(i, (byte)p_181669_1_);
--- 497,529 ----
          {
              int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!             switch (WorldRenderer.WorldRenderer$2.field_181661_a[this.field_181677_f.getType().ordinal()])
              {
!                 case 1:
                      this.byteBuffer.putFloat(i, (float)p_181669_1_ / 255.0F);
                      this.byteBuffer.putFloat(i + 4, (float)p_181669_2_ / 255.0F);
                      this.byteBuffer.putFloat(i + 8, (float)p_181669_3_ / 255.0F);
                      this.byteBuffer.putFloat(i + 12, (float)p_181669_4_ / 255.0F);
                      break;
  
!                 case 2:
!                 case 3:
                      this.byteBuffer.putFloat(i, (float)p_181669_1_);
                      this.byteBuffer.putFloat(i + 4, (float)p_181669_2_);
                      this.byteBuffer.putFloat(i + 8, (float)p_181669_3_);
                      this.byteBuffer.putFloat(i + 12, (float)p_181669_4_);
                      break;
  
!                 case 4:
!                 case 5:
                      this.byteBuffer.putShort(i, (short)p_181669_1_);
                      this.byteBuffer.putShort(i + 2, (short)p_181669_2_);
                      this.byteBuffer.putShort(i + 4, (short)p_181669_3_);
                      this.byteBuffer.putShort(i + 6, (short)p_181669_4_);
                      break;
  
!                 case 6:
!                 case 7:
                      if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
                      {
                          this.byteBuffer.put(i, (byte)p_181669_1_);
***************
*** 428,473 ****
  
      public void addVertexData(int[] vertexData)
      {
          this.func_181670_b(vertexData.length);
          this.rawIntBuffer.position(this.func_181664_j());
          this.rawIntBuffer.put(vertexData);
          this.vertexCount += vertexData.length / this.vertexFormat.func_181719_f();
      }
  
      public void endVertex()
      {
          ++this.vertexCount;
          this.func_181670_b(this.vertexFormat.func_181719_f());
      }
  
      public WorldRenderer pos(double p_181662_1_, double p_181662_3_, double p_181662_5_)
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (this.field_181677_f.getType())
          {
!             case FLOAT:
                  this.byteBuffer.putFloat(i, (float)(p_181662_1_ + this.xOffset));
                  this.byteBuffer.putFloat(i + 4, (float)(p_181662_3_ + this.yOffset));
                  this.byteBuffer.putFloat(i + 8, (float)(p_181662_5_ + this.zOffset));
                  break;
  
!             case UINT:
!             case INT:
                  this.byteBuffer.putInt(i, Float.floatToRawIntBits((float)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.putInt(i + 4, Float.floatToRawIntBits((float)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.putInt(i + 8, Float.floatToRawIntBits((float)(p_181662_5_ + this.zOffset)));
                  break;
  
!             case USHORT:
!             case SHORT:
                  this.byteBuffer.putShort(i, (short)((int)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.putShort(i + 2, (short)((int)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.putShort(i + 4, (short)((int)(p_181662_5_ + this.zOffset)));
                  break;
  
!             case UBYTE:
!             case BYTE:
                  this.byteBuffer.put(i, (byte)((int)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.put(i + 1, (byte)((int)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.put(i + 2, (byte)((int)(p_181662_5_ + this.zOffset)));
--- 547,614 ----
  
      public void addVertexData(int[] vertexData)
      {
+         if (Config.isShaders())
+         {
+             SVertexBuilder.beginAddVertexData(this, vertexData);
+         }
+ 
          this.func_181670_b(vertexData.length);
          this.rawIntBuffer.position(this.func_181664_j());
          this.rawIntBuffer.put(vertexData);
          this.vertexCount += vertexData.length / this.vertexFormat.func_181719_f();
+ 
+         if (Config.isShaders())
+         {
+             SVertexBuilder.endAddVertexData(this);
+         }
      }
  
      public void endVertex()
      {
          ++this.vertexCount;
          this.func_181670_b(this.vertexFormat.func_181719_f());
+         this.field_181678_g = 0;
+         this.field_181677_f = this.vertexFormat.getElement(this.field_181678_g);
+ 
+         if (Config.isShaders())
+         {
+             SVertexBuilder.endAddVertex(this);
+         }
      }
  
      public WorldRenderer pos(double p_181662_1_, double p_181662_3_, double p_181662_5_)
      {
+         if (Config.isShaders())
+         {
+             SVertexBuilder.beginAddVertex(this);
+         }
+ 
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (WorldRenderer.WorldRenderer$2.field_181661_a[this.field_181677_f.getType().ordinal()])
          {
!             case 1:
                  this.byteBuffer.putFloat(i, (float)(p_181662_1_ + this.xOffset));
                  this.byteBuffer.putFloat(i + 4, (float)(p_181662_3_ + this.yOffset));
                  this.byteBuffer.putFloat(i + 8, (float)(p_181662_5_ + this.zOffset));
                  break;
  
!             case 2:
!             case 3:
                  this.byteBuffer.putInt(i, Float.floatToRawIntBits((float)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.putInt(i + 4, Float.floatToRawIntBits((float)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.putInt(i + 8, Float.floatToRawIntBits((float)(p_181662_5_ + this.zOffset)));
                  break;
  
!             case 4:
!             case 5:
                  this.byteBuffer.putShort(i, (short)((int)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.putShort(i + 2, (short)((int)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.putShort(i + 4, (short)((int)(p_181662_5_ + this.zOffset)));
                  break;
  
!             case 6:
!             case 7:
                  this.byteBuffer.put(i, (byte)((int)(p_181662_1_ + this.xOffset)));
                  this.byteBuffer.put(i + 1, (byte)((int)(p_181662_3_ + this.yOffset)));
                  this.byteBuffer.put(i + 2, (byte)((int)(p_181662_5_ + this.zOffset)));
***************
*** 507,539 ****
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (this.field_181677_f.getType())
          {
!             case FLOAT:
                  this.byteBuffer.putFloat(i, p_181663_1_);
                  this.byteBuffer.putFloat(i + 4, p_181663_2_);
                  this.byteBuffer.putFloat(i + 8, p_181663_3_);
                  break;
  
!             case UINT:
!             case INT:
                  this.byteBuffer.putInt(i, (int)p_181663_1_);
                  this.byteBuffer.putInt(i + 4, (int)p_181663_2_);
                  this.byteBuffer.putInt(i + 8, (int)p_181663_3_);
                  break;
  
!             case USHORT:
!             case SHORT:
!                 this.byteBuffer.putShort(i, (short)((int)p_181663_1_ * 32767 & 65535));
!                 this.byteBuffer.putShort(i + 2, (short)((int)p_181663_2_ * 32767 & 65535));
!                 this.byteBuffer.putShort(i + 4, (short)((int)p_181663_3_ * 32767 & 65535));
                  break;
  
!             case UBYTE:
!             case BYTE:
!                 this.byteBuffer.put(i, (byte)((int)p_181663_1_ * 127 & 255));
!                 this.byteBuffer.put(i + 1, (byte)((int)p_181663_2_ * 127 & 255));
!                 this.byteBuffer.put(i + 2, (byte)((int)p_181663_3_ * 127 & 255));
          }
  
          this.func_181667_k();
--- 648,680 ----
      {
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.func_181720_d(this.field_181678_g);
  
!         switch (WorldRenderer.WorldRenderer$2.field_181661_a[this.field_181677_f.getType().ordinal()])
          {
!             case 1:
                  this.byteBuffer.putFloat(i, p_181663_1_);
                  this.byteBuffer.putFloat(i + 4, p_181663_2_);
                  this.byteBuffer.putFloat(i + 8, p_181663_3_);
                  break;
  
!             case 2:
!             case 3:
                  this.byteBuffer.putInt(i, (int)p_181663_1_);
                  this.byteBuffer.putInt(i + 4, (int)p_181663_2_);
                  this.byteBuffer.putInt(i + 8, (int)p_181663_3_);
                  break;
  
!             case 4:
!             case 5:
!                 this.byteBuffer.putShort(i, (short)((int)(p_181663_1_ * 32767.0F) & 65535));
!                 this.byteBuffer.putShort(i + 2, (short)((int)(p_181663_2_ * 32767.0F) & 65535));
!                 this.byteBuffer.putShort(i + 4, (short)((int)(p_181663_3_ * 32767.0F) & 65535));
                  break;
  
!             case 6:
!             case 7:
!                 this.byteBuffer.put(i, (byte)((int)(p_181663_1_ * 127.0F) & 255));
!                 this.byteBuffer.put(i + 1, (byte)((int)(p_181663_2_ * 127.0F) & 255));
!                 this.byteBuffer.put(i + 2, (byte)((int)(p_181663_3_ * 127.0F) & 255));
          }
  
          this.func_181667_k();
***************
*** 597,606 ****
--- 738,1003 ----
          }
      }
  
+     public void putSprite(TextureAtlasSprite p_putSprite_1_)
+     {
+         if (this.quadSprites != null)
+         {
+             int i = this.vertexCount / 4;
+             this.quadSprites[i - 1] = p_putSprite_1_;
+         }
+     }
+ 
+     public void setSprite(TextureAtlasSprite p_setSprite_1_)
+     {
+         if (this.quadSprites != null)
+         {
+             this.quadSprite = p_setSprite_1_;
+         }
+     }
+ 
+     public boolean isMultiTexture()
+     {
+         return this.quadSprites != null;
+     }
+ 
+     public void drawMultiTexture()
+     {
+         if (this.quadSprites != null)
+         {
+             int i = Config.getMinecraft().getTextureMapBlocks().getCountRegisteredSprites();
+ 
+             if (this.drawnIcons.length <= i)
+             {
+                 this.drawnIcons = new boolean[i + 1];
+             }
+ 
+             Arrays.fill(this.drawnIcons, false);
+             int j = 0;
+             int k = -1;
+             int l = this.vertexCount / 4;
+ 
+             for (int i1 = 0; i1 < l; ++i1)
+             {
+                 TextureAtlasSprite textureatlassprite = this.quadSprites[i1];
+ 
+                 if (textureatlassprite != null)
+                 {
+                     int j1 = textureatlassprite.getIndexInMap();
+ 
+                     if (!this.drawnIcons[j1])
+                     {
+                         if (textureatlassprite == TextureUtils.iconGrassSideOverlay)
+                         {
+                             if (k < 0)
+                             {
+                                 k = i1;
+                             }
+                         }
+                         else
+                         {
+                             i1 = this.drawForIcon(textureatlassprite, i1) - 1;
+                             ++j;
+ 
+                             if (this.blockLayer != EnumWorldBlockLayer.TRANSLUCENT)
+                             {
+                                 this.drawnIcons[j1] = true;
+                             }
+                         }
+                     }
+                 }
+             }
+ 
+             if (k >= 0)
+             {
+                 this.drawForIcon(TextureUtils.iconGrassSideOverlay, k);
+                 ++j;
+             }
+ 
+             if (j > 0)
+             {
+                 ;
+             }
+         }
+     }
+ 
+     private int drawForIcon(TextureAtlasSprite p_drawForIcon_1_, int p_drawForIcon_2_)
+     {
+         GL11.glBindTexture(GL11.GL_TEXTURE_2D, p_drawForIcon_1_.glSpriteTextureId);
+         int i = -1;
+         int j = -1;
+         int k = this.vertexCount / 4;
+ 
+         for (int l = p_drawForIcon_2_; l < k; ++l)
+         {
+             TextureAtlasSprite textureatlassprite = this.quadSprites[l];
+ 
+             if (textureatlassprite == p_drawForIcon_1_)
+             {
+                 if (j < 0)
+                 {
+                     j = l;
+                 }
+             }
+             else if (j >= 0)
+             {
+                 this.draw(j, l);
+ 
+                 if (this.blockLayer == EnumWorldBlockLayer.TRANSLUCENT)
+                 {
+                     return l;
+                 }
+ 
+                 j = -1;
+ 
+                 if (i < 0)
+                 {
+                     i = l;
+                 }
+             }
+         }
+ 
+         if (j >= 0)
+         {
+             this.draw(j, k);
+         }
+ 
+         if (i < 0)
+         {
+             i = k;
+         }
+ 
+         return i;
+     }
+ 
+     private void draw(int p_draw_1_, int p_draw_2_)
+     {
+         int i = p_draw_2_ - p_draw_1_;
+ 
+         if (i > 0)
+         {
+             int j = p_draw_1_ * 4;
+             int k = i * 4;
+             GL11.glDrawArrays(this.drawMode, j, k);
+         }
+     }
+ 
+     public void setBlockLayer(EnumWorldBlockLayer p_setBlockLayer_1_)
+     {
+         this.blockLayer = p_setBlockLayer_1_;
+ 
+         if (p_setBlockLayer_1_ == null)
+         {
+             if (this.quadSprites != null)
+             {
+                 this.quadSpritesPrev = this.quadSprites;
+             }
+ 
+             this.quadSprites = null;
+             this.quadSprite = null;
+         }
+     }
+ 
+     private int getBufferQuadSize()
+     {
+         int i = this.rawIntBuffer.capacity() * 4 / (this.vertexFormat.func_181719_f() * 4);
+         return i;
+     }
+ 
+     public void checkAndGrow()
+     {
+         this.func_181670_b(this.vertexFormat.func_181719_f());
+     }
+ 
+     public boolean isColorDisabled()
+     {
+         return this.needsUpdate;
+     }
+ 
+     static final class WorldRenderer$2
+     {
+         static final int[] field_181661_a = new int[VertexFormatElement.EnumType.values().length];
+         private static final String __OBFID = "CL_00002569";
+ 
+         static
+         {
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.FLOAT.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var7)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.UINT.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var6)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.INT.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var5)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.USHORT.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.SHORT.ordinal()] = 5;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.UBYTE.ordinal()] = 6;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_181661_a[VertexFormatElement.EnumType.BYTE.ordinal()] = 7;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
+ 
      public class State
      {
          private final int[] stateRawBuffer;
          private final VertexFormat stateVertexFormat;
+         private static final String __OBFID = "CL_00002568";
+         private TextureAtlasSprite[] stateQuadSprites;
+ 
+         public State(int[] p_i2_2_, VertexFormat p_i2_3_, TextureAtlasSprite[] p_i2_4_)
+         {
+             this.stateRawBuffer = p_i2_2_;
+             this.stateVertexFormat = p_i2_3_;
+             this.stateQuadSprites = p_i2_4_;
+         }
  
          public State(int[] p_i46453_2_, VertexFormat p_i46453_3_)
          {
***************
*** 623,626 ****
--- 1020,1045 ----
              return this.stateVertexFormat;
          }
      }
+     
+     class WorldRendererComparator implements Comparator
+     {
+         final float[] field_181659_a;
+         final WorldRenderer field_181660_b;
+ 
+         WorldRendererComparator(WorldRenderer p_i46500_1_, float[] p_i46500_2_)
+         {
+             this.field_181660_b = p_i46500_1_;
+             this.field_181659_a = p_i46500_2_;
+         }
+ 
+         public int compare(Integer p_compare_1_, Integer p_compare_2_)
+         {
+             return Floats.compare(this.field_181659_a[p_compare_2_.intValue()], this.field_181659_a[p_compare_1_.intValue()]);
+         }
+ 
+         public int compare(Object p_compare_1_, Object p_compare_2_)
+         {
+             return this.compare((Integer)p_compare_1_, (Integer)p_compare_2_);
+         }
+     }
  }
diff -rc ./client/renderer/WorldVertexBufferUploader.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/WorldVertexBufferUploader.java
*** ./client/renderer/WorldVertexBufferUploader.java	2021-04-03 11:27:27.527307000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/renderer/WorldVertexBufferUploader.java	2019-05-30 22:29:17.913388000 -0700
***************
*** 4,14 ****
  import java.util.List;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
  import org.lwjgl.opengl.GL11;
  
  public class WorldVertexBufferUploader
  {
!     @SuppressWarnings("incomplete-switch")
      public void func_181679_a(WorldRenderer p_181679_1_)
      {
          if (p_181679_1_.getVertexCount() > 0)
--- 4,19 ----
  import java.util.List;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.lwjgl.opengl.GL11;
+ import shadersmod.client.SVertexBuilder;
  
  public class WorldVertexBufferUploader
  {
!     private static final String __OBFID = "CL_00002567";
! 
      public void func_181679_a(WorldRenderer p_181679_1_)
      {
          if (p_181679_1_.getVertexCount() > 0)
***************
*** 16,88 ****
              VertexFormat vertexformat = p_181679_1_.getVertexFormat();
              int i = vertexformat.getNextOffset();
              ByteBuffer bytebuffer = p_181679_1_.getByteBuffer();
!             List<VertexFormatElement> list = vertexformat.getElements();
  
              for (int j = 0; j < list.size(); ++j)
              {
                  VertexFormatElement vertexformatelement = (VertexFormatElement)list.get(j);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
-                 int k = vertexformatelement.getType().getGlConstant();
-                 int l = vertexformatelement.getIndex();
-                 bytebuffer.position(vertexformat.func_181720_d(j));
  
!                 switch (vertexformatelement$enumusage)
                  {
!                     case POSITION:
!                         GL11.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
!                         break;
! 
!                     case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
!                         GL11.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                         break;
! 
!                     case COLOR:
!                         GL11.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
!                         break;
! 
!                     case NORMAL:
!                         GL11.glNormalPointer(k, i, bytebuffer);
!                         GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
                  }
              }
  
!             GL11.glDrawArrays(p_181679_1_.getDrawMode(), 0, p_181679_1_.getVertexCount());
              int i1 = 0;
  
!             for (int j1 = list.size(); i1 < j1; ++i1)
              {
                  VertexFormatElement vertexformatelement1 = (VertexFormatElement)list.get(i1);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage1 = vertexformatelement1.getUsage();
-                 int k1 = vertexformatelement1.getIndex();
  
!                 switch (vertexformatelement$enumusage1)
                  {
!                     case POSITION:
!                         GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
!                         break;
! 
!                     case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
!                         GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                         break;
! 
!                     case COLOR:
!                         GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
!                         GlStateManager.resetColor();
!                         break;
  
!                     case NORMAL:
!                         GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
                  }
              }
          }
  
          p_181679_1_.reset();
      }
  }
--- 21,168 ----
              VertexFormat vertexformat = p_181679_1_.getVertexFormat();
              int i = vertexformat.getNextOffset();
              ByteBuffer bytebuffer = p_181679_1_.getByteBuffer();
!             List list = vertexformat.getElements();
!             boolean flag = Reflector.ForgeVertexFormatElementEnumUseage_preDraw.exists();
!             boolean flag1 = Reflector.ForgeVertexFormatElementEnumUseage_postDraw.exists();
  
              for (int j = 0; j < list.size(); ++j)
              {
                  VertexFormatElement vertexformatelement = (VertexFormatElement)list.get(j);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
  
!                 if (flag)
                  {
!                     Reflector.callVoid(vertexformatelement$enumusage, Reflector.ForgeVertexFormatElementEnumUseage_preDraw, new Object[] {vertexformat, Integer.valueOf(j), Integer.valueOf(i), bytebuffer});
!                 }
!                 else
!                 {
!                     int l = vertexformatelement.getType().getGlConstant();
!                     int k = vertexformatelement.getIndex();
!                     bytebuffer.position(vertexformat.func_181720_d(j));
! 
!                     switch (WorldVertexBufferUploader.WorldVertexBufferUploader$1.field_178958_a[vertexformatelement$enumusage.ordinal()])
!                     {
!                         case 1:
!                             GL11.glVertexPointer(vertexformatelement.getElementCount(), l, i, bytebuffer);
!                             GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
!                             break;
! 
!                         case 2:
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k);
!                             GL11.glTexCoordPointer(vertexformatelement.getElementCount(), l, i, bytebuffer);
!                             GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                             break;
! 
!                         case 3:
!                             GL11.glColorPointer(vertexformatelement.getElementCount(), l, i, bytebuffer);
!                             GL11.glEnableClientState(GL11.GL_COLOR_ARRAY);
!                             break;
! 
!                         case 4:
!                             GL11.glNormalPointer(l, i, bytebuffer);
!                             GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
!                     }
                  }
              }
  
!             if (p_181679_1_.isMultiTexture())
!             {
!                 p_181679_1_.drawMultiTexture();
!             }
!             else if (Config.isShaders())
!             {
!                 SVertexBuilder.drawArrays(p_181679_1_.getDrawMode(), 0, p_181679_1_.getVertexCount(), p_181679_1_);
!             }
!             else
!             {
!                 GL11.glDrawArrays(p_181679_1_.getDrawMode(), 0, p_181679_1_.getVertexCount());
!             }
! 
              int i1 = 0;
  
!             for (int k1 = list.size(); i1 < k1; ++i1)
              {
                  VertexFormatElement vertexformatelement1 = (VertexFormatElement)list.get(i1);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage1 = vertexformatelement1.getUsage();
  
!                 if (flag1)
!                 {
!                     Reflector.callVoid(vertexformatelement$enumusage1, Reflector.ForgeVertexFormatElementEnumUseage_postDraw, new Object[] {vertexformat, Integer.valueOf(i1), Integer.valueOf(i), bytebuffer});
!                 }
!                 else
                  {
!                     int j1 = vertexformatelement1.getIndex();
  
!                     switch (WorldVertexBufferUploader.WorldVertexBufferUploader$1.field_178958_a[vertexformatelement$enumusage1.ordinal()])
!                     {
!                         case 1:
!                             GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
!                             break;
! 
!                         case 2:
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + j1);
!                             GL11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                             break;
! 
!                         case 3:
!                             GL11.glDisableClientState(GL11.GL_COLOR_ARRAY);
!                             GlStateManager.resetColor();
!                             break;
! 
!                         case 4:
!                             GL11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
!                     }
                  }
              }
          }
  
          p_181679_1_.reset();
      }
+ 
+     static final class WorldVertexBufferUploader$1
+     {
+         static final int[] field_178958_a = new int[VertexFormatElement.EnumUsage.values().length];
+         private static final String __OBFID = "CL_00002566";
+ 
+         static
+         {
+             try
+             {
+                 field_178958_a[VertexFormatElement.EnumUsage.POSITION.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178958_a[VertexFormatElement.EnumUsage.UV.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178958_a[VertexFormatElement.EnumUsage.COLOR.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_178958_a[VertexFormatElement.EnumUsage.NORMAL.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
  }
diff -rc ./client/resources/AbstractResourcePack.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/AbstractResourcePack.java
*** ./client/resources/AbstractResourcePack.java	2021-04-03 11:27:28.820450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/AbstractResourcePack.java	2019-05-30 22:29:20.045611000 -0700
***************
*** 22,28 ****
  public abstract class AbstractResourcePack implements IResourcePack
  {
      private static final Logger resourceLog = LogManager.getLogger();
!     protected final File resourcePackFile;
  
      public AbstractResourcePack(File resourcePackFileIn)
      {
--- 22,29 ----
  public abstract class AbstractResourcePack implements IResourcePack
  {
      private static final Logger resourceLog = LogManager.getLogger();
!     public final File resourcePackFile;
!     private static final String __OBFID = "CL_00001072";
  
      public AbstractResourcePack(File resourcePackFileIn)
      {
***************
*** 55,69 ****
  
      protected void logNameNotLowercase(String p_110594_1_)
      {
!         resourceLog.warn("ResourcePack: ignored non-lowercase namespace: %s in %s", new Object[] {p_110594_1_, this.resourcePackFile});
      }
  
!     public <T extends IMetadataSection> T getPackMetadata(IMetadataSerializer p_135058_1_, String p_135058_2_) throws IOException
      {
          return readMetadata(p_135058_1_, this.getInputStreamByName("pack.mcmeta"), p_135058_2_);
      }
  
!     static <T extends IMetadataSection> T readMetadata(IMetadataSerializer p_110596_0_, InputStream p_110596_1_, String p_110596_2_)
      {
          JsonObject jsonobject = null;
          BufferedReader bufferedreader = null;
--- 56,70 ----
  
      protected void logNameNotLowercase(String p_110594_1_)
      {
!         resourceLog.warn("ResourcePack: ignored non-lowercase namespace: {} in {}", new Object[] {p_110594_1_, this.resourcePackFile});
      }
  
!     public IMetadataSection getPackMetadata(IMetadataSerializer p_135058_1_, String p_135058_2_) throws IOException
      {
          return readMetadata(p_135058_1_, this.getInputStreamByName("pack.mcmeta"), p_135058_2_);
      }
  
!     static IMetadataSection readMetadata(IMetadataSerializer p_110596_0_, InputStream p_110596_1_, String p_110596_2_)
      {
          JsonObject jsonobject = null;
          BufferedReader bufferedreader = null;
diff -rc ./client/resources/DefaultResourcePack.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/DefaultResourcePack.java
*** ./client/resources/DefaultResourcePack.java	2021-04-03 11:27:28.838450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/DefaultResourcePack.java	2019-05-30 22:29:20.077593000 -0700
***************
*** 13,25 ****
  import net.minecraft.client.resources.data.IMetadataSection;
  import net.minecraft.client.resources.data.IMetadataSerializer;
  import net.minecraft.util.ResourceLocation;
  
  public class DefaultResourcePack implements IResourcePack
  {
!     public static final Set<String> defaultResourceDomains = ImmutableSet.<String>of("minecraft", "realms");
!     private final Map<String, File> mapAssets;
  
!     public DefaultResourcePack(Map<String, File> mapAssetsIn)
      {
          this.mapAssets = mapAssetsIn;
      }
--- 13,27 ----
  import net.minecraft.client.resources.data.IMetadataSection;
  import net.minecraft.client.resources.data.IMetadataSerializer;
  import net.minecraft.util.ResourceLocation;
+ import optifine.ReflectorForge;
  
  public class DefaultResourcePack implements IResourcePack
  {
!     public static final Set defaultResourceDomains = ImmutableSet.of("minecraft", "realms");
!     private final Map mapAssets;
!     private static final String __OBFID = "CL_00001073";
  
!     public DefaultResourcePack(Map mapAssetsIn)
      {
          this.mapAssets = mapAssetsIn;
      }
***************
*** 55,61 ****
  
      private InputStream getResourceStream(ResourceLocation location)
      {
!         return DefaultResourcePack.class.getResourceAsStream("/assets/" + location.getResourceDomain() + "/" + location.getResourcePath());
      }
  
      public boolean resourceExists(ResourceLocation location)
--- 57,65 ----
  
      private InputStream getResourceStream(ResourceLocation location)
      {
!         String s = "/assets/" + location.getResourceDomain() + "/" + location.getResourcePath();
!         InputStream inputstream = ReflectorForge.getOptiFineResourceStream(s);
!         return inputstream != null ? inputstream : DefaultResourcePack.class.getResourceAsStream("/assets/" + location.getResourceDomain() + "/" + location.getResourcePath());
      }
  
      public boolean resourceExists(ResourceLocation location)
***************
*** 63,87 ****
          return this.getResourceStream(location) != null || this.mapAssets.containsKey(location.toString());
      }
  
!     public Set<String> getResourceDomains()
      {
          return defaultResourceDomains;
      }
  
!     public <T extends IMetadataSection> T getPackMetadata(IMetadataSerializer p_135058_1_, String p_135058_2_) throws IOException
      {
          try
          {
!             InputStream inputstream = new FileInputStream((File)this.mapAssets.get("pack.mcmeta"));
!             return AbstractResourcePack.readMetadata(p_135058_1_, inputstream, p_135058_2_);
          }
          catch (RuntimeException var4)
          {
!             return (T)null;
          }
          catch (FileNotFoundException var5)
          {
!             return (T)null;
          }
      }
  
--- 67,91 ----
          return this.getResourceStream(location) != null || this.mapAssets.containsKey(location.toString());
      }
  
!     public Set getResourceDomains()
      {
          return defaultResourceDomains;
      }
  
!     public IMetadataSection getPackMetadata(IMetadataSerializer p_135058_1_, String p_135058_2_) throws IOException
      {
          try
          {
!             FileInputStream fileinputstream = new FileInputStream((File)this.mapAssets.get("pack.mcmeta"));
!             return AbstractResourcePack.readMetadata(p_135058_1_, fileinputstream, p_135058_2_);
          }
          catch (RuntimeException var4)
          {
!             return null;
          }
          catch (FileNotFoundException var5)
          {
!             return null;
          }
      }
  
diff -rc ./client/resources/I18n.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/I18n.java
*** ./client/resources/I18n.java	2021-04-03 11:27:28.888452000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/I18n.java	2019-05-30 22:29:20.169541000 -0700
***************
*** 1,8 ****
--- 1,11 ----
  package net.minecraft.client.resources;
  
+ import java.util.Map;
+ 
  public class I18n
  {
      private static Locale i18nLocale;
+     private static final String __OBFID = "CL_00001094";
  
      static void setLocale(Locale i18nLocaleIn)
      {
***************
*** 16,19 ****
--- 19,27 ----
      {
          return i18nLocale.formatMessage(translateKey, parameters);
      }
+ 
+     public static Map getLocaleProperties()
+     {
+         return i18nLocale.properties;
+     }
  }
diff -rc ./client/resources/Locale.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/Locale.java
*** ./client/resources/Locale.java	2021-04-03 11:27:28.954450000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/Locale.java	2019-05-30 22:29:20.251496000 -0700
***************
*** 24,29 ****
--- 24,30 ----
      /**
       * par2 is a list of languages. For each language $L and domain $D, attempts to load the resource $D:lang/$L.lang
       */
+ 
      public synchronized void loadLocaleDataFiles(IResourceManager resourceManager, List<String> p_135022_2_)
      {
          this.properties.clear();
diff -rc ./client/resources/model/ModelRotation.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/model/ModelRotation.java
*** ./client/resources/model/ModelRotation.java	2021-04-03 11:27:29.224451000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/resources/model/ModelRotation.java	2019-05-30 22:29:20.978654000 -0700
***************
*** 1,54 ****
  package net.minecraft.client.resources.model;
  
  import com.google.common.collect.Maps;
  import java.util.Map;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.MathHelper;
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  
! public enum ModelRotation
  {
!     X0_Y0(0, 0),
!     X0_Y90(0, 90),
!     X0_Y180(0, 180),
!     X0_Y270(0, 270),
!     X90_Y0(90, 0),
!     X90_Y90(90, 90),
!     X90_Y180(90, 180),
!     X90_Y270(90, 270),
!     X180_Y0(180, 0),
!     X180_Y90(180, 90),
!     X180_Y180(180, 180),
!     X180_Y270(180, 270),
!     X270_Y0(270, 0),
!     X270_Y90(270, 90),
!     X270_Y180(270, 180),
!     X270_Y270(270, 270);
  
!     private static final Map<Integer, ModelRotation> mapRotations = Maps.<Integer, ModelRotation>newHashMap();
      private final int combinedXY;
      private final Matrix4f matrix4d;
      private final int quartersX;
      private final int quartersY;
  
      private static int combineXY(int p_177521_0_, int p_177521_1_)
      {
          return p_177521_0_ * 360 + p_177521_1_;
      }
  
!     private ModelRotation(int p_i46087_3_, int p_i46087_4_)
      {
!         this.combinedXY = combineXY(p_i46087_3_, p_i46087_4_);
          this.matrix4d = new Matrix4f();
          Matrix4f matrix4f = new Matrix4f();
          matrix4f.setIdentity();
!         Matrix4f.rotate((float)(-p_i46087_3_) * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
!         this.quartersX = MathHelper.abs_int(p_i46087_3_ / 90);
          Matrix4f matrix4f1 = new Matrix4f();
          matrix4f1.setIdentity();
!         Matrix4f.rotate((float)(-p_i46087_4_) * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f1, matrix4f1);
!         this.quartersY = MathHelper.abs_int(p_i46087_4_ / 90);
          Matrix4f.mul(matrix4f1, matrix4f, this.matrix4d);
      }
  
--- 1,64 ----
  package net.minecraft.client.resources.model;
  
+ import com.google.common.base.Optional;
  import com.google.common.collect.Maps;
  import java.util.Map;
+ 
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.MathHelper;
+ import net.minecraftforge.client.model.IModelPart;
+ import net.minecraftforge.client.model.IModelState;
+ import net.minecraftforge.client.model.ITransformation;
+ import net.minecraftforge.client.model.TRSRTransformation;
+ import optifine.Reflector;
+ 
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  
! public enum ModelRotation implements IModelState, ITransformation
  {
!     X0_Y0("X0_Y0", 0, 0, 0),
!     X0_Y90("X0_Y90", 1, 0, 90),
!     X0_Y180("X0_Y180", 2, 0, 180),
!     X0_Y270("X0_Y270", 3, 0, 270),
!     X90_Y0("X90_Y0", 4, 90, 0),
!     X90_Y90("X90_Y90", 5, 90, 90),
!     X90_Y180("X90_Y180", 6, 90, 180),
!     X90_Y270("X90_Y270", 7, 90, 270),
!     X180_Y0("X180_Y0", 8, 180, 0),
!     X180_Y90("X180_Y90", 9, 180, 90),
!     X180_Y180("X180_Y180", 10, 180, 180),
!     X180_Y270("X180_Y270", 11, 180, 270),
!     X270_Y0("X270_Y0", 12, 270, 0),
!     X270_Y90("X270_Y90", 13, 270, 90),
!     X270_Y180("X270_Y180", 14, 270, 180),
!     X270_Y270("X270_Y270", 15, 270, 270);
  
!     private static final Map mapRotations = Maps.newHashMap();
      private final int combinedXY;
      private final Matrix4f matrix4d;
      private final int quartersX;
      private final int quartersY;
+     private static final ModelRotation[] $VALUES = new ModelRotation[]{X0_Y0, X0_Y90, X0_Y180, X0_Y270, X90_Y0, X90_Y90, X90_Y180, X90_Y270, X180_Y0, X180_Y90, X180_Y180, X180_Y270, X270_Y0, X270_Y90, X270_Y180, X270_Y270};
+     private static final String __OBFID = "CL_00002393";
  
      private static int combineXY(int p_177521_0_, int p_177521_1_)
      {
          return p_177521_0_ * 360 + p_177521_1_;
      }
  
!     private ModelRotation(String p_i13_3_, int p_i13_4_, int p_i13_5_, int p_i13_6_)
      {
!         this.combinedXY = combineXY(p_i13_5_, p_i13_6_);
          this.matrix4d = new Matrix4f();
          Matrix4f matrix4f = new Matrix4f();
          matrix4f.setIdentity();
!         Matrix4f.rotate((float)(-p_i13_5_) * 0.017453292F, new Vector3f(1.0F, 0.0F, 0.0F), matrix4f, matrix4f);
!         this.quartersX = MathHelper.abs_int(p_i13_5_ / 90);
          Matrix4f matrix4f1 = new Matrix4f();
          matrix4f1.setIdentity();
!         Matrix4f.rotate((float)(-p_i13_6_) * 0.017453292F, new Vector3f(0.0F, 1.0F, 0.0F), matrix4f1, matrix4f1);
!         this.quartersY = MathHelper.abs_int(p_i13_6_ / 90);
          Matrix4f.mul(matrix4f1, matrix4f, this.matrix4d);
      }
  
***************
*** 106,111 ****
--- 116,141 ----
          return (ModelRotation)mapRotations.get(Integer.valueOf(combineXY(MathHelper.normalizeAngle(p_177524_0_, 360), MathHelper.normalizeAngle(p_177524_1_, 360))));
      }
  
+     public Optional<TRSRTransformation> apply(Optional <? extends IModelPart > p_apply_1_)
+     {
+         return (Optional)Reflector.call(Reflector.ForgeHooksClient_applyTransform, new Object[] {this.getMatrix(), p_apply_1_});
+     }
+ 
+     public javax.vecmath.Matrix4f getMatrix()
+     {
+         return Reflector.ForgeHooksClient_getMatrix.exists() ? (javax.vecmath.Matrix4f)Reflector.call(Reflector.ForgeHooksClient_getMatrix, new Object[] {this}): new javax.vecmath.Matrix4f();
+     }
+ 
+     public EnumFacing rotate(EnumFacing p_rotate_1_)
+     {
+         return this.rotateFace(p_rotate_1_);
+     }
+ 
+     public int rotate(EnumFacing p_rotate_1_, int p_rotate_2_)
+     {
+         return this.rotateVertex(p_rotate_1_, p_rotate_2_);
+     }
+ 
      static {
          for (ModelRotation modelrotation : values())
          {
diff -rc ./client/settings/GameSettings.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/settings/GameSettings.java
*** ./client/settings/GameSettings.java	2021-04-03 11:27:29.252449000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/client/settings/GameSettings.java	2021-03-25 23:00:14.760884800 -0700
***************
*** 12,17 ****
--- 12,18 ----
  import java.io.PrintWriter;
  import java.lang.reflect.ParameterizedType;
  import java.lang.reflect.Type;
+ import java.util.Arrays;
  import java.util.List;
  import java.util.Map;
  import java.util.Set;
***************
*** 26,37 ****
--- 27,49 ----
  import net.minecraft.network.play.client.C15PacketClientSettings;
  import net.minecraft.util.MathHelper;
  import net.minecraft.world.EnumDifficulty;
+ import optifine.ClearWater;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomSky;
+ import optifine.DynamicLights;
+ import optifine.Lang;
+ import optifine.NaturalTextures;
+ import optifine.RandomMobs;
+ import optifine.Reflector;
+ 
  import org.apache.commons.lang3.ArrayUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  import org.lwjgl.input.Keyboard;
  import org.lwjgl.input.Mouse;
  import org.lwjgl.opengl.Display;
+ import shadersmod.client.Shaders;
  
  public class GameSettings
  {
***************
*** 39,44 ****
--- 51,57 ----
      private static final Gson gson = new Gson();
      private static final ParameterizedType typeListString = new ParameterizedType()
      {
+         private static final String __OBFID = "CL_00000651";
          public Type[] getActualTypeArguments()
          {
              return new Type[] {String.class};
***************
*** 76,83 ****
  
      /** Smooth Lighting */
      public int ambientOcclusion = 2;
!     public List<String> resourcePacks = Lists.<String>newArrayList();
!     public List<String> field_183018_l = Lists.<String>newArrayList();
      public EntityPlayer.EnumChatVisibility chatVisibility = EntityPlayer.EnumChatVisibility.FULL;
      public boolean chatColours = true;
      public boolean chatLinks = true;
--- 89,96 ----
  
      /** Smooth Lighting */
      public int ambientOcclusion = 2;
!     public List resourcePacks = Lists.newArrayList();
!     public List field_183018_l = Lists.newArrayList();
      public EntityPlayer.EnumChatVisibility chatVisibility = EntityPlayer.EnumChatVisibility.FULL;
      public boolean chatColours = true;
      public boolean chatLinks = true;
***************
*** 98,104 ****
  
      /** Whether to pause when the game loses focus, toggled by F3+P */
      public boolean pauseOnLostFocus = true;
!     private final Set<EnumPlayerModelParts> setModelParts = Sets.newHashSet(EnumPlayerModelParts.values());
      public boolean touchscreen;
      public int overrideWidth;
      public int overrideHeight;
--- 111,117 ----
  
      /** Whether to pause when the game loses focus, toggled by F3+P */
      public boolean pauseOnLostFocus = true;
!     private final Set setModelParts = Sets.newHashSet(EnumPlayerModelParts.values());
      public boolean touchscreen;
      public int overrideWidth;
      public int overrideHeight;
***************
*** 109,115 ****
      public float chatHeightFocused = 1.0F;
      public boolean showInventoryAchievementHint = true;
      public int mipmapLevels = 4;
!     private Map<SoundCategory, Float> mapSoundLevels = Maps.newEnumMap(SoundCategory.class);
      public float streamBytesPerPixel = 0.5F;
      public float streamMicVolume = 1.0F;
      public float streamGameVolume = 1.0F;
--- 122,128 ----
      public float chatHeightFocused = 1.0F;
      public boolean showInventoryAchievementHint = true;
      public int mipmapLevels = 4;
!     private Map mapSoundLevels = Maps.newEnumMap(SoundCategory.class);
      public float streamBytesPerPixel = 0.5F;
      public float streamMicVolume = 1.0F;
      public float streamGameVolume = 1.0F;
***************
*** 179,188 ****
      /** Game settings language */
      public String language;
      public boolean forceUnicodeFont;
! 
      public GameSettings(Minecraft mcIn, File p_i46326_2_)
      {
!         this.keyBindings = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindStreamStartStop, this.keyBindStreamPauseUnpause, this.keyBindStreamCommercials, this.keyBindStreamToggleMic, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindsHotbar);
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
          this.fovSetting = 70.0F;
--- 192,285 ----
      /** Game settings language */
      public String language;
      public boolean forceUnicodeFont;
!     private static final String __OBFID = "CL_00000650";
!     public int ofFogType = 1;
!     public float ofFogStart = 0.8F;
!     public int ofMipmapType = 0;
!     public boolean ofOcclusionFancy = false;
!     public boolean ofSmoothFps = false;
!     public boolean ofSmoothWorld = Config.isSingleProcessor();
!     public boolean ofLazyChunkLoading = Config.isSingleProcessor();
!     public float ofAoLevel = 1.0F;
!     public int ofAaLevel = 0;
!     public int ofAfLevel = 1;
!     public int ofClouds = 0;
!     public float ofCloudsHeight = 0.0F;
!     public int ofTrees = 0;
!     public int ofRain = 0;
!     public int ofDroppedItems = 0;
!     public int ofBetterGrass = 3;
!     public int ofAutoSaveTicks = 4000;
!     public boolean ofLagometer = false;
!     public boolean ofProfiler = false;
!     public boolean ofShowFps = false;
!     public boolean ofWeather = true;
!     public boolean ofSky = true;
!     public boolean ofStars = true;
!     public boolean ofSunMoon = true;
!     public int ofVignette = 0;
!     public int ofChunkUpdates = 1;
!     public boolean ofChunkUpdatesDynamic = false;
!     public int ofTime = 0;
!     public boolean ofClearWater = false;
!     public boolean ofBetterSnow = false;
!     public String ofFullscreenMode = "Default";
!     public boolean ofSwampColors = true;
!     public boolean ofRandomMobs = true;
!     public boolean ofSmoothBiomes = true;
!     public boolean ofCustomFonts = true;
!     public boolean ofCustomColors = true;
!     public boolean ofCustomSky = true;
!     public boolean ofShowCapes = true;
!     public int ofConnectedTextures = 2;
!     public boolean ofCustomItems = true;
!     public boolean ofNaturalTextures = false;
!     public boolean ofFastMath = false;
!     public boolean ofFastRender = true;
!     public int ofTranslucentBlocks = 0;
!     public boolean ofDynamicFov = true;
!     public int ofDynamicLights = 3;
!     public int ofAnimatedWater = 0;
!     public int ofAnimatedLava = 0;
!     public boolean ofAnimatedFire = true;
!     public boolean ofAnimatedPortal = true;
!     public boolean ofAnimatedRedstone = true;
!     public boolean ofAnimatedExplosion = true;
!     public boolean ofAnimatedFlame = true;
!     public boolean ofAnimatedSmoke = true;
!     public boolean ofVoidParticles = true;
!     public boolean ofWaterParticles = true;
!     public boolean ofRainSplash = true;
!     public boolean ofPortalParticles = true;
!     public boolean ofPotionParticles = true;
!     public boolean ofFireworkParticles = true;
!     public boolean ofDrippingWaterLava = true;
!     public boolean ofAnimatedTerrain = true;
!     public boolean ofAnimatedTextures = true;
!     public static final int DEFAULT = 0;
!     public static final int FAST = 1;
!     public static final int FANCY = 2;
!     public static final int OFF = 3;
!     public static final int SMART = 4;
!     public static final int ANIM_ON = 0;
!     public static final int ANIM_GENERATED = 1;
!     public static final int ANIM_OFF = 2;
!     public static final String DEFAULT_STR = "Default";
!     private static final int[] OF_TREES_VALUES = new int[] {0, 1, 4, 2};
!     private static final int[] OF_DYNAMIC_LIGHTS = new int[] {3, 1, 2};
!     private static final String[] KEYS_DYNAMIC_LIGHTS = new String[] {"options.off", "options.graphics.fast", "options.graphics.fancy"};
!     public KeyBinding ofKeyBindZoom;
!     private File optionsFileOF;
!     
!     
!     public KeyBinding CLIENT_GUI_MOD_POS = new KeyBinding("Mod Positioning", Keyboard.KEY_T, "Simp Client");
!     public KeyBinding CLIENT_PERSPECTIVE = new KeyBinding("Toggle Perspective", Keyboard.KEY_F, "Simp Client");
!     
!     public KeyBinding CLIENT_SIMP_BROWSER = new KeyBinding("Web Browser", Keyboard.KEY_B, "Simp Client");
!     
      public GameSettings(Minecraft mcIn, File p_i46326_2_)
      {
!         this.keyBindings = (KeyBinding[])((KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindStreamStartStop, this.keyBindStreamPauseUnpause, this.keyBindStreamCommercials, this.keyBindStreamToggleMic, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindsHotbar));
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
          this.fovSetting = 70.0F;
***************
*** 190,220 ****
          this.forceUnicodeFont = false;
          this.mc = mcIn;
          this.optionsFile = new File(p_i46326_2_, "options.txt");
! 
!         if (mcIn.isJava64bit() && Runtime.getRuntime().maxMemory() >= 1000000000L)
!         {
!             GameSettings.Options.RENDER_DISTANCE.setValueMax(32.0F);
!         }
!         else
!         {
!             GameSettings.Options.RENDER_DISTANCE.setValueMax(16.0F);
!         }
! 
!         this.renderDistanceChunks = mcIn.isJava64bit() ? 12 : 8;
          this.loadOptions();
      }
  
      public GameSettings()
      {
!         this.keyBindings = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindStreamStartStop, this.keyBindStreamPauseUnpause, this.keyBindStreamCommercials, this.keyBindStreamToggleMic, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindsHotbar);
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
          this.fovSetting = 70.0F;
          this.language = "en_US";
          this.forceUnicodeFont = false;
      }
  
!     /**
       * Represents a key or mouse button as a string. Args: key
       */
      public static String getKeyDisplayString(int p_74298_0_)
--- 287,321 ----
          this.forceUnicodeFont = false;
          this.mc = mcIn;
          this.optionsFile = new File(p_i46326_2_, "options.txt");
!         this.optionsFileOF = new File(p_i46326_2_, "optionsof.txt");
!         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
!         this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
!         this.keyBindings = (KeyBinding[])((KeyBinding[])ArrayUtils.add(this.keyBindings, this.ofKeyBindZoom));
!         GameSettings.Options.RENDER_DISTANCE.setValueMax(32.0F);
!         this.renderDistanceChunks = 8;
          this.loadOptions();
+         Config.initGameSettings(this);
+         addClientKeybinds();
      }
  
      public GameSettings()
      {
!         this.keyBindings = (KeyBinding[])((KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindStreamStartStop, this.keyBindStreamPauseUnpause, this.keyBindStreamCommercials, this.keyBindStreamToggleMic, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindsHotbar));
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
          this.fovSetting = 70.0F;
          this.language = "en_US";
          this.forceUnicodeFont = false;
+         addClientKeybinds();
      }
  
!     private void addClientKeybinds() {
! 		this.keyBindings = ((KeyBinding[])ArrayUtils.add(this.keyBindings, this.CLIENT_GUI_MOD_POS));
! 		this.keyBindings = ((KeyBinding[])ArrayUtils.add(this.keyBindings, this.CLIENT_PERSPECTIVE));
! 		this.keyBindings = ((KeyBinding[])ArrayUtils.add(this.keyBindings, this.CLIENT_SIMP_BROWSER));
! 	}
! 
! 	/**
       * Represents a key or mouse button as a string. Args: key
       */
      public static String getKeyDisplayString(int p_74298_0_)
***************
*** 227,233 ****
       */
      public static boolean isKeyDown(KeyBinding p_100015_0_)
      {
!         return p_100015_0_.getKeyCode() == 0 ? false : (p_100015_0_.getKeyCode() < 0 ? Mouse.isButtonDown(p_100015_0_.getKeyCode() + 100) : Keyboard.isKeyDown(p_100015_0_.getKeyCode()));
      }
  
      /**
--- 328,335 ----
       */
      public static boolean isKeyDown(KeyBinding p_100015_0_)
      {
!         int i = p_100015_0_.getKeyCode();
!         return i >= -100 && i <= 255 ? (p_100015_0_.getKeyCode() == 0 ? false : (p_100015_0_.getKeyCode() < 0 ? Mouse.isButtonDown(p_100015_0_.getKeyCode() + 100) : Keyboard.isKeyDown(p_100015_0_.getKeyCode()))) : false;
      }
  
      /**
***************
*** 244,249 ****
--- 346,353 ----
       */
      public void setOptionFloatValue(GameSettings.Options p_74304_1_, float p_74304_2_)
      {
+         this.setOptionFloatValueOF(p_74304_1_, p_74304_2_);
+ 
          if (p_74304_1_ == GameSettings.Options.SENSITIVITY)
          {
              this.mouseSensitivity = p_74304_2_;
***************
*** 262,267 ****
--- 366,380 ----
          if (p_74304_1_ == GameSettings.Options.FRAMERATE_LIMIT)
          {
              this.limitFramerate = (int)p_74304_2_;
+             this.enableVsync = false;
+ 
+             if (this.limitFramerate <= 0)
+             {
+                 this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                 this.enableVsync = true;
+             }
+ 
+             this.updateVSync();
          }
  
          if (p_74304_1_ == GameSettings.Options.CHAT_OPACITY)
***************
*** 353,358 ****
--- 466,473 ----
       */
      public void setOptionValue(GameSettings.Options p_74306_1_, int p_74306_2_)
      {
+         this.setOptionValueOF(p_74306_1_, p_74306_2_);
+ 
          if (p_74306_1_ == GameSettings.Options.INVERT_MOUSE)
          {
              this.invertMouse = !this.invertMouse;
***************
*** 391,396 ****
--- 506,517 ----
  
          if (p_74306_1_ == GameSettings.Options.ANAGLYPH)
          {
+             if (!this.anaglyph && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.an.shaders1"), Lang.get("of.message.an.shaders2"));
+                 return;
+             }
+ 
              this.anaglyph = !this.anaglyph;
              this.mc.refreshResources();
          }
***************
*** 398,403 ****
--- 519,525 ----
          if (p_74306_1_ == GameSettings.Options.GRAPHICS)
          {
              this.fancyGraphics = !this.fancyGraphics;
+             this.updateRenderClouds();
              this.mc.renderGlobal.loadRenderers();
          }
  
***************
*** 505,566 ****
  
      public float getOptionFloatValue(GameSettings.Options p_74296_1_)
      {
!         return p_74296_1_ == GameSettings.Options.FOV ? this.fovSetting : (p_74296_1_ == GameSettings.Options.GAMMA ? this.gammaSetting : (p_74296_1_ == GameSettings.Options.SATURATION ? this.saturation : (p_74296_1_ == GameSettings.Options.SENSITIVITY ? this.mouseSensitivity : (p_74296_1_ == GameSettings.Options.CHAT_OPACITY ? this.chatOpacity : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused : (p_74296_1_ == GameSettings.Options.CHAT_SCALE ? this.chatScale : (p_74296_1_ == GameSettings.Options.CHAT_WIDTH ? this.chatWidth : (p_74296_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (float)this.limitFramerate : (p_74296_1_ == GameSettings.Options.MIPMAP_LEVELS ? (float)this.mipmapLevels : (p_74296_1_ == GameSettings.Options.RENDER_DISTANCE ? (float)this.renderDistanceChunks : (p_74296_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? this.streamBytesPerPixel : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_MIC ? this.streamMicVolume : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_SYSTEM ? this.streamGameVolume : (p_74296_1_ == GameSettings.Options.STREAM_KBPS ? this.streamKbps : (p_74296_1_ == GameSettings.Options.STREAM_FPS ? this.streamFps : 0.0F))))))))))))))));
      }
  
      public boolean getOptionOrdinalValue(GameSettings.Options p_74308_1_)
      {
!         switch (p_74308_1_)
          {
!             case INVERT_MOUSE:
                  return this.invertMouse;
  
!             case VIEW_BOBBING:
                  return this.viewBobbing;
  
!             case ANAGLYPH:
                  return this.anaglyph;
  
!             case FBO_ENABLE:
                  return this.fboEnable;
  
!             case CHAT_COLOR:
                  return this.chatColours;
  
!             case CHAT_LINKS:
                  return this.chatLinks;
  
!             case CHAT_LINKS_PROMPT:
                  return this.chatLinksPrompt;
  
!             case SNOOPER_ENABLED:
                  return this.snooperEnabled;
  
!             case USE_FULLSCREEN:
                  return this.fullScreen;
  
!             case ENABLE_VSYNC:
                  return this.enableVsync;
  
!             case USE_VBO:
                  return this.useVbo;
  
!             case TOUCHSCREEN:
                  return this.touchscreen;
  
!             case STREAM_SEND_METADATA:
                  return this.streamSendMetadata;
  
!             case FORCE_UNICODE_FONT:
                  return this.forceUnicodeFont;
  
!             case BLOCK_ALTERNATIVES:
                  return this.allowBlockAlternatives;
  
!             case REDUCED_DEBUG_INFO:
                  return this.reducedDebugInfo;
  
!             case ENTITY_SHADOWS:
                  return this.field_181151_V;
  
              default:
--- 627,688 ----
  
      public float getOptionFloatValue(GameSettings.Options p_74296_1_)
      {
!         return p_74296_1_ == GameSettings.Options.CLOUD_HEIGHT ? this.ofCloudsHeight : (p_74296_1_ == GameSettings.Options.AO_LEVEL ? this.ofAoLevel : (p_74296_1_ == GameSettings.Options.AA_LEVEL ? (float)this.ofAaLevel : (p_74296_1_ == GameSettings.Options.AF_LEVEL ? (float)this.ofAfLevel : (p_74296_1_ == GameSettings.Options.MIPMAP_TYPE ? (float)this.ofMipmapType : (p_74296_1_ == GameSettings.Options.FRAMERATE_LIMIT ? ((float)this.limitFramerate == GameSettings.Options.FRAMERATE_LIMIT.getValueMax() && this.enableVsync ? 0.0F : (float)this.limitFramerate) : (p_74296_1_ == GameSettings.Options.FOV ? this.fovSetting : (p_74296_1_ == GameSettings.Options.GAMMA ? this.gammaSetting : (p_74296_1_ == GameSettings.Options.SATURATION ? this.saturation : (p_74296_1_ == GameSettings.Options.SENSITIVITY ? this.mouseSensitivity : (p_74296_1_ == GameSettings.Options.CHAT_OPACITY ? this.chatOpacity : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused : (p_74296_1_ == GameSettings.Options.CHAT_SCALE ? this.chatScale : (p_74296_1_ == GameSettings.Options.CHAT_WIDTH ? this.chatWidth : (p_74296_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (float)this.limitFramerate : (p_74296_1_ == GameSettings.Options.MIPMAP_LEVELS ? (float)this.mipmapLevels : (p_74296_1_ == GameSettings.Options.RENDER_DISTANCE ? (float)this.renderDistanceChunks : (p_74296_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? this.streamBytesPerPixel : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_MIC ? this.streamMicVolume : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_SYSTEM ? this.streamGameVolume : (p_74296_1_ == GameSettings.Options.STREAM_KBPS ? this.streamKbps : (p_74296_1_ == GameSettings.Options.STREAM_FPS ? this.streamFps : 0.0F))))))))))))))))))))));
      }
  
      public boolean getOptionOrdinalValue(GameSettings.Options p_74308_1_)
      {
!         switch (GameSettings.GameSettings$2.field_151477_a[p_74308_1_.ordinal()])
          {
!             case 1:
                  return this.invertMouse;
  
!             case 2:
                  return this.viewBobbing;
  
!             case 3:
                  return this.anaglyph;
  
!             case 4:
                  return this.fboEnable;
  
!             case 5:
                  return this.chatColours;
  
!             case 6:
                  return this.chatLinks;
  
!             case 7:
                  return this.chatLinksPrompt;
  
!             case 8:
                  return this.snooperEnabled;
  
!             case 9:
                  return this.fullScreen;
  
!             case 10:
                  return this.enableVsync;
  
!             case 11:
                  return this.useVbo;
  
!             case 12:
                  return this.touchscreen;
  
!             case 13:
                  return this.streamSendMetadata;
  
!             case 14:
                  return this.forceUnicodeFont;
  
!             case 15:
                  return this.allowBlockAlternatives;
  
!             case 16:
                  return this.reducedDebugInfo;
  
!             case 17:
                  return this.field_181151_V;
  
              default:
***************
*** 587,657 ****
       */
      public String getKeyBinding(GameSettings.Options p_74297_1_)
      {
!         String s = I18n.format(p_74297_1_.getEnumString(), new Object[0]) + ": ";
  
!         if (p_74297_1_.getEnumFloat())
!         {
!             float f1 = this.getOptionFloatValue(p_74297_1_);
!             float f = p_74297_1_.normalizeValue(f1);
!             return p_74297_1_ == GameSettings.Options.SENSITIVITY ? (f == 0.0F ? s + I18n.format("options.sensitivity.min", new Object[0]) : (f == 1.0F ? s + I18n.format("options.sensitivity.max", new Object[0]) : s + (int)(f * 200.0F) + "%")) : (p_74297_1_ == GameSettings.Options.FOV ? (f1 == 70.0F ? s + I18n.format("options.fov.min", new Object[0]) : (f1 == 110.0F ? s + I18n.format("options.fov.max", new Object[0]) : s + (int)f1)) : (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (f1 == p_74297_1_.valueMax ? s + I18n.format("options.framerateLimit.max", new Object[0]) : s + (int)f1 + " fps") : (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS ? (f1 == p_74297_1_.valueMin ? s + I18n.format("options.cloudHeight.min", new Object[0]) : s + ((int)f1 + 128)) : (p_74297_1_ == GameSettings.Options.GAMMA ? (f == 0.0F ? s + I18n.format("options.gamma.min", new Object[0]) : (f == 1.0F ? s + I18n.format("options.gamma.max", new Object[0]) : s + "+" + (int)(f * 100.0F) + "%")) : (p_74297_1_ == GameSettings.Options.SATURATION ? s + (int)(f * 400.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_OPACITY ? s + (int)(f * 90.0F + 10.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? s + GuiNewChat.calculateChatboxHeight(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? s + GuiNewChat.calculateChatboxHeight(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_WIDTH ? s + GuiNewChat.calculateChatboxWidth(f) + "px" : (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE ? s + (int)f1 + " chunks" : (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS ? (f1 == 0.0F ? s + I18n.format("options.off", new Object[0]) : s + (int)f1) : (p_74297_1_ == GameSettings.Options.STREAM_FPS ? s + TwitchStream.formatStreamFps(f) + " fps" : (p_74297_1_ == GameSettings.Options.STREAM_KBPS ? s + TwitchStream.formatStreamKbps(f) + " Kbps" : (p_74297_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? s + String.format("%.3f bpp", new Object[] {Float.valueOf(TwitchStream.formatStreamBps(f))}): (f == 0.0F ? s + I18n.format("options.off", new Object[0]) : s + (int)(f * 100.0F) + "%")))))))))))))));
!         }
!         else if (p_74297_1_.getEnumBoolean())
!         {
!             boolean flag = this.getOptionOrdinalValue(p_74297_1_);
!             return flag ? s + I18n.format("options.on", new Object[0]) : s + I18n.format("options.off", new Object[0]);
!         }
!         else if (p_74297_1_ == GameSettings.Options.GUI_SCALE)
!         {
!             return s + getTranslation(GUISCALES, this.guiScale);
!         }
!         else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY)
!         {
!             return s + I18n.format(this.chatVisibility.getResourceKey(), new Object[0]);
!         }
!         else if (p_74297_1_ == GameSettings.Options.PARTICLES)
!         {
!             return s + getTranslation(PARTICLES, this.particleSetting);
!         }
!         else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION)
!         {
!             return s + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
!         }
!         else if (p_74297_1_ == GameSettings.Options.STREAM_COMPRESSION)
!         {
!             return s + getTranslation(STREAM_COMPRESSIONS, this.streamCompression);
!         }
!         else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_ENABLED)
!         {
!             return s + getTranslation(STREAM_CHAT_MODES, this.streamChatEnabled);
!         }
!         else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_USER_FILTER)
!         {
!             return s + getTranslation(STREAM_CHAT_FILTER_MODES, this.streamChatUserFilter);
!         }
!         else if (p_74297_1_ == GameSettings.Options.STREAM_MIC_TOGGLE_BEHAVIOR)
!         {
!             return s + getTranslation(STREAM_MIC_MODES, this.streamMicToggleBehavior);
!         }
!         else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
          {
!             return s + getTranslation(field_181149_aW, this.clouds);
          }
!         else if (p_74297_1_ == GameSettings.Options.GRAPHICS)
          {
!             if (this.fancyGraphics)
              {
!                 return s + I18n.format("options.graphics.fancy", new Object[0]);
              }
              else
              {
!                 String s1 = "options.graphics.fast";
!                 return s + I18n.format("options.graphics.fast", new Object[0]);
              }
          }
-         else
-         {
-             return s;
-         }
      }
  
      /**
--- 709,788 ----
       */
      public String getKeyBinding(GameSettings.Options p_74297_1_)
      {
!         String s = this.getKeyBindingOF(p_74297_1_);
  
!         if (s != null)
          {
!             return s;
          }
!         else
          {
!             String s1 = I18n.format(p_74297_1_.getEnumString(), new Object[0]) + ": ";
! 
!             if (p_74297_1_.getEnumFloat())
!             {
!                 float f1 = this.getOptionFloatValue(p_74297_1_);
!                 float f = p_74297_1_.normalizeValue(f1);
!                 return p_74297_1_ == GameSettings.Options.SENSITIVITY ? (f == 0.0F ? s1 + I18n.format("options.sensitivity.min", new Object[0]) : (f == 1.0F ? s1 + I18n.format("options.sensitivity.max", new Object[0]) : s1 + (int)(f * 200.0F) + "%")) : (p_74297_1_ == GameSettings.Options.FOV ? (f1 == 70.0F ? s1 + I18n.format("options.fov.min", new Object[0]) : (f1 == 110.0F ? s1 + I18n.format("options.fov.max", new Object[0]) : s1 + (int)f1)) : (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (f1 == p_74297_1_.valueMax ? s1 + I18n.format("options.framerateLimit.max", new Object[0]) : s1 + (int)f1 + " fps") : (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS ? (f1 == p_74297_1_.valueMin ? s1 + I18n.format("options.cloudHeight.min", new Object[0]) : s1 + ((int)f1 + 128)) : (p_74297_1_ == GameSettings.Options.GAMMA ? (f == 0.0F ? s1 + I18n.format("options.gamma.min", new Object[0]) : (f == 1.0F ? s1 + I18n.format("options.gamma.max", new Object[0]) : s1 + "+" + (int)(f * 100.0F) + "%")) : (p_74297_1_ == GameSettings.Options.SATURATION ? s1 + (int)(f * 400.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_OPACITY ? s1 + (int)(f * 90.0F + 10.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? s1 + GuiNewChat.calculateChatboxHeight(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? s1 + GuiNewChat.calculateChatboxHeight(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_WIDTH ? s1 + GuiNewChat.calculateChatboxWidth(f) + "px" : (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE ? s1 + (int)f1 + " chunks" : (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS ? (f1 == 0.0F ? s1 + I18n.format("options.off", new Object[0]) : s1 + (int)f1) : (p_74297_1_ == GameSettings.Options.STREAM_FPS ? s1 + TwitchStream.formatStreamFps(f) + " fps" : (p_74297_1_ == GameSettings.Options.STREAM_KBPS ? s1 + TwitchStream.formatStreamKbps(f) + " Kbps" : (p_74297_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? s1 + String.format("%.3f bpp", new Object[] {Float.valueOf(TwitchStream.formatStreamBps(f))}): (f == 0.0F ? s1 + I18n.format("options.off", new Object[0]) : s1 + (int)(f * 100.0F) + "%")))))))))))))));
!             }
!             else if (p_74297_1_.getEnumBoolean())
!             {
!                 boolean flag = this.getOptionOrdinalValue(p_74297_1_);
!                 return flag ? s1 + I18n.format("options.on", new Object[0]) : s1 + I18n.format("options.off", new Object[0]);
!             }
!             else if (p_74297_1_ == GameSettings.Options.GUI_SCALE)
!             {
!                 return s1 + getTranslation(GUISCALES, this.guiScale);
!             }
!             else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY)
!             {
!                 return s1 + I18n.format(this.chatVisibility.getResourceKey(), new Object[0]);
!             }
!             else if (p_74297_1_ == GameSettings.Options.PARTICLES)
!             {
!                 return s1 + getTranslation(PARTICLES, this.particleSetting);
!             }
!             else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION)
!             {
!                 return s1 + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
!             }
!             else if (p_74297_1_ == GameSettings.Options.STREAM_COMPRESSION)
!             {
!                 return s1 + getTranslation(STREAM_COMPRESSIONS, this.streamCompression);
!             }
!             else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_ENABLED)
!             {
!                 return s1 + getTranslation(STREAM_CHAT_MODES, this.streamChatEnabled);
!             }
!             else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_USER_FILTER)
!             {
!                 return s1 + getTranslation(STREAM_CHAT_FILTER_MODES, this.streamChatUserFilter);
!             }
!             else if (p_74297_1_ == GameSettings.Options.STREAM_MIC_TOGGLE_BEHAVIOR)
!             {
!                 return s1 + getTranslation(STREAM_MIC_MODES, this.streamMicToggleBehavior);
!             }
!             else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
              {
!                 return s1 + getTranslation(field_181149_aW, this.clouds);
!             }
!             else if (p_74297_1_ == GameSettings.Options.GRAPHICS)
!             {
!                 if (this.fancyGraphics)
!                 {
!                     return s1 + I18n.format("options.graphics.fancy", new Object[0]);
!                 }
!                 else
!                 {
!                     String s2 = "options.graphics.fast";
!                     return s1 + I18n.format("options.graphics.fast", new Object[0]);
!                 }
              }
              else
              {
!                 return s1;
              }
          }
      }
  
      /**
***************
*** 729,734 ****
--- 860,874 ----
                      if (astring[0].equals("maxFps"))
                      {
                          this.limitFramerate = Integer.parseInt(astring[1]);
+                         this.enableVsync = false;
+ 
+                         if (this.limitFramerate <= 0)
+                         {
+                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                             this.enableVsync = true;
+                         }
+ 
+                         this.updateVSync();
                      }
  
                      if (astring[0].equals("fboEnable"))
***************
*** 744,749 ****
--- 884,890 ----
                      if (astring[0].equals("fancyGraphics"))
                      {
                          this.fancyGraphics = astring[1].equals("true");
+                         this.updateRenderClouds();
                      }
  
                      if (astring[0].equals("ao"))
***************
*** 784,790 ****
  
                          if (this.resourcePacks == null)
                          {
!                             this.resourcePacks = Lists.<String>newArrayList();
                          }
                      }
  
--- 925,931 ----
  
                          if (this.resourcePacks == null)
                          {
!                             this.resourcePacks = Lists.newArrayList();
                          }
                      }
  
***************
*** 794,800 ****
  
                          if (this.field_183018_l == null)
                          {
!                             this.field_183018_l = Lists.<String>newArrayList();
                          }
                      }
  
--- 935,941 ----
  
                          if (this.field_183018_l == null)
                          {
!                             this.field_183018_l = Lists.newArrayList();
                          }
                      }
  
***************
*** 846,851 ****
--- 987,993 ----
                      if (astring[0].equals("enableVsync"))
                      {
                          this.enableVsync = astring[1].equals("true");
+                         this.updateVSync();
                      }
  
                      if (astring[0].equals("useVbo"))
***************
*** 1022,1040 ****
                          }
                      }
                  }
!                 catch (Exception var8)
                  {
                      logger.warn("Skipping bad option: " + s);
                  }
              }
  
              KeyBinding.resetKeyBindingArrayAndHash();
              bufferedreader.close();
          }
!         catch (Exception exception)
          {
!             logger.error((String)"Failed to load options", (Throwable)exception);
          }
      }
  
      /**
--- 1164,1185 ----
                          }
                      }
                  }
!                 catch (Exception exception)
                  {
                      logger.warn("Skipping bad option: " + s);
+                     exception.printStackTrace();
                  }
              }
  
              KeyBinding.resetKeyBindingArrayAndHash();
              bufferedreader.close();
          }
!         catch (Exception exception1)
          {
!             logger.error((String)"Failed to load options", (Throwable)exception1);
          }
+ 
+         this.loadOfOptions();
      }
  
      /**
***************
*** 1050,1055 ****
--- 1195,1210 ----
       */
      public void saveOptions()
      {
+         if (Reflector.FMLClientHandler.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLClientHandler_instance, new Object[0]);
+ 
+             if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading, new Object[0]))
+             {
+                 return;
+             }
+         }
+ 
          try
          {
              PrintWriter printwriter = new PrintWriter(new FileWriter(this.optionsFile));
***************
*** 1148,1153 ****
--- 1303,1309 ----
              logger.error((String)"Failed to save options", (Throwable)exception);
          }
  
+         this.saveOfOptions();
          this.sendSettingsToServer();
      }
  
***************
*** 1171,1186 ****
          {
              int i = 0;
  
!             for (EnumPlayerModelParts enumplayermodelparts : this.setModelParts)
              {
!                 i |= enumplayermodelparts.getPartMask();
              }
  
              this.mc.thePlayer.sendQueue.addToSendQueue(new C15PacketClientSettings(this.language, this.renderDistanceChunks, this.chatVisibility, this.chatColours, i));
          }
      }
  
!     public Set<EnumPlayerModelParts> getModelParts()
      {
          return ImmutableSet.copyOf(this.setModelParts);
      }
--- 1327,1342 ----
          {
              int i = 0;
  
!             for (Object enumplayermodelparts : this.setModelParts)
              {
!                 i |= ((EnumPlayerModelParts) enumplayermodelparts).getPartMask();
              }
  
              this.mc.thePlayer.sendQueue.addToSendQueue(new C15PacketClientSettings(this.language, this.renderDistanceChunks, this.chatVisibility, this.chatColours, i));
          }
      }
  
!     public Set getModelParts()
      {
          return ImmutableSet.copyOf(this.setModelParts);
      }
***************
*** 1223,1274 ****
          return this.field_181150_U;
      }
  
      public static enum Options
      {
!         INVERT_MOUSE("options.invertMouse", false, true),
!         SENSITIVITY("options.sensitivity", true, false),
!         FOV("options.fov", true, false, 30.0F, 110.0F, 1.0F),
!         GAMMA("options.gamma", true, false),
!         SATURATION("options.saturation", true, false),
!         RENDER_DISTANCE("options.renderDistance", true, false, 2.0F, 16.0F, 1.0F),
!         VIEW_BOBBING("options.viewBobbing", false, true),
!         ANAGLYPH("options.anaglyph", false, true),
!         FRAMERATE_LIMIT("options.framerateLimit", true, false, 10.0F, 260.0F, 10.0F),
!         FBO_ENABLE("options.fboEnable", false, true),
!         RENDER_CLOUDS("options.renderClouds", false, false),
!         GRAPHICS("options.graphics", false, false),
!         AMBIENT_OCCLUSION("options.ao", false, false),
!         GUI_SCALE("options.guiScale", false, false),
!         PARTICLES("options.particles", false, false),
!         CHAT_VISIBILITY("options.chat.visibility", false, false),
!         CHAT_COLOR("options.chat.color", false, true),
!         CHAT_LINKS("options.chat.links", false, true),
!         CHAT_OPACITY("options.chat.opacity", true, false),
!         CHAT_LINKS_PROMPT("options.chat.links.prompt", false, true),
!         SNOOPER_ENABLED("options.snooper", false, true),
!         USE_FULLSCREEN("options.fullscreen", false, true),
!         ENABLE_VSYNC("options.vsync", false, true),
!         USE_VBO("options.vbo", false, true),
!         TOUCHSCREEN("options.touchscreen", false, true),
!         CHAT_SCALE("options.chat.scale", true, false),
!         CHAT_WIDTH("options.chat.width", true, false),
!         CHAT_HEIGHT_FOCUSED("options.chat.height.focused", true, false),
!         CHAT_HEIGHT_UNFOCUSED("options.chat.height.unfocused", true, false),
!         MIPMAP_LEVELS("options.mipmapLevels", true, false, 0.0F, 4.0F, 1.0F),
!         FORCE_UNICODE_FONT("options.forceUnicodeFont", false, true),
!         STREAM_BYTES_PER_PIXEL("options.stream.bytesPerPixel", true, false),
!         STREAM_VOLUME_MIC("options.stream.micVolumne", true, false),
!         STREAM_VOLUME_SYSTEM("options.stream.systemVolume", true, false),
!         STREAM_KBPS("options.stream.kbps", true, false),
!         STREAM_FPS("options.stream.fps", true, false),
!         STREAM_COMPRESSION("options.stream.compression", false, false),
!         STREAM_SEND_METADATA("options.stream.sendMetadata", false, true),
!         STREAM_CHAT_ENABLED("options.stream.chat.enabled", false, false),
!         STREAM_CHAT_USER_FILTER("options.stream.chat.userFilter", false, false),
!         STREAM_MIC_TOGGLE_BEHAVIOR("options.stream.micToggleBehavior", false, false),
!         BLOCK_ALTERNATIVES("options.blockAlternatives", false, true),
!         REDUCED_DEBUG_INFO("options.reducedDebugInfo", false, true),
!         ENTITY_SHADOWS("options.entityShadows", false, true);
  
          private final boolean enumFloat;
          private final boolean enumBoolean;
--- 1379,3313 ----
          return this.field_181150_U;
      }
  
+     private void setOptionFloatValueOF(GameSettings.Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_)
+     {
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
+         {
+             this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
+             this.mc.renderGlobal.resetClouds();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
+         {
+             this.ofAoLevel = p_setOptionFloatValueOF_2_;
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
+         {
+             int i = (int)p_setOptionFloatValueOF_2_;
+ 
+             if (i > 0 && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.aa.shaders1"), Lang.get("of.message.aa.shaders2"));
+                 return;
+             }
+ 
+             int[] aint = new int[] {0, 2, 4, 6, 8, 12, 16};
+             this.ofAaLevel = 0;
+ 
+             for (int j = 0; j < aint.length; ++j)
+             {
+                 if (i >= aint[j])
+                 {
+                     this.ofAaLevel = aint[j];
+                 }
+             }
+ 
+             this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
+         {
+             int k = (int)p_setOptionFloatValueOF_2_;
+ 
+             if (k > 1 && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.af.shaders1"), Lang.get("of.message.af.shaders2"));
+                 return;
+             }
+ 
+             for (this.ofAfLevel = 1; this.ofAfLevel * 2 <= k; this.ofAfLevel *= 2)
+             {
+                 ;
+             }
+ 
+             this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+         {
+             int l = (int)p_setOptionFloatValueOF_2_;
+             this.ofMipmapType = Config.limit(l, 0, 3);
+             this.mc.refreshResources();
+         }
+     }
+ 
+     private void setOptionValueOF(GameSettings.Options p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
+     {
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_FANCY)
+         {
+             switch (this.ofFogType)
+             {
+                 case 1:
+                     this.ofFogType = 2;
+ 
+                     if (!Config.isFancyFogAvailable())
+                     {
+                         this.ofFogType = 3;
+                     }
+ 
+                     break;
+ 
+                 case 2:
+                     this.ofFogType = 3;
+                     break;
+ 
+                 case 3:
+                     this.ofFogType = 1;
+                     break;
+ 
+                 default:
+                     this.ofFogType = 1;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_START)
+         {
+             this.ofFogStart += 0.2F;
+ 
+             if (this.ofFogStart > 0.81F)
+             {
+                 this.ofFogStart = 0.2F;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_FPS)
+         {
+             this.ofSmoothFps = !this.ofSmoothFps;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+         {
+             this.ofSmoothWorld = !this.ofSmoothWorld;
+             Config.updateThreadPriorities();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CLOUDS)
+         {
+             ++this.ofClouds;
+ 
+             if (this.ofClouds > 3)
+             {
+                 this.ofClouds = 0;
+             }
+ 
+             this.updateRenderClouds();
+             this.mc.renderGlobal.resetClouds();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TREES)
+         {
+             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+         {
+             ++this.ofDroppedItems;
+ 
+             if (this.ofDroppedItems > 2)
+             {
+                 this.ofDroppedItems = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN)
+         {
+             ++this.ofRain;
+ 
+             if (this.ofRain > 3)
+             {
+                 this.ofRain = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_WATER)
+         {
+             ++this.ofAnimatedWater;
+ 
+             if (this.ofAnimatedWater == 1)
+             {
+                 ++this.ofAnimatedWater;
+             }
+ 
+             if (this.ofAnimatedWater > 2)
+             {
+                 this.ofAnimatedWater = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+         {
+             ++this.ofAnimatedLava;
+ 
+             if (this.ofAnimatedLava == 1)
+             {
+                 ++this.ofAnimatedLava;
+             }
+ 
+             if (this.ofAnimatedLava > 2)
+             {
+                 this.ofAnimatedLava = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+         {
+             this.ofAnimatedFire = !this.ofAnimatedFire;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+         {
+             this.ofAnimatedPortal = !this.ofAnimatedPortal;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+         {
+             this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+         {
+             this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+         {
+             this.ofAnimatedFlame = !this.ofAnimatedFlame;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+         {
+             this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.VOID_PARTICLES)
+         {
+             this.ofVoidParticles = !this.ofVoidParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.WATER_PARTICLES)
+         {
+             this.ofWaterParticles = !this.ofWaterParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+         {
+             this.ofPortalParticles = !this.ofPortalParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.POTION_PARTICLES)
+         {
+             this.ofPotionParticles = !this.ofPotionParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+         {
+             this.ofFireworkParticles = !this.ofFireworkParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+         {
+             this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+         {
+             this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+         {
+             this.ofAnimatedTextures = !this.ofAnimatedTextures;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN_SPLASH)
+         {
+             this.ofRainSplash = !this.ofRainSplash;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.LAGOMETER)
+         {
+             this.ofLagometer = !this.ofLagometer;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_FPS)
+         {
+             this.ofShowFps = !this.ofShowFps;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+         {
+             this.ofAutoSaveTicks *= 10;
+ 
+             if (this.ofAutoSaveTicks > 40000)
+             {
+                 this.ofAutoSaveTicks = 40;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_GRASS)
+         {
+             ++this.ofBetterGrass;
+ 
+             if (this.ofBetterGrass > 3)
+             {
+                 this.ofBetterGrass = 1;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+         {
+             ++this.ofConnectedTextures;
+ 
+             if (this.ofConnectedTextures > 3)
+             {
+                 this.ofConnectedTextures = 1;
+             }
+ 
+             if (this.ofConnectedTextures != 2)
+             {
+                 this.mc.refreshResources();
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.WEATHER)
+         {
+             this.ofWeather = !this.ofWeather;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SKY)
+         {
+             this.ofSky = !this.ofSky;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.STARS)
+         {
+             this.ofStars = !this.ofStars;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SUN_MOON)
+         {
+             this.ofSunMoon = !this.ofSunMoon;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.VIGNETTE)
+         {
+             ++this.ofVignette;
+ 
+             if (this.ofVignette > 2)
+             {
+                 this.ofVignette = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+         {
+             ++this.ofChunkUpdates;
+ 
+             if (this.ofChunkUpdates > 5)
+             {
+                 this.ofChunkUpdates = 1;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+         {
+             this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TIME)
+         {
+             ++this.ofTime;
+ 
+             if (this.ofTime > 2)
+             {
+                 this.ofTime = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CLEAR_WATER)
+         {
+             this.ofClearWater = !this.ofClearWater;
+             this.updateWaterOpacity();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.PROFILER)
+         {
+             this.ofProfiler = !this.ofProfiler;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_SNOW)
+         {
+             this.ofBetterSnow = !this.ofBetterSnow;
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SWAMP_COLORS)
+         {
+             this.ofSwampColors = !this.ofSwampColors;
+             CustomColors.updateUseDefaultGrassFoliageColors();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RANDOM_MOBS)
+         {
+             this.ofRandomMobs = !this.ofRandomMobs;
+             RandomMobs.resetTextures();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+         {
+             this.ofSmoothBiomes = !this.ofSmoothBiomes;
+             CustomColors.updateUseDefaultGrassFoliageColors();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+         {
+             this.ofCustomFonts = !this.ofCustomFonts;
+             this.mc.fontRendererObj.onResourceManagerReload(Config.getResourceManager());
+             this.mc.standardGalacticFontRenderer.onResourceManagerReload(Config.getResourceManager());
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+         {
+             this.ofCustomColors = !this.ofCustomColors;
+             CustomColors.update();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+         {
+             this.ofCustomItems = !this.ofCustomItems;
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_SKY)
+         {
+             this.ofCustomSky = !this.ofCustomSky;
+             CustomSky.update();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_CAPES)
+         {
+             this.ofShowCapes = !this.ofShowCapes;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+         {
+             this.ofNaturalTextures = !this.ofNaturalTextures;
+             NaturalTextures.update();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_MATH)
+         {
+             this.ofFastMath = !this.ofFastMath;
+             MathHelper.fastMath = this.ofFastMath;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
+         {
+             if (!this.ofFastRender && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+                 return;
+             }
+ 
+             this.ofFastRender = !this.ofFastRender;
+ 
+             if (this.ofFastRender)
+             {
+                 this.mc.entityRenderer.func_181022_b();
+             }
+ 
+             Config.updateFramebufferSize();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+         {
+             if (this.ofTranslucentBlocks == 0)
+             {
+                 this.ofTranslucentBlocks = 1;
+             }
+             else if (this.ofTranslucentBlocks == 1)
+             {
+                 this.ofTranslucentBlocks = 2;
+             }
+             else if (this.ofTranslucentBlocks == 2)
+             {
+                 this.ofTranslucentBlocks = 0;
+             }
+             else
+             {
+                 this.ofTranslucentBlocks = 0;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+         {
+             this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
+             Config.updateAvailableProcessors();
+ 
+             if (!Config.isSingleProcessor())
+             {
+                 this.ofLazyChunkLoading = false;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+         {
+             List list = Arrays.asList(Config.getDisplayModeNames());
+ 
+             if (this.ofFullscreenMode.equals("Default"))
+             {
+                 this.ofFullscreenMode = (String)list.get(0);
+             }
+             else
+             {
+                 int i = list.indexOf(this.ofFullscreenMode);
+ 
+                 if (i < 0)
+                 {
+                     this.ofFullscreenMode = "Default";
+                 }
+                 else
+                 {
+                     ++i;
+ 
+                     if (i >= list.size())
+                     {
+                         this.ofFullscreenMode = "Default";
+                     }
+                     else
+                     {
+                         this.ofFullscreenMode = (String)list.get(i);
+                     }
+                 }
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+         {
+             this.ofDynamicFov = !this.ofDynamicFov;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+         {
+             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+             DynamicLights.removeLights(this.mc.renderGlobal);
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+         {
+             this.heldItemTooltips = !this.heldItemTooltips;
+         }
+     }
+ 
+     private String getKeyBindingOF(GameSettings.Options p_getKeyBindingOF_1_)
+     {
+         String s = I18n.format(p_getKeyBindingOF_1_.getEnumString(), new Object[0]) + ": ";
+ 
+         if (p_getKeyBindingOF_1_ == GameSettings.Options.RENDER_DISTANCE)
+         {
+             int l = (int)this.getOptionFloatValue(p_getKeyBindingOF_1_);
+             String s1 = I18n.format("options.renderDistance.tiny", new Object[0]);
+             int i = 2;
+ 
+             if (l >= 4)
+             {
+                 s1 = I18n.format("options.renderDistance.short", new Object[0]);
+                 i = 4;
+             }
+ 
+             if (l >= 8)
+             {
+                 s1 = I18n.format("options.renderDistance.normal", new Object[0]);
+                 i = 8;
+             }
+ 
+             if (l >= 16)
+             {
+                 s1 = I18n.format("options.renderDistance.far", new Object[0]);
+                 i = 16;
+             }
+ 
+             if (l >= 32)
+             {
+                 s1 = Lang.get("of.options.renderDistance.extreme");
+                 i = 32;
+             }
+ 
+             int j = this.renderDistanceChunks - i;
+             String s2 = s1;
+ 
+             if (j > 0)
+             {
+                 s2 = s1 + "+";
+             }
+ 
+             return s + l + " " + s2 + "";
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_FANCY)
+         {
+             switch (this.ofFogType)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_START)
+         {
+             return s + this.ofFogStart;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+         {
+             switch (this.ofMipmapType)
+             {
+                 case 0:
+                     return s + Lang.get("of.options.mipmap.nearest");
+ 
+                 case 1:
+                     return s + Lang.get("of.options.mipmap.linear");
+ 
+                 case 2:
+                     return s + Lang.get("of.options.mipmap.bilinear");
+ 
+                 case 3:
+                     return s + Lang.get("of.options.mipmap.trilinear");
+ 
+                 default:
+                     return s + "of.options.mipmap.nearest";
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_FPS)
+         {
+             return this.ofSmoothFps ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+         {
+             return this.ofSmoothWorld ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLOUDS)
+         {
+             switch (this.ofClouds)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TREES)
+         {
+             switch (this.ofTrees)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                 default:
+                     return s + Lang.getDefault();
+ 
+                 case 4:
+                     return s + Lang.get("of.general.smart");
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+         {
+             switch (this.ofDroppedItems)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN)
+         {
+             switch (this.ofRain)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_WATER)
+         {
+             switch (this.ofAnimatedWater)
+             {
+                 case 1:
+                     return s + Lang.get("of.options.animation.dynamic");
+ 
+                 case 2:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOn();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+         {
+             switch (this.ofAnimatedLava)
+             {
+                 case 1:
+                     return s + Lang.get("of.options.animation.dynamic");
+ 
+                 case 2:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOn();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+         {
+             return this.ofAnimatedFire ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+         {
+             return this.ofAnimatedPortal ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+         {
+             return this.ofAnimatedRedstone ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+         {
+             return this.ofAnimatedExplosion ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+         {
+             return this.ofAnimatedFlame ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+         {
+             return this.ofAnimatedSmoke ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VOID_PARTICLES)
+         {
+             return this.ofVoidParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WATER_PARTICLES)
+         {
+             return this.ofWaterParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+         {
+             return this.ofPortalParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.POTION_PARTICLES)
+         {
+             return this.ofPotionParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+         {
+             return this.ofFireworkParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+         {
+             return this.ofDrippingWaterLava ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+         {
+             return this.ofAnimatedTerrain ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+         {
+             return this.ofAnimatedTextures ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN_SPLASH)
+         {
+             return this.ofRainSplash ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAGOMETER)
+         {
+             return this.ofLagometer ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_FPS)
+         {
+             return this.ofShowFps ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+         {
+             return this.ofAutoSaveTicks <= 40 ? s + Lang.get("of.options.save.default") : (this.ofAutoSaveTicks <= 400 ? s + Lang.get("of.options.save.20s") : (this.ofAutoSaveTicks <= 4000 ? s + Lang.get("of.options.save.3min") : s + Lang.get("of.options.save.30min")));
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_GRASS)
+         {
+             switch (this.ofBetterGrass)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+         {
+             switch (this.ofConnectedTextures)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WEATHER)
+         {
+             return this.ofWeather ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SKY)
+         {
+             return this.ofSky ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.STARS)
+         {
+             return this.ofStars ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SUN_MOON)
+         {
+             return this.ofSunMoon ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VIGNETTE)
+         {
+             switch (this.ofVignette)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+         {
+             return s + this.ofChunkUpdates;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+         {
+             return this.ofChunkUpdatesDynamic ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TIME)
+         {
+             return this.ofTime == 1 ? s + Lang.get("of.options.time.dayOnly") : (this.ofTime == 2 ? s + Lang.get("of.options.time.nightOnly") : s + Lang.getDefault());
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLEAR_WATER)
+         {
+             return this.ofClearWater ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AA_LEVEL)
+         {
+             String s3 = "";
+ 
+             if (this.ofAaLevel != Config.getAntialiasingLevel())
+             {
+                 s3 = " (" + Lang.get("of.general.restart") + ")";
+             }
+ 
+             return this.ofAaLevel == 0 ? s + Lang.getOff() + s3 : s + this.ofAaLevel + s3;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AF_LEVEL)
+         {
+             return this.ofAfLevel == 1 ? s + Lang.getOff() : s + this.ofAfLevel;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PROFILER)
+         {
+             return this.ofProfiler ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_SNOW)
+         {
+             return this.ofBetterSnow ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SWAMP_COLORS)
+         {
+             return this.ofSwampColors ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RANDOM_MOBS)
+         {
+             return this.ofRandomMobs ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+         {
+             return this.ofSmoothBiomes ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+         {
+             return this.ofCustomFonts ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+         {
+             return this.ofCustomColors ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_SKY)
+         {
+             return this.ofCustomSky ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_CAPES)
+         {
+             return this.ofShowCapes ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+         {
+             return this.ofCustomItems ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+         {
+             return this.ofNaturalTextures ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_MATH)
+         {
+             return this.ofFastMath ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_RENDER)
+         {
+             return this.ofFastRender ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+         {
+             return this.ofTranslucentBlocks == 1 ? s + Lang.getFast() : (this.ofTranslucentBlocks == 2 ? s + Lang.getFancy() : s + Lang.getDefault());
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+         {
+             return this.ofLazyChunkLoading ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+         {
+             return this.ofDynamicFov ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+         {
+             int k = indexOf(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+             return s + getTranslation(KEYS_DYNAMIC_LIGHTS, k);
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+         {
+             return this.ofFullscreenMode.equals("Default") ? s + Lang.getDefault() : s + this.ofFullscreenMode;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+         {
+             return this.heldItemTooltips ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
+         {
+             float f = this.getOptionFloatValue(p_getKeyBindingOF_1_);
+             return f == 0.0F ? s + Lang.get("of.options.framerateLimit.vsync") : (f == p_getKeyBindingOF_1_.valueMax ? s + I18n.format("options.framerateLimit.max", new Object[0]) : s + (int)f + " fps");
+         }
+         else
+         {
+             return null;
+         }
+     }
+ 
+     public void loadOfOptions()
+     {
+         try
+         {
+             File file1 = this.optionsFileOF;
+ 
+             if (!file1.exists())
+             {
+                 file1 = this.optionsFile;
+             }
+ 
+             if (!file1.exists())
+             {
+                 return;
+             }
+ 
+             BufferedReader bufferedreader = new BufferedReader(new FileReader(file1));
+             String s = "";
+ 
+             while ((s = bufferedreader.readLine()) != null)
+             {
+                 try
+                 {
+                     String[] astring = s.split(":");
+ 
+                     if (astring[0].equals("ofRenderDistanceChunks") && astring.length >= 2)
+                     {
+                         this.renderDistanceChunks = Integer.valueOf(astring[1]).intValue();
+                         this.renderDistanceChunks = Config.limit(this.renderDistanceChunks, 2, 32);
+                     }
+ 
+                     if (astring[0].equals("ofFogType") && astring.length >= 2)
+                     {
+                         this.ofFogType = Integer.valueOf(astring[1]).intValue();
+                         this.ofFogType = Config.limit(this.ofFogType, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofFogStart") && astring.length >= 2)
+                     {
+                         this.ofFogStart = Float.valueOf(astring[1]).floatValue();
+ 
+                         if (this.ofFogStart < 0.2F)
+                         {
+                             this.ofFogStart = 0.2F;
+                         }
+ 
+                         if (this.ofFogStart > 0.81F)
+                         {
+                             this.ofFogStart = 0.8F;
+                         }
+                     }
+ 
+                     if (astring[0].equals("ofMipmapType") && astring.length >= 2)
+                     {
+                         this.ofMipmapType = Integer.valueOf(astring[1]).intValue();
+                         this.ofMipmapType = Config.limit(this.ofMipmapType, 0, 3);
+                     }
+ 
+                     if (astring[0].equals("ofOcclusionFancy") && astring.length >= 2)
+                     {
+                         this.ofOcclusionFancy = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothFps") && astring.length >= 2)
+                     {
+                         this.ofSmoothFps = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothWorld") && astring.length >= 2)
+                     {
+                         this.ofSmoothWorld = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAoLevel") && astring.length >= 2)
+                     {
+                         this.ofAoLevel = Float.valueOf(astring[1]).floatValue();
+                         this.ofAoLevel = Config.limit(this.ofAoLevel, 0.0F, 1.0F);
+                     }
+ 
+                     if (astring[0].equals("ofClouds") && astring.length >= 2)
+                     {
+                         this.ofClouds = Integer.valueOf(astring[1]).intValue();
+                         this.ofClouds = Config.limit(this.ofClouds, 0, 3);
+                         this.updateRenderClouds();
+                     }
+ 
+                     if (astring[0].equals("ofCloudsHeight") && astring.length >= 2)
+                     {
+                         this.ofCloudsHeight = Float.valueOf(astring[1]).floatValue();
+                         this.ofCloudsHeight = Config.limit(this.ofCloudsHeight, 0.0F, 1.0F);
+                     }
+ 
+                     if (astring[0].equals("ofTrees") && astring.length >= 2)
+                     {
+                         this.ofTrees = Integer.valueOf(astring[1]).intValue();
+                         this.ofTrees = limit(this.ofTrees, OF_TREES_VALUES);
+                     }
+ 
+                     if (astring[0].equals("ofDroppedItems") && astring.length >= 2)
+                     {
+                         this.ofDroppedItems = Integer.valueOf(astring[1]).intValue();
+                         this.ofDroppedItems = Config.limit(this.ofDroppedItems, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofRain") && astring.length >= 2)
+                     {
+                         this.ofRain = Integer.valueOf(astring[1]).intValue();
+                         this.ofRain = Config.limit(this.ofRain, 0, 3);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedWater") && astring.length >= 2)
+                     {
+                         this.ofAnimatedWater = Integer.valueOf(astring[1]).intValue();
+                         this.ofAnimatedWater = Config.limit(this.ofAnimatedWater, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedLava") && astring.length >= 2)
+                     {
+                         this.ofAnimatedLava = Integer.valueOf(astring[1]).intValue();
+                         this.ofAnimatedLava = Config.limit(this.ofAnimatedLava, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedFire") && astring.length >= 2)
+                     {
+                         this.ofAnimatedFire = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedPortal") && astring.length >= 2)
+                     {
+                         this.ofAnimatedPortal = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedRedstone") && astring.length >= 2)
+                     {
+                         this.ofAnimatedRedstone = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedExplosion") && astring.length >= 2)
+                     {
+                         this.ofAnimatedExplosion = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedFlame") && astring.length >= 2)
+                     {
+                         this.ofAnimatedFlame = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedSmoke") && astring.length >= 2)
+                     {
+                         this.ofAnimatedSmoke = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofVoidParticles") && astring.length >= 2)
+                     {
+                         this.ofVoidParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofWaterParticles") && astring.length >= 2)
+                     {
+                         this.ofWaterParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofPortalParticles") && astring.length >= 2)
+                     {
+                         this.ofPortalParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofPotionParticles") && astring.length >= 2)
+                     {
+                         this.ofPotionParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofFireworkParticles") && astring.length >= 2)
+                     {
+                         this.ofFireworkParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDrippingWaterLava") && astring.length >= 2)
+                     {
+                         this.ofDrippingWaterLava = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedTerrain") && astring.length >= 2)
+                     {
+                         this.ofAnimatedTerrain = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedTextures") && astring.length >= 2)
+                     {
+                         this.ofAnimatedTextures = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofRainSplash") && astring.length >= 2)
+                     {
+                         this.ofRainSplash = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofLagometer") && astring.length >= 2)
+                     {
+                         this.ofLagometer = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofShowFps") && astring.length >= 2)
+                     {
+                         this.ofShowFps = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAutoSaveTicks") && astring.length >= 2)
+                     {
+                         this.ofAutoSaveTicks = Integer.valueOf(astring[1]).intValue();
+                         this.ofAutoSaveTicks = Config.limit(this.ofAutoSaveTicks, 40, 40000);
+                     }
+ 
+                     if (astring[0].equals("ofBetterGrass") && astring.length >= 2)
+                     {
+                         this.ofBetterGrass = Integer.valueOf(astring[1]).intValue();
+                         this.ofBetterGrass = Config.limit(this.ofBetterGrass, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofConnectedTextures") && astring.length >= 2)
+                     {
+                         this.ofConnectedTextures = Integer.valueOf(astring[1]).intValue();
+                         this.ofConnectedTextures = Config.limit(this.ofConnectedTextures, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofWeather") && astring.length >= 2)
+                     {
+                         this.ofWeather = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSky") && astring.length >= 2)
+                     {
+                         this.ofSky = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofStars") && astring.length >= 2)
+                     {
+                         this.ofStars = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSunMoon") && astring.length >= 2)
+                     {
+                         this.ofSunMoon = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofVignette") && astring.length >= 2)
+                     {
+                         this.ofVignette = Integer.valueOf(astring[1]).intValue();
+                         this.ofVignette = Config.limit(this.ofVignette, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
+                     {
+                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
+                         this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                     }
+ 
+                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
+                     {
+                         this.ofChunkUpdatesDynamic = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofTime") && astring.length >= 2)
+                     {
+                         this.ofTime = Integer.valueOf(astring[1]).intValue();
+                         this.ofTime = Config.limit(this.ofTime, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofClearWater") && astring.length >= 2)
+                     {
+                         this.ofClearWater = Boolean.valueOf(astring[1]).booleanValue();
+                         this.updateWaterOpacity();
+                     }
+ 
+                     if (astring[0].equals("ofAaLevel") && astring.length >= 2)
+                     {
+                         this.ofAaLevel = Integer.valueOf(astring[1]).intValue();
+                         this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+                     }
+ 
+                     if (astring[0].equals("ofAfLevel") && astring.length >= 2)
+                     {
+                         this.ofAfLevel = Integer.valueOf(astring[1]).intValue();
+                         this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+                     }
+ 
+                     if (astring[0].equals("ofProfiler") && astring.length >= 2)
+                     {
+                         this.ofProfiler = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofBetterSnow") && astring.length >= 2)
+                     {
+                         this.ofBetterSnow = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSwampColors") && astring.length >= 2)
+                     {
+                         this.ofSwampColors = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofRandomMobs") && astring.length >= 2)
+                     {
+                         this.ofRandomMobs = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothBiomes") && astring.length >= 2)
+                     {
+                         this.ofSmoothBiomes = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomFonts") && astring.length >= 2)
+                     {
+                         this.ofCustomFonts = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomColors") && astring.length >= 2)
+                     {
+                         this.ofCustomColors = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomItems") && astring.length >= 2)
+                     {
+                         this.ofCustomItems = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomSky") && astring.length >= 2)
+                     {
+                         this.ofCustomSky = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofShowCapes") && astring.length >= 2)
+                     {
+                         this.ofShowCapes = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofNaturalTextures") && astring.length >= 2)
+                     {
+                         this.ofNaturalTextures = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofLazyChunkLoading") && astring.length >= 2)
+                     {
+                         this.ofLazyChunkLoading = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDynamicFov") && astring.length >= 2)
+                     {
+                         this.ofDynamicFov = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDynamicLights") && astring.length >= 2)
+                     {
+                         this.ofDynamicLights = Integer.valueOf(astring[1]).intValue();
+                         this.ofDynamicLights = limit(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+                     }
+ 
+                     if (astring[0].equals("ofFullscreenMode") && astring.length >= 2)
+                     {
+                         this.ofFullscreenMode = astring[1];
+                     }
+ 
+                     if (astring[0].equals("ofFastMath") && astring.length >= 2)
+                     {
+                         this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
+                         MathHelper.fastMath = this.ofFastMath;
+                     }
+ 
+                     if (astring[0].equals("ofFastRender") && astring.length >= 2)
+                     {
+                         this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
+                     {
+                         this.ofTranslucentBlocks = Integer.valueOf(astring[1]).intValue();
+                         this.ofTranslucentBlocks = Config.limit(this.ofTranslucentBlocks, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("key_" + this.ofKeyBindZoom.getKeyDescription()))
+                     {
+                         this.ofKeyBindZoom.setKeyCode(Integer.parseInt(astring[1]));
+                     }
+                 }
+                 catch (Exception exception)
+                 {
+                     Config.dbg("Skipping bad option: " + s);
+                     exception.printStackTrace();
+                 }
+             }
+ 
+             KeyBinding.resetKeyBindingArrayAndHash();
+             bufferedreader.close();
+         }
+         catch (Exception exception1)
+         {
+             Config.warn("Failed to load options");
+             exception1.printStackTrace();
+         }
+     }
+ 
+     public void saveOfOptions()
+     {
+         try
+         {
+             PrintWriter printwriter = new PrintWriter(new FileWriter(this.optionsFileOF));
+             printwriter.println("ofRenderDistanceChunks:" + this.renderDistanceChunks);
+             printwriter.println("ofFogType:" + this.ofFogType);
+             printwriter.println("ofFogStart:" + this.ofFogStart);
+             printwriter.println("ofMipmapType:" + this.ofMipmapType);
+             printwriter.println("ofOcclusionFancy:" + this.ofOcclusionFancy);
+             printwriter.println("ofSmoothFps:" + this.ofSmoothFps);
+             printwriter.println("ofSmoothWorld:" + this.ofSmoothWorld);
+             printwriter.println("ofAoLevel:" + this.ofAoLevel);
+             printwriter.println("ofClouds:" + this.ofClouds);
+             printwriter.println("ofCloudsHeight:" + this.ofCloudsHeight);
+             printwriter.println("ofTrees:" + this.ofTrees);
+             printwriter.println("ofDroppedItems:" + this.ofDroppedItems);
+             printwriter.println("ofRain:" + this.ofRain);
+             printwriter.println("ofAnimatedWater:" + this.ofAnimatedWater);
+             printwriter.println("ofAnimatedLava:" + this.ofAnimatedLava);
+             printwriter.println("ofAnimatedFire:" + this.ofAnimatedFire);
+             printwriter.println("ofAnimatedPortal:" + this.ofAnimatedPortal);
+             printwriter.println("ofAnimatedRedstone:" + this.ofAnimatedRedstone);
+             printwriter.println("ofAnimatedExplosion:" + this.ofAnimatedExplosion);
+             printwriter.println("ofAnimatedFlame:" + this.ofAnimatedFlame);
+             printwriter.println("ofAnimatedSmoke:" + this.ofAnimatedSmoke);
+             printwriter.println("ofVoidParticles:" + this.ofVoidParticles);
+             printwriter.println("ofWaterParticles:" + this.ofWaterParticles);
+             printwriter.println("ofPortalParticles:" + this.ofPortalParticles);
+             printwriter.println("ofPotionParticles:" + this.ofPotionParticles);
+             printwriter.println("ofFireworkParticles:" + this.ofFireworkParticles);
+             printwriter.println("ofDrippingWaterLava:" + this.ofDrippingWaterLava);
+             printwriter.println("ofAnimatedTerrain:" + this.ofAnimatedTerrain);
+             printwriter.println("ofAnimatedTextures:" + this.ofAnimatedTextures);
+             printwriter.println("ofRainSplash:" + this.ofRainSplash);
+             printwriter.println("ofLagometer:" + this.ofLagometer);
+             printwriter.println("ofShowFps:" + this.ofShowFps);
+             printwriter.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
+             printwriter.println("ofBetterGrass:" + this.ofBetterGrass);
+             printwriter.println("ofConnectedTextures:" + this.ofConnectedTextures);
+             printwriter.println("ofWeather:" + this.ofWeather);
+             printwriter.println("ofSky:" + this.ofSky);
+             printwriter.println("ofStars:" + this.ofStars);
+             printwriter.println("ofSunMoon:" + this.ofSunMoon);
+             printwriter.println("ofVignette:" + this.ofVignette);
+             printwriter.println("ofChunkUpdates:" + this.ofChunkUpdates);
+             printwriter.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
+             printwriter.println("ofTime:" + this.ofTime);
+             printwriter.println("ofClearWater:" + this.ofClearWater);
+             printwriter.println("ofAaLevel:" + this.ofAaLevel);
+             printwriter.println("ofAfLevel:" + this.ofAfLevel);
+             printwriter.println("ofProfiler:" + this.ofProfiler);
+             printwriter.println("ofBetterSnow:" + this.ofBetterSnow);
+             printwriter.println("ofSwampColors:" + this.ofSwampColors);
+             printwriter.println("ofRandomMobs:" + this.ofRandomMobs);
+             printwriter.println("ofSmoothBiomes:" + this.ofSmoothBiomes);
+             printwriter.println("ofCustomFonts:" + this.ofCustomFonts);
+             printwriter.println("ofCustomColors:" + this.ofCustomColors);
+             printwriter.println("ofCustomItems:" + this.ofCustomItems);
+             printwriter.println("ofCustomSky:" + this.ofCustomSky);
+             printwriter.println("ofShowCapes:" + this.ofShowCapes);
+             printwriter.println("ofNaturalTextures:" + this.ofNaturalTextures);
+             printwriter.println("ofLazyChunkLoading:" + this.ofLazyChunkLoading);
+             printwriter.println("ofDynamicFov:" + this.ofDynamicFov);
+             printwriter.println("ofDynamicLights:" + this.ofDynamicLights);
+             printwriter.println("ofFullscreenMode:" + this.ofFullscreenMode);
+             printwriter.println("ofFastMath:" + this.ofFastMath);
+             printwriter.println("ofFastRender:" + this.ofFastRender);
+             printwriter.println("ofTranslucentBlocks:" + this.ofTranslucentBlocks);
+             printwriter.println("key_" + this.ofKeyBindZoom.getKeyDescription() + ":" + this.ofKeyBindZoom.getKeyCode());
+             printwriter.close();
+         }
+         catch (Exception exception)
+         {
+             Config.warn("Failed to save options");
+             exception.printStackTrace();
+         }
+     }
+ 
+     private void updateRenderClouds()
+     {
+         switch (this.ofClouds)
+         {
+             case 1:
+                 this.clouds = 1;
+                 break;
+ 
+             case 2:
+                 this.clouds = 2;
+                 break;
+ 
+             case 3:
+                 this.clouds = 0;
+                 break;
+ 
+             default:
+                 if (this.fancyGraphics)
+                 {
+                     this.clouds = 2;
+                 }
+                 else
+                 {
+                     this.clouds = 1;
+                 }
+         }
+     }
+ 
+     public void resetSettings()
+     {
+         this.renderDistanceChunks = 8;
+         this.viewBobbing = true;
+         this.anaglyph = false;
+         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+         this.enableVsync = false;
+         this.updateVSync();
+         this.mipmapLevels = 4;
+         this.fancyGraphics = true;
+         this.ambientOcclusion = 2;
+         this.clouds = 2;
+         this.fovSetting = 70.0F;
+         this.gammaSetting = 0.0F;
+         this.guiScale = 0;
+         this.particleSetting = 0;
+         this.heldItemTooltips = true;
+         this.useVbo = false;
+         this.allowBlockAlternatives = true;
+         this.forceUnicodeFont = false;
+         this.ofFogType = 1;
+         this.ofFogStart = 0.8F;
+         this.ofMipmapType = 0;
+         this.ofOcclusionFancy = false;
+         this.ofSmoothFps = false;
+         Config.updateAvailableProcessors();
+         this.ofSmoothWorld = Config.isSingleProcessor();
+         this.ofLazyChunkLoading = Config.isSingleProcessor();
+         this.ofFastMath = false;
+         this.ofFastRender = false;
+         this.ofTranslucentBlocks = 0;
+         this.ofDynamicFov = true;
+         this.ofDynamicLights = 3;
+         this.ofAoLevel = 1.0F;
+         this.ofAaLevel = 0;
+         this.ofAfLevel = 1;
+         this.ofClouds = 0;
+         this.ofCloudsHeight = 0.0F;
+         this.ofTrees = 0;
+         this.ofRain = 0;
+         this.ofBetterGrass = 3;
+         this.ofAutoSaveTicks = 4000;
+         this.ofLagometer = false;
+         this.ofShowFps = false;
+         this.ofProfiler = false;
+         this.ofWeather = true;
+         this.ofSky = true;
+         this.ofStars = true;
+         this.ofSunMoon = true;
+         this.ofVignette = 0;
+         this.ofChunkUpdates = 1;
+         this.ofChunkUpdatesDynamic = false;
+         this.ofTime = 0;
+         this.ofClearWater = false;
+         this.ofBetterSnow = false;
+         this.ofFullscreenMode = "Default";
+         this.ofSwampColors = true;
+         this.ofRandomMobs = true;
+         this.ofSmoothBiomes = true;
+         this.ofCustomFonts = true;
+         this.ofCustomColors = true;
+         this.ofCustomItems = true;
+         this.ofCustomSky = true;
+         this.ofShowCapes = true;
+         this.ofConnectedTextures = 2;
+         this.ofNaturalTextures = false;
+         this.ofAnimatedWater = 0;
+         this.ofAnimatedLava = 0;
+         this.ofAnimatedFire = true;
+         this.ofAnimatedPortal = true;
+         this.ofAnimatedRedstone = true;
+         this.ofAnimatedExplosion = true;
+         this.ofAnimatedFlame = true;
+         this.ofAnimatedSmoke = true;
+         this.ofVoidParticles = true;
+         this.ofWaterParticles = true;
+         this.ofRainSplash = true;
+         this.ofPortalParticles = true;
+         this.ofPotionParticles = true;
+         this.ofFireworkParticles = true;
+         this.ofDrippingWaterLava = true;
+         this.ofAnimatedTerrain = true;
+         this.ofAnimatedTextures = true;
+         Shaders.setShaderPack(Shaders.packNameNone);
+         Shaders.configAntialiasingLevel = 0;
+         Shaders.uninit();
+         Shaders.storeConfig();
+         this.updateWaterOpacity();
+         this.mc.refreshResources();
+         this.saveOptions();
+     }
+ 
+     public void updateVSync()
+     {
+         Display.setVSyncEnabled(this.enableVsync);
+     }
+ 
+     private void updateWaterOpacity()
+     {
+         if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
+         {
+             Config.waterOpacityChanged = true;
+         }
+ 
+         ClearWater.updateWaterOpacity(this, this.mc.theWorld);
+     }
+ 
+     public void setAllAnimations(boolean p_setAllAnimations_1_)
+     {
+         int i = p_setAllAnimations_1_ ? 0 : 2;
+         this.ofAnimatedWater = i;
+         this.ofAnimatedLava = i;
+         this.ofAnimatedFire = p_setAllAnimations_1_;
+         this.ofAnimatedPortal = p_setAllAnimations_1_;
+         this.ofAnimatedRedstone = p_setAllAnimations_1_;
+         this.ofAnimatedExplosion = p_setAllAnimations_1_;
+         this.ofAnimatedFlame = p_setAllAnimations_1_;
+         this.ofAnimatedSmoke = p_setAllAnimations_1_;
+         this.ofVoidParticles = p_setAllAnimations_1_;
+         this.ofWaterParticles = p_setAllAnimations_1_;
+         this.ofRainSplash = p_setAllAnimations_1_;
+         this.ofPortalParticles = p_setAllAnimations_1_;
+         this.ofPotionParticles = p_setAllAnimations_1_;
+         this.ofFireworkParticles = p_setAllAnimations_1_;
+         this.particleSetting = p_setAllAnimations_1_ ? 0 : 2;
+         this.ofDrippingWaterLava = p_setAllAnimations_1_;
+         this.ofAnimatedTerrain = p_setAllAnimations_1_;
+         this.ofAnimatedTextures = p_setAllAnimations_1_;
+     }
+ 
+     private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
+     {
+         int i = indexOf(p_nextValue_0_, p_nextValue_1_);
+ 
+         if (i < 0)
+         {
+             return p_nextValue_1_[0];
+         }
+         else
+         {
+             ++i;
+ 
+             if (i >= p_nextValue_1_.length)
+             {
+                 i = 0;
+             }
+ 
+             return p_nextValue_1_[i];
+         }
+     }
+ 
+     private static int limit(int p_limit_0_, int[] p_limit_1_)
+     {
+         int i = indexOf(p_limit_0_, p_limit_1_);
+         return i < 0 ? p_limit_1_[0] : p_limit_0_;
+     }
+ 
+     private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
+     {
+         for (int i = 0; i < p_indexOf_1_.length; ++i)
+         {
+             if (p_indexOf_1_[i] == p_indexOf_0_)
+             {
+                 return i;
+             }
+         }
+ 
+         return -1;
+     }
+ 
+     static final class GameSettings$2
+     {
+         static final int[] field_151477_a = new int[GameSettings.Options.values().length];
+         private static final String __OBFID = "CL_00000652";
+ 
+         static
+         {
+             try
+             {
+                 field_151477_a[GameSettings.Options.INVERT_MOUSE.ordinal()] = 1;
+             }
+             catch (NoSuchFieldError var17)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.VIEW_BOBBING.ordinal()] = 2;
+             }
+             catch (NoSuchFieldError var16)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.ANAGLYPH.ordinal()] = 3;
+             }
+             catch (NoSuchFieldError var15)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.FBO_ENABLE.ordinal()] = 4;
+             }
+             catch (NoSuchFieldError var14)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.CHAT_COLOR.ordinal()] = 5;
+             }
+             catch (NoSuchFieldError var13)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.CHAT_LINKS.ordinal()] = 6;
+             }
+             catch (NoSuchFieldError var12)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.CHAT_LINKS_PROMPT.ordinal()] = 7;
+             }
+             catch (NoSuchFieldError var11)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.SNOOPER_ENABLED.ordinal()] = 8;
+             }
+             catch (NoSuchFieldError var10)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.USE_FULLSCREEN.ordinal()] = 9;
+             }
+             catch (NoSuchFieldError var9)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.ENABLE_VSYNC.ordinal()] = 10;
+             }
+             catch (NoSuchFieldError var8)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.USE_VBO.ordinal()] = 11;
+             }
+             catch (NoSuchFieldError var7)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.TOUCHSCREEN.ordinal()] = 12;
+             }
+             catch (NoSuchFieldError var6)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.STREAM_SEND_METADATA.ordinal()] = 13;
+             }
+             catch (NoSuchFieldError var5)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.FORCE_UNICODE_FONT.ordinal()] = 14;
+             }
+             catch (NoSuchFieldError var4)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.BLOCK_ALTERNATIVES.ordinal()] = 15;
+             }
+             catch (NoSuchFieldError var3)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.REDUCED_DEBUG_INFO.ordinal()] = 16;
+             }
+             catch (NoSuchFieldError var2)
+             {
+                 ;
+             }
+ 
+             try
+             {
+                 field_151477_a[GameSettings.Options.ENTITY_SHADOWS.ordinal()] = 17;
+             }
+             catch (NoSuchFieldError var1)
+             {
+                 ;
+             }
+         }
+     }
+ 
      public static enum Options
      {
!         INVERT_MOUSE("INVERT_MOUSE", 0, "options.invertMouse", false, true),
!         SENSITIVITY("SENSITIVITY", 1, "options.sensitivity", true, false),
!         FOV("FOV", 2, "options.fov", true, false, 30.0F, 110.0F, 1.0F),
!         GAMMA("GAMMA", 3, "options.gamma", true, false),
!         SATURATION("SATURATION", 4, "options.saturation", true, false),
!         RENDER_DISTANCE("RENDER_DISTANCE", 5, "options.renderDistance", true, false, 2.0F, 16.0F, 1.0F),
!         VIEW_BOBBING("VIEW_BOBBING", 6, "options.viewBobbing", false, true),
!         ANAGLYPH("ANAGLYPH", 7, "options.anaglyph", false, true),
!         FRAMERATE_LIMIT("FRAMERATE_LIMIT", 8, "options.framerateLimit", true, false, 0.0F, 260.0F, 5.0F),
!         FBO_ENABLE("FBO_ENABLE", 9, "options.fboEnable", false, true),
!         RENDER_CLOUDS("RENDER_CLOUDS", 10, "options.renderClouds", false, false),
!         GRAPHICS("GRAPHICS", 11, "options.graphics", false, false),
!         AMBIENT_OCCLUSION("AMBIENT_OCCLUSION", 12, "options.ao", false, false),
!         GUI_SCALE("GUI_SCALE", 13, "options.guiScale", false, false),
!         PARTICLES("PARTICLES", 14, "options.particles", false, false),
!         CHAT_VISIBILITY("CHAT_VISIBILITY", 15, "options.chat.visibility", false, false),
!         CHAT_COLOR("CHAT_COLOR", 16, "options.chat.color", false, true),
!         CHAT_LINKS("CHAT_LINKS", 17, "options.chat.links", false, true),
!         CHAT_OPACITY("CHAT_OPACITY", 18, "options.chat.opacity", true, false),
!         CHAT_LINKS_PROMPT("CHAT_LINKS_PROMPT", 19, "options.chat.links.prompt", false, true),
!         SNOOPER_ENABLED("SNOOPER_ENABLED", 20, "options.snooper", false, true),
!         USE_FULLSCREEN("USE_FULLSCREEN", 21, "options.fullscreen", false, true),
!         ENABLE_VSYNC("ENABLE_VSYNC", 22, "options.vsync", false, true),
!         USE_VBO("USE_VBO", 23, "options.vbo", false, true),
!         TOUCHSCREEN("TOUCHSCREEN", 24, "options.touchscreen", false, true),
!         CHAT_SCALE("CHAT_SCALE", 25, "options.chat.scale", true, false),
!         CHAT_WIDTH("CHAT_WIDTH", 26, "options.chat.width", true, false),
!         CHAT_HEIGHT_FOCUSED("CHAT_HEIGHT_FOCUSED", 27, "options.chat.height.focused", true, false),
!         CHAT_HEIGHT_UNFOCUSED("CHAT_HEIGHT_UNFOCUSED", 28, "options.chat.height.unfocused", true, false),
!         MIPMAP_LEVELS("MIPMAP_LEVELS", 29, "options.mipmapLevels", true, false, 0.0F, 4.0F, 1.0F),
!         FORCE_UNICODE_FONT("FORCE_UNICODE_FONT", 30, "options.forceUnicodeFont", false, true),
!         STREAM_BYTES_PER_PIXEL("STREAM_BYTES_PER_PIXEL", 31, "options.stream.bytesPerPixel", true, false),
!         STREAM_VOLUME_MIC("STREAM_VOLUME_MIC", 32, "options.stream.micVolumne", true, false),
!         STREAM_VOLUME_SYSTEM("STREAM_VOLUME_SYSTEM", 33, "options.stream.systemVolume", true, false),
!         STREAM_KBPS("STREAM_KBPS", 34, "options.stream.kbps", true, false),
!         STREAM_FPS("STREAM_FPS", 35, "options.stream.fps", true, false),
!         STREAM_COMPRESSION("STREAM_COMPRESSION", 36, "options.stream.compression", false, false),
!         STREAM_SEND_METADATA("STREAM_SEND_METADATA", 37, "options.stream.sendMetadata", false, true),
!         STREAM_CHAT_ENABLED("STREAM_CHAT_ENABLED", 38, "options.stream.chat.enabled", false, false),
!         STREAM_CHAT_USER_FILTER("STREAM_CHAT_USER_FILTER", 39, "options.stream.chat.userFilter", false, false),
!         STREAM_MIC_TOGGLE_BEHAVIOR("STREAM_MIC_TOGGLE_BEHAVIOR", 40, "options.stream.micToggleBehavior", false, false),
!         BLOCK_ALTERNATIVES("BLOCK_ALTERNATIVES", 41, "options.blockAlternatives", false, true),
!         REDUCED_DEBUG_INFO("REDUCED_DEBUG_INFO", 42, "options.reducedDebugInfo", false, true),
!         ENTITY_SHADOWS("ENTITY_SHADOWS", 43, "options.entityShadows", false, true),
!         FOG_FANCY("", 999, "of.options.FOG_FANCY", false, false),
!         FOG_START("", 999, "of.options.FOG_START", false, false),
!         MIPMAP_TYPE("", 999, "of.options.MIPMAP_TYPE", true, false, 0.0F, 3.0F, 1.0F),
!         SMOOTH_FPS("", 999, "of.options.SMOOTH_FPS", false, false),
!         CLOUDS("", 999, "of.options.CLOUDS", false, false),
!         CLOUD_HEIGHT("", 999, "of.options.CLOUD_HEIGHT", true, false),
!         TREES("", 999, "of.options.TREES", false, false),
!         RAIN("", 999, "of.options.RAIN", false, false),
!         ANIMATED_WATER("", 999, "of.options.ANIMATED_WATER", false, false),
!         ANIMATED_LAVA("", 999, "of.options.ANIMATED_LAVA", false, false),
!         ANIMATED_FIRE("", 999, "of.options.ANIMATED_FIRE", false, false),
!         ANIMATED_PORTAL("", 999, "of.options.ANIMATED_PORTAL", false, false),
!         AO_LEVEL("", 999, "of.options.AO_LEVEL", true, false),
!         LAGOMETER("", 999, "of.options.LAGOMETER", false, false),
!         SHOW_FPS("", 999, "of.options.SHOW_FPS", false, false),
!         AUTOSAVE_TICKS("", 999, "of.options.AUTOSAVE_TICKS", false, false),
!         BETTER_GRASS("", 999, "of.options.BETTER_GRASS", false, false),
!         ANIMATED_REDSTONE("", 999, "of.options.ANIMATED_REDSTONE", false, false),
!         ANIMATED_EXPLOSION("", 999, "of.options.ANIMATED_EXPLOSION", false, false),
!         ANIMATED_FLAME("", 999, "of.options.ANIMATED_FLAME", false, false),
!         ANIMATED_SMOKE("", 999, "of.options.ANIMATED_SMOKE", false, false),
!         WEATHER("", 999, "of.options.WEATHER", false, false),
!         SKY("", 999, "of.options.SKY", false, false),
!         STARS("", 999, "of.options.STARS", false, false),
!         SUN_MOON("", 999, "of.options.SUN_MOON", false, false),
!         VIGNETTE("", 999, "of.options.VIGNETTE", false, false),
!         CHUNK_UPDATES("", 999, "of.options.CHUNK_UPDATES", false, false),
!         CHUNK_UPDATES_DYNAMIC("", 999, "of.options.CHUNK_UPDATES_DYNAMIC", false, false),
!         TIME("", 999, "of.options.TIME", false, false),
!         CLEAR_WATER("", 999, "of.options.CLEAR_WATER", false, false),
!         SMOOTH_WORLD("", 999, "of.options.SMOOTH_WORLD", false, false),
!         VOID_PARTICLES("", 999, "of.options.VOID_PARTICLES", false, false),
!         WATER_PARTICLES("", 999, "of.options.WATER_PARTICLES", false, false),
!         RAIN_SPLASH("", 999, "of.options.RAIN_SPLASH", false, false),
!         PORTAL_PARTICLES("", 999, "of.options.PORTAL_PARTICLES", false, false),
!         POTION_PARTICLES("", 999, "of.options.POTION_PARTICLES", false, false),
!         FIREWORK_PARTICLES("", 999, "of.options.FIREWORK_PARTICLES", false, false),
!         PROFILER("", 999, "of.options.PROFILER", false, false),
!         DRIPPING_WATER_LAVA("", 999, "of.options.DRIPPING_WATER_LAVA", false, false),
!         BETTER_SNOW("", 999, "of.options.BETTER_SNOW", false, false),
!         FULLSCREEN_MODE("", 999, "of.options.FULLSCREEN_MODE", false, false),
!         ANIMATED_TERRAIN("", 999, "of.options.ANIMATED_TERRAIN", false, false),
!         SWAMP_COLORS("", 999, "of.options.SWAMP_COLORS", false, false),
!         RANDOM_MOBS("", 999, "of.options.RANDOM_MOBS", false, false),
!         SMOOTH_BIOMES("", 999, "of.options.SMOOTH_BIOMES", false, false),
!         CUSTOM_FONTS("", 999, "of.options.CUSTOM_FONTS", false, false),
!         CUSTOM_COLORS("", 999, "of.options.CUSTOM_COLORS", false, false),
!         SHOW_CAPES("", 999, "of.options.SHOW_CAPES", false, false),
!         CONNECTED_TEXTURES("", 999, "of.options.CONNECTED_TEXTURES", false, false),
!         CUSTOM_ITEMS("", 999, "of.options.CUSTOM_ITEMS", false, false),
!         AA_LEVEL("", 999, "of.options.AA_LEVEL", true, false, 0.0F, 16.0F, 1.0F),
!         AF_LEVEL("", 999, "of.options.AF_LEVEL", true, false, 1.0F, 16.0F, 1.0F),
!         ANIMATED_TEXTURES("", 999, "of.options.ANIMATED_TEXTURES", false, false),
!         NATURAL_TEXTURES("", 999, "of.options.NATURAL_TEXTURES", false, false),
!         HELD_ITEM_TOOLTIPS("", 999, "of.options.HELD_ITEM_TOOLTIPS", false, false),
!         DROPPED_ITEMS("", 999, "of.options.DROPPED_ITEMS", false, false),
!         LAZY_CHUNK_LOADING("", 999, "of.options.LAZY_CHUNK_LOADING", false, false),
!         CUSTOM_SKY("", 999, "of.options.CUSTOM_SKY", false, false),
!         FAST_MATH("", 999, "of.options.FAST_MATH", false, false),
!         FAST_RENDER("", 999, "of.options.FAST_RENDER", false, false),
!         TRANSLUCENT_BLOCKS("", 999, "of.options.TRANSLUCENT_BLOCKS", false, false),
!         DYNAMIC_FOV("", 999, "of.options.DYNAMIC_FOV", false, false),
!         DYNAMIC_LIGHTS("", 999, "of.options.DYNAMIC_LIGHTS", false, false);
  
          private final boolean enumFloat;
          private final boolean enumBoolean;
***************
*** 1276,1281 ****
--- 3315,3322 ----
          private final float valueStep;
          private float valueMin;
          private float valueMax;
+         private static final GameSettings.Options[] $VALUES = new GameSettings.Options[]{INVERT_MOUSE, SENSITIVITY, FOV, GAMMA, SATURATION, RENDER_DISTANCE, VIEW_BOBBING, ANAGLYPH, FRAMERATE_LIMIT, FBO_ENABLE, RENDER_CLOUDS, GRAPHICS, AMBIENT_OCCLUSION, GUI_SCALE, PARTICLES, CHAT_VISIBILITY, CHAT_COLOR, CHAT_LINKS, CHAT_OPACITY, CHAT_LINKS_PROMPT, SNOOPER_ENABLED, USE_FULLSCREEN, ENABLE_VSYNC, USE_VBO, TOUCHSCREEN, CHAT_SCALE, CHAT_WIDTH, CHAT_HEIGHT_FOCUSED, CHAT_HEIGHT_UNFOCUSED, MIPMAP_LEVELS, FORCE_UNICODE_FONT, STREAM_BYTES_PER_PIXEL, STREAM_VOLUME_MIC, STREAM_VOLUME_SYSTEM, STREAM_KBPS, STREAM_FPS, STREAM_COMPRESSION, STREAM_SEND_METADATA, STREAM_CHAT_ENABLED, STREAM_CHAT_USER_FILTER, STREAM_MIC_TOGGLE_BEHAVIOR, BLOCK_ALTERNATIVES, REDUCED_DEBUG_INFO, ENTITY_SHADOWS};
+         private static final String __OBFID = "CL_00000653";
  
          public static GameSettings.Options getEnumOptions(int p_74379_0_)
          {
***************
*** 1290,1308 ****
              return null;
          }
  
!         private Options(String p_i1015_3_, boolean p_i1015_4_, boolean p_i1015_5_)
          {
!             this(p_i1015_3_, p_i1015_4_, p_i1015_5_, 0.0F, 1.0F, 0.0F);
          }
  
!         private Options(String p_i45004_3_, boolean p_i45004_4_, boolean p_i45004_5_, float p_i45004_6_, float p_i45004_7_, float p_i45004_8_)
          {
!             this.enumString = p_i45004_3_;
!             this.enumFloat = p_i45004_4_;
!             this.enumBoolean = p_i45004_5_;
!             this.valueMin = p_i45004_6_;
!             this.valueMax = p_i45004_7_;
!             this.valueStep = p_i45004_8_;
          }
  
          public boolean getEnumFloat()
--- 3331,3349 ----
              return null;
          }
  
!         private Options(String p_i0_3_, int p_i0_4_, String p_i0_5_, boolean p_i0_6_, boolean p_i0_7_)
          {
!             this(p_i0_3_, p_i0_4_, p_i0_5_, p_i0_6_, p_i0_7_, 0.0F, 1.0F, 0.0F);
          }
  
!         private Options(String p_i1_3_, int p_i1_4_, String p_i1_5_, boolean p_i1_6_, boolean p_i1_7_, float p_i1_8_, float p_i1_9_, float p_i1_10_)
          {
!             this.enumString = p_i1_5_;
!             this.enumFloat = p_i1_6_;
!             this.enumBoolean = p_i1_7_;
!             this.valueMin = p_i1_8_;
!             this.valueMax = p_i1_9_;
!             this.valueStep = p_i1_10_;
          }
  
          public boolean getEnumFloat()
diff -rc ./command/CommandHandler.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/command/CommandHandler.java
*** ./command/CommandHandler.java	2021-04-03 11:27:29.759294000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/command/CommandHandler.java	2021-03-24 10:47:21.383936900 -0700
***************
*** 3,8 ****
--- 3,11 ----
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import com.google.common.collect.Sets;
+ 
+ import clientname.command.CommandManager;
+ 
  import java.util.List;
  import java.util.Map;
  import java.util.Set;
***************
*** 153,158 ****
--- 156,163 ----
          {
              List<String> list = Lists.<String>newArrayList();
  
+             CommandManager.getInstance().onTab(s, list);
+             
              for (Entry<String, ICommand> entry : this.commandMap.entrySet())
              {
                  if (CommandBase.doesStringStartWith(s, (String)entry.getKey()) && ((ICommand)entry.getValue()).canCommandSenderUseCommand(sender))
diff -rc ./crash/CrashReport.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/crash/CrashReport.java
*** ./crash/CrashReport.java	2021-04-03 11:27:30.519240000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/crash/CrashReport.java	2019-05-30 22:29:22.258442000 -0700
***************
*** 12,19 ****
--- 12,24 ----
  import java.util.Date;
  import java.util.List;
  import java.util.concurrent.Callable;
+ 
  import net.minecraft.util.ReportedException;
  import net.minecraft.world.gen.layer.IntCache;
+ import optifine.CrashReportCpu;
+ import optifine.CrashReporter;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.commons.lang3.ArrayUtils;
  import org.apache.logging.log4j.LogManager;
***************
*** 31,42 ****
  
      /** Category of crash */
      private final CrashReportCategory theReportCategory = new CrashReportCategory(this, "System Details");
!     private final List<CrashReportCategory> crashReportSections = Lists.<CrashReportCategory>newArrayList();
  
      /** File of crash report. */
      private File crashReportFile;
      private boolean field_85059_f = true;
      private StackTraceElement[] stacktrace = new StackTraceElement[0];
  
      public CrashReport(String descriptionIn, Throwable causeThrowable)
      {
--- 36,51 ----
  
      /** Category of crash */
      private final CrashReportCategory theReportCategory = new CrashReportCategory(this, "System Details");
! 
!     /** Holds the keys and values of all crash report sections. */
!     private final List crashReportSections = Lists.newArrayList();
  
      /** File of crash report. */
      private File crashReportFile;
      private boolean field_85059_f = true;
      private StackTraceElement[] stacktrace = new StackTraceElement[0];
+     private static final String __OBFID = "CL_00000990";
+     private boolean reported = false;
  
      public CrashReport(String descriptionIn, Throwable causeThrowable)
      {
***************
*** 51,70 ****
       */
      private void populateEnvironment()
      {
!         this.theReportCategory.addCrashSectionCallable("Minecraft Version", new Callable<String>()
          {
              public String call()
              {
                  return "1.8.8";
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Operating System", new Callable<String>()
          {
              public String call()
              {
                  return System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version");
              }
          });
          this.theReportCategory.addCrashSectionCallable("Java Version", new Callable<String>()
          {
              public String call()
--- 60,82 ----
       */
      private void populateEnvironment()
      {
!         this.theReportCategory.addCrashSectionCallable("Minecraft Version", new Callable()
          {
+             private static final String __OBFID = "CL_00001197";
              public String call()
              {
                  return "1.8.8";
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Operating System", new Callable()
          {
+             private static final String __OBFID = "CL_00001222";
              public String call()
              {
                  return System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version");
              }
          });
+         this.theReportCategory.addCrashSectionCallable("CPU", new CrashReportCpu());
          this.theReportCategory.addCrashSectionCallable("Java Version", new Callable<String>()
          {
              public String call()
***************
*** 72,86 ****
                  return System.getProperty("java.version") + ", " + System.getProperty("java.vendor");
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Java VM Version", new Callable<String>()
          {
              public String call()
              {
                  return System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor");
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Memory", new Callable<String>()
          {
              public String call()
              {
                  Runtime runtime = Runtime.getRuntime();
--- 84,100 ----
                  return System.getProperty("java.version") + ", " + System.getProperty("java.vendor");
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Java VM Version", new Callable()
          {
+             private static final String __OBFID = "CL_00001275";
              public String call()
              {
                  return System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor");
              }
          });
!         this.theReportCategory.addCrashSectionCallable("Memory", new Callable()
          {
+             private static final String __OBFID = "CL_00001302";
              public String call()
              {
                  Runtime runtime = Runtime.getRuntime();
***************
*** 93,110 ****
                  return k + " bytes (" + j1 + " MB) / " + j + " bytes (" + i1 + " MB) up to " + i + " bytes (" + l + " MB)";
              }
          });
!         this.theReportCategory.addCrashSectionCallable("JVM Flags", new Callable<String>()
          {
              public String call()
              {
                  RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
!                 List<String> list = runtimemxbean.getInputArguments();
                  int i = 0;
                  StringBuilder stringbuilder = new StringBuilder();
  
!                 for (String s : list)
                  {
!                     if (s.startsWith("-X"))
                      {
                          if (i++ > 0)
                          {
--- 107,125 ----
                  return k + " bytes (" + j1 + " MB) / " + j + " bytes (" + i1 + " MB) up to " + i + " bytes (" + l + " MB)";
              }
          });
!         this.theReportCategory.addCrashSectionCallable("JVM Flags", new Callable()
          {
+             private static final String __OBFID = "CL_00001329";
              public String call()
              {
                  RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
!                 List list = runtimemxbean.getInputArguments();
                  int i = 0;
                  StringBuilder stringbuilder = new StringBuilder();
  
!                 for (Object s : list)
                  {
!                     if (((String) s).startsWith("-X"))
                      {
                          if (i++ > 0)
                          {
***************
*** 118,130 ****
                  return String.format("%d total; %s", new Object[] {Integer.valueOf(i), stringbuilder.toString()});
              }
          });
!         this.theReportCategory.addCrashSectionCallable("IntCache", new Callable<String>()
          {
              public String call() throws Exception
              {
                  return IntCache.getCacheSizes();
              }
          });
      }
  
      /**
--- 133,152 ----
                  return String.format("%d total; %s", new Object[] {Integer.valueOf(i), stringbuilder.toString()});
              }
          });
!         this.theReportCategory.addCrashSectionCallable("IntCache", new Callable()
          {
+             private static final String __OBFID = "CL_00001355";
              public String call() throws Exception
              {
                  return IntCache.getCacheSizes();
              }
          });
+ 
+         if (Reflector.FMLCommonHandler_enhanceCrashReport.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+             Reflector.callString(object, Reflector.FMLCommonHandler_enhanceCrashReport, new Object[] {this, this.theReportCategory});
+         }
      }
  
      /**
***************
*** 150,156 ****
      {
          if ((this.stacktrace == null || this.stacktrace.length <= 0) && this.crashReportSections.size() > 0)
          {
!             this.stacktrace = (StackTraceElement[])ArrayUtils.subarray(((CrashReportCategory)this.crashReportSections.get(0)).getStackTrace(), 0, 1);
          }
  
          if (this.stacktrace != null && this.stacktrace.length > 0)
--- 172,178 ----
      {
          if ((this.stacktrace == null || this.stacktrace.length <= 0) && this.crashReportSections.size() > 0)
          {
!             this.stacktrace = (StackTraceElement[])((StackTraceElement[])ArrayUtils.subarray(((CrashReportCategory)this.crashReportSections.get(0)).getStackTrace(), 0, 1));
          }
  
          if (this.stacktrace != null && this.stacktrace.length > 0)
***************
*** 167,175 ****
              builder.append("\n");
          }
  
!         for (CrashReportCategory crashreportcategory : this.crashReportSections)
          {
!             crashreportcategory.appendToStringBuilder(builder);
              builder.append("\n\n");
          }
  
--- 189,197 ----
              builder.append("\n");
          }
  
!         for (Object crashreportcategory : this.crashReportSections)
          {
!             ((CrashReportCategory) crashreportcategory).appendToStringBuilder(builder);
              builder.append("\n\n");
          }
  
***************
*** 183,215 ****
      {
          StringWriter stringwriter = null;
          PrintWriter printwriter = null;
!         Throwable throwable = this.cause;
  
!         if (throwable.getMessage() == null)
          {
!             if (throwable instanceof NullPointerException)
              {
!                 throwable = new NullPointerException(this.description);
              }
!             else if (throwable instanceof StackOverflowError)
              {
!                 throwable = new StackOverflowError(this.description);
              }
!             else if (throwable instanceof OutOfMemoryError)
              {
!                 throwable = new OutOfMemoryError(this.description);
              }
  
!             throwable.setStackTrace(this.cause.getStackTrace());
          }
  
!         String s = throwable.toString();
  
          try
          {
              stringwriter = new StringWriter();
              printwriter = new PrintWriter(stringwriter);
!             throwable.printStackTrace(printwriter);
              s = stringwriter.toString();
          }
          finally
--- 205,237 ----
      {
          StringWriter stringwriter = null;
          PrintWriter printwriter = null;
!         Object object = this.cause;
  
!         if (((Throwable)object).getMessage() == null)
          {
!             if (object instanceof NullPointerException)
              {
!                 object = new NullPointerException(this.description);
              }
!             else if (object instanceof StackOverflowError)
              {
!                 object = new StackOverflowError(this.description);
              }
!             else if (object instanceof OutOfMemoryError)
              {
!                 object = new OutOfMemoryError(this.description);
              }
  
!             ((Throwable)object).setStackTrace(this.cause.getStackTrace());
          }
  
!         String s = ((Throwable)object).toString();
  
          try
          {
              stringwriter = new StringWriter();
              printwriter = new PrintWriter(stringwriter);
!             ((Throwable)object).printStackTrace(printwriter);
              s = stringwriter.toString();
          }
          finally
***************
*** 226,233 ****
--- 248,263 ----
       */
      public String getCompleteReport()
      {
+         if (!this.reported)
+         {
+             this.reported = true;
+             CrashReporter.onCrashReport(this, this.theReportCategory);
+         }
+ 
          StringBuilder stringbuilder = new StringBuilder();
          stringbuilder.append("---- Minecraft Crash Report ----\n");
+         Reflector.call(Reflector.BlamingTransformer_onCrash, new Object[] {stringbuilder});
+         Reflector.call(Reflector.CoreModManager_onCrash, new Object[] {stringbuilder});
          stringbuilder.append("// ");
          stringbuilder.append(getWittyComment());
          stringbuilder.append("\n\n");
diff -rc ./entity/EntityLiving.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/entity/EntityLiving.java
*** ./entity/EntityLiving.java	2021-04-03 11:27:31.021311000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/entity/EntityLiving.java	2019-05-30 22:29:23.048667000 -0700
***************
*** 10,15 ****
--- 10,16 ----
  import net.minecraft.entity.ai.attributes.AttributeModifier;
  import net.minecraft.entity.item.EntityItem;
  import net.minecraft.entity.monster.EntityGhast;
+ import net.minecraft.entity.monster.EntityMob;
  import net.minecraft.entity.monster.IMob;
  import net.minecraft.entity.passive.EntityTameable;
  import net.minecraft.entity.player.EntityPlayer;
***************
*** 35,40 ****
--- 36,45 ----
  import net.minecraft.world.EnumDifficulty;
  import net.minecraft.world.World;
  import net.minecraft.world.WorldServer;
+ import net.minecraft.world.biome.BiomeGenBase;
+ import optifine.BlockPosM;
+ import optifine.Config;
+ import optifine.Reflector;
  
  public abstract class EntityLiving extends EntityLivingBase
  {
***************
*** 75,80 ****
--- 80,89 ----
      private boolean isLeashed;
      private Entity leashedToEntity;
      private NBTTagCompound leashNBTTag;
+     private static final String __OBFID = "CL_00001550";
+     public int randomMobsId = 0;
+     public BiomeGenBase spawnBiome = null;
+     public BlockPos spawnPosition = null;
  
      public EntityLiving(World worldIn)
      {
***************
*** 92,97 ****
--- 101,110 ----
          {
              this.equipmentDropChances[i] = 0.085F;
          }
+ 
+         UUID uuid = this.getUniqueID();
+         long j = uuid.getLeastSignificantBits();
+         this.randomMobsId = (int)(j & 2147483647L);
      }
  
      protected void applyEntityAttributes()
***************
*** 150,161 ****
      public void setAttackTarget(EntityLivingBase entitylivingbaseIn)
      {
          this.attackTarget = entitylivingbaseIn;
      }
  
      /**
       * Returns true if this entity can attack entities of the specified class.
       */
!     public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
      {
          return cls != EntityGhast.class;
      }
--- 163,175 ----
      public void setAttackTarget(EntityLivingBase entitylivingbaseIn)
      {
          this.attackTarget = entitylivingbaseIn;
+         Reflector.callVoid(Reflector.ForgeHooks_onLivingSetAttackTarget, new Object[] {this, entitylivingbaseIn});
      }
  
      /**
       * Returns true if this entity can attack entities of the specified class.
       */
!     public boolean canAttackClass(Class cls)
      {
          return cls != EntityGhast.class;
      }
***************
*** 277,287 ****
       */
      public void onUpdate()
      {
!         super.onUpdate();
! 
!         if (!this.worldObj.isRemote)
          {
!             this.updateLeashedState();
          }
      }
  
--- 291,308 ----
       */
      public void onUpdate()
      {
!         if (Config.isSmoothWorld() && this.canSkipUpdate())
          {
!             this.onUpdateMinimal();
!         }
!         else
!         {
!             super.onUpdate();
! 
!             if (!this.worldObj.isRemote)
!             {
!                 this.updateLeashedState();
!             }
          }
      }
  
***************
*** 580,598 ****
       */
      protected void despawnEntity()
      {
          if (this.persistenceRequired)
          {
              this.entityAge = 0;
          }
          else
          {
!             Entity entity = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
  
!             if (entity != null)
              {
!                 double d0 = entity.posX - this.posX;
!                 double d1 = entity.posY - this.posY;
!                 double d2 = entity.posZ - this.posZ;
                  double d3 = d0 * d0 + d1 * d1 + d2 * d2;
  
                  if (this.canDespawn() && d3 > 16384.0D)
--- 601,634 ----
       */
      protected void despawnEntity()
      {
+         Object object = null;
+         Object object1 = Reflector.getFieldValue(Reflector.Event_Result_DEFAULT);
+         Object object2 = Reflector.getFieldValue(Reflector.Event_Result_DENY);
+ 
          if (this.persistenceRequired)
          {
              this.entityAge = 0;
          }
+         else if ((this.entityAge & 31) == 31 && (object = Reflector.call(Reflector.ForgeEventFactory_canEntityDespawn, new Object[] {this})) != object1)
+         {
+             if (object == object2)
+             {
+                 this.entityAge = 0;
+             }
+             else
+             {
+                 this.setDead();
+             }
+         }
          else
          {
!             EntityPlayer entityplayer = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
  
!             if (entityplayer != null)
              {
!                 double d0 = entityplayer.posX - this.posX;
!                 double d1 = entityplayer.posY - this.posY;
!                 double d2 = entityplayer.posZ - this.posZ;
                  double d3 = d0 * d0 + d1 * d1 + d2 * d2;
  
                  if (this.canDespawn() && d3 > 16384.0D)
***************
*** 663,684 ****
      public void faceEntity(Entity entityIn, float p_70625_2_, float p_70625_3_)
      {
          double d0 = entityIn.posX - this.posX;
!         double d2 = entityIn.posZ - this.posZ;
!         double d1;
  
          if (entityIn instanceof EntityLivingBase)
          {
              EntityLivingBase entitylivingbase = (EntityLivingBase)entityIn;
!             d1 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
          }
          else
          {
!             d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
          }
  
!         double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
!         float f = (float)(MathHelper.func_181159_b(d2, d0) * 180.0D / Math.PI) - 90.0F;
!         float f1 = (float)(-(MathHelper.func_181159_b(d1, d3) * 180.0D / Math.PI));
          this.rotationPitch = this.updateRotation(this.rotationPitch, f1, p_70625_3_);
          this.rotationYaw = this.updateRotation(this.rotationYaw, f, p_70625_2_);
      }
--- 699,720 ----
      public void faceEntity(Entity entityIn, float p_70625_2_, float p_70625_3_)
      {
          double d0 = entityIn.posX - this.posX;
!         double d1 = entityIn.posZ - this.posZ;
!         double d2;
  
          if (entityIn instanceof EntityLivingBase)
          {
              EntityLivingBase entitylivingbase = (EntityLivingBase)entityIn;
!             d2 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
          }
          else
          {
!             d2 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
          }
  
!         double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1);
!         float f = (float)(MathHelper.func_181159_b(d1, d0) * 180.0D / Math.PI) - 90.0F;
!         float f1 = (float)(-(MathHelper.func_181159_b(d2, d3) * 180.0D / Math.PI));
          this.rotationPitch = this.updateRotation(this.rotationPitch, f1, p_70625_3_);
          this.rotationYaw = this.updateRotation(this.rotationYaw, f, p_70625_2_);
      }
***************
*** 1108,1121 ****
                  }
              }
  
!             if (this.interact(playerIn))
!             {
!                 return true;
!             }
!             else
!             {
!                 return super.interactFirst(playerIn);
!             }
          }
      }
  
--- 1144,1150 ----
                  }
              }
  
!             return this.interact(playerIn) ? true : super.interactFirst(playerIn);
          }
      }
  
***************
*** 1258,1271 ****
              }
          }
  
!         if (itemStackIn != null && getArmorPosition(itemStackIn) != i && (i != 4 || !(itemStackIn.getItem() instanceof ItemBlock)))
          {
!             return false;
          }
          else
          {
!             this.setCurrentItemOrArmor(i, itemStackIn);
!             return true;
          }
      }
  
--- 1287,1300 ----
              }
          }
  
!         if (itemStackIn == null || getArmorPosition(itemStackIn) == i || i == 4 && itemStackIn.getItem() instanceof ItemBlock)
          {
!             this.setCurrentItemOrArmor(i, itemStackIn);
!             return true;
          }
          else
          {
!             return false;
          }
      }
  
***************
*** 1293,1302 ****
          return this.dataWatcher.getWatchableObjectByte(15) != 0;
      }
  
      public static enum SpawnPlacementType
      {
!         ON_GROUND,
!         IN_AIR,
!         IN_WATER;
      }
  }
--- 1322,1422 ----
          return this.dataWatcher.getWatchableObjectByte(15) != 0;
      }
  
+     /**
+      * Checks if this entity is inside of an opaque block
+      */
+     public boolean isEntityInsideOpaqueBlock()
+     {
+         if (this.noClip)
+         {
+             return false;
+         }
+         else
+         {
+             BlockPosM blockposm = new BlockPosM(0, 0, 0);
+ 
+             for (int i = 0; i < 8; ++i)
+             {
+                 double d0 = this.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * this.width * 0.8F);
+                 double d1 = this.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
+                 double d2 = this.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * this.width * 0.8F);
+                 blockposm.setXyz(d0, d1 + (double)this.getEyeHeight(), d2);
+ 
+                 if (this.worldObj.getBlockState(blockposm).getBlock().isVisuallyOpaque())
+                 {
+                     return true;
+                 }
+             }
+ 
+             return false;
+         }
+     }
+ 
+     private boolean canSkipUpdate()
+     {
+         if (this.isChild())
+         {
+             return false;
+         }
+         else if (this.hurtTime > 0)
+         {
+             return false;
+         }
+         else if (this.ticksExisted < 20)
+         {
+             return false;
+         }
+         else
+         {
+             World world = this.getEntityWorld();
+ 
+             if (world == null)
+             {
+                 return false;
+             }
+             else if (world.playerEntities.size() != 1)
+             {
+                 return false;
+             }
+             else
+             {
+                 Entity entity = (Entity)world.playerEntities.get(0);
+                 double d0 = Math.max(Math.abs(this.posX - entity.posX) - 16.0D, 0.0D);
+                 double d1 = Math.max(Math.abs(this.posZ - entity.posZ) - 16.0D, 0.0D);
+                 double d2 = d0 * d0 + d1 * d1;
+                 return !this.isInRangeToRenderDist(d2);
+             }
+         }
+     }
+ 
+     private void onUpdateMinimal()
+     {
+         ++this.entityAge;
+ 
+         if (this instanceof EntityMob)
+         {
+             float f = this.getBrightness(1.0F);
+ 
+             if (f > 0.5F)
+             {
+                 this.entityAge += 2;
+             }
+         }
+ 
+         this.despawnEntity();
+     }
+ 
      public static enum SpawnPlacementType
      {
!         ON_GROUND("ON_GROUND", 0),
!         IN_AIR("IN_AIR", 1),
!         IN_WATER("IN_WATER", 2);
! 
!         private static final EntityLiving.SpawnPlacementType[] $VALUES = new EntityLiving.SpawnPlacementType[]{ON_GROUND, IN_AIR, IN_WATER};
!         private static final String __OBFID = "CL_00002255";
! 
!         private SpawnPlacementType(String p_i18_3_, int p_i18_4_)
!         {
!         }
      }
  }
diff -rc ./entity/monster/EntityIronGolem.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/entity/monster/EntityIronGolem.java
*** ./entity/monster/EntityIronGolem.java	2021-04-03 11:27:32.176332000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/entity/monster/EntityIronGolem.java	2019-05-30 22:29:27.489637000 -0700
***************
*** 148,157 ****
      /**
       * Returns true if this entity can attack entities of the specified class.
       */
!     public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
!     {
!         return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(cls) ? false : (cls == EntityCreeper.class ? false : super.canAttackClass(cls));
!     }
  
      /**
       * (abstract) Protected helper method to write subclass entity data to NBT.
--- 148,157 ----
      /**
       * Returns true if this entity can attack entities of the specified class.
       */
! //    public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
! //    {
! //        return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(cls) ? false : (cls == EntityCreeper.class ? false : super.canAttackClass(cls));
! //    }
  
      /**
       * (abstract) Protected helper method to write subclass entity data to NBT.
diff -rc ./event/ClickEvent.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/event/ClickEvent.java
*** ./event/ClickEvent.java	2021-04-03 11:27:32.677257000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/event/ClickEvent.java	2019-12-28 20:46:47.659692900 -0800
***************
*** 87,93 ****
          RUN_COMMAND("run_command", true),
          TWITCH_USER_INFO("twitch_user_info", false),
          SUGGEST_COMMAND("suggest_command", true),
!         CHANGE_PAGE("change_page", true);
  
          private static final Map<String, ClickEvent.Action> nameMapping = Maps.<String, ClickEvent.Action>newHashMap();
          private final boolean allowedInChat;
--- 87,94 ----
          RUN_COMMAND("run_command", true),
          TWITCH_USER_INFO("twitch_user_info", false),
          SUGGEST_COMMAND("suggest_command", true),
!         CHANGE_PAGE("change_page", true),
!     	COPY_CLIPBOARD("copy_clipboard", true);
  
          private static final Map<String, ClickEvent.Action> nameMapping = Maps.<String, ClickEvent.Action>newHashMap();
          private final boolean allowedInChat;
diff -rc ./network/EnumConnectionState.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/network/EnumConnectionState.java
*** ./network/EnumConnectionState.java	2021-04-03 11:27:34.397253000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/network/EnumConnectionState.java	2021-03-28 22:58:26.172367600 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import com.google.common.collect.BiMap;
  import com.google.common.collect.HashBiMap;
  import com.google.common.collect.Maps;
+ 
  import java.util.Map;
  import net.minecraft.network.handshake.client.C00Handshake;
  import net.minecraft.network.login.client.C00PacketLoginStart;
***************
*** 222,227 ****
--- 223,233 ----
              this.registerPacket(EnumPacketDirection.SERVERBOUND, C17PacketCustomPayload.class);
              this.registerPacket(EnumPacketDirection.SERVERBOUND, C18PacketSpectate.class);
              this.registerPacket(EnumPacketDirection.SERVERBOUND, C19PacketResourcePackStatus.class);
+             
+             //Sent from server == CLientBound
+             //send from client == ServerBound
+ //            this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketHelloWorld.class);
+ //            this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketMoreComplexData.class);
          }
      },
      STATUS(1)
***************
*** 276,283 ****
          }
          else
          {
!             bimap.put(Integer.valueOf(bimap.size()), packetClass);
!             return this;
          }
      }
  
--- 282,299 ----
          }
          else
          {
!         	
!         	if(packetClass.getName().contains("clientname")) {
!         		System.out.println("Put packet: " + (bimap.size() + 100) + " " + packetClass.getName());
!                 bimap.put(Integer.valueOf(bimap.size() + 100), packetClass);
!                 return this;
!         	}
!         	else {
!         		System.out.println("Put packet: " + bimap.size() + " " + packetClass.getName());
!                 bimap.put(Integer.valueOf(bimap.size()), packetClass);
!                 return this;
!         	}
!         	
          }
      }
  
diff -rc ./potion/PotionHelper.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/potion/PotionHelper.java
*** ./potion/PotionHelper.java	2021-04-03 11:27:35.651388000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/potion/PotionHelper.java	2019-05-30 22:29:33.032135000 -0700
***************
*** 2,11 ****
--- 2,15 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
+ import java.util.ArrayList;
  import java.util.Collection;
  import java.util.List;
  import java.util.Map;
+ 
  import net.minecraft.util.IntegerCache;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class PotionHelper
  {
***************
*** 23,34 ****
      public static final String goldenCarrotEffect = "-0+1+2-3+13&4-4";
      public static final String pufferfishEffect = "+0-1+2+3+13&4-4";
      public static final String rabbitFootEffect = "+0+1-2+3&4-4+13";
!     private static final Map<Integer, String> potionRequirements = Maps.<Integer, String>newHashMap();
!     private static final Map<Integer, String> potionAmplifiers = Maps.<Integer, String>newHashMap();
!     private static final Map<Integer, Integer> DATAVALUE_COLORS = Maps.<Integer, Integer>newHashMap();
  
      /** An array of possible potion prefix names, as translation IDs. */
      private static final String[] potionPrefixes = new String[] {"potion.prefix.mundane", "potion.prefix.uninteresting", "potion.prefix.bland", "potion.prefix.clear", "potion.prefix.milky", "potion.prefix.diffuse", "potion.prefix.artless", "potion.prefix.thin", "potion.prefix.awkward", "potion.prefix.flat", "potion.prefix.bulky", "potion.prefix.bungling", "potion.prefix.buttered", "potion.prefix.smooth", "potion.prefix.suave", "potion.prefix.debonair", "potion.prefix.thick", "potion.prefix.elegant", "potion.prefix.fancy", "potion.prefix.charming", "potion.prefix.dashing", "potion.prefix.refined", "potion.prefix.cordial", "potion.prefix.sparkling", "potion.prefix.potent", "potion.prefix.foul", "potion.prefix.odorless", "potion.prefix.rank", "potion.prefix.harsh", "potion.prefix.acrid", "potion.prefix.gross", "potion.prefix.stinky"};
  
      /**
       * Checks if the bit at 1 << j is on in i.
--- 27,39 ----
      public static final String goldenCarrotEffect = "-0+1+2-3+13&4-4";
      public static final String pufferfishEffect = "+0-1+2+3+13&4-4";
      public static final String rabbitFootEffect = "+0+1-2+3&4-4+13";
!     private static final Map potionRequirements = Maps.newHashMap();
!     private static final Map potionAmplifiers = Maps.newHashMap();
!     private static final Map DATAVALUE_COLORS = Maps.newHashMap();
  
      /** An array of possible potion prefix names, as translation IDs. */
      private static final String[] potionPrefixes = new String[] {"potion.prefix.mundane", "potion.prefix.uninteresting", "potion.prefix.bland", "potion.prefix.clear", "potion.prefix.milky", "potion.prefix.diffuse", "potion.prefix.artless", "potion.prefix.thin", "potion.prefix.awkward", "potion.prefix.flat", "potion.prefix.bulky", "potion.prefix.bungling", "potion.prefix.buttered", "potion.prefix.smooth", "potion.prefix.suave", "potion.prefix.debonair", "potion.prefix.thick", "potion.prefix.elegant", "potion.prefix.fancy", "potion.prefix.charming", "potion.prefix.dashing", "potion.prefix.refined", "potion.prefix.cordial", "potion.prefix.sparkling", "potion.prefix.potent", "potion.prefix.foul", "potion.prefix.odorless", "potion.prefix.rank", "potion.prefix.harsh", "potion.prefix.acrid", "potion.prefix.gross", "potion.prefix.stinky"};
+     private static final String __OBFID = "CL_00000078";
  
      /**
       * Checks if the bit at 1 << j is on in i.
***************
*** 65,71 ****
      /**
       * Given a {@link Collection}<{@link PotionEffect}> will return an Integer color.
       */
!     public static int calcPotionLiquidColor(Collection<PotionEffect> p_77911_0_)
      {
          int i = 3694022;
  
--- 70,76 ----
      /**
       * Given a {@link Collection}<{@link PotionEffect}> will return an Integer color.
       */
!     public static int calcPotionLiquidColor(Collection p_77911_0_)
      {
          int i = 3694022;
  
***************
*** 76,87 ****
              float f2 = 0.0F;
              float f3 = 0.0F;
  
!             for (PotionEffect potioneffect : p_77911_0_)
              {
                  if (potioneffect.getIsShowParticles())
                  {
                      int j = Potion.potionTypes[potioneffect.getPotionID()].getLiquidColor();
  
                      for (int k = 0; k <= potioneffect.getAmplifier(); ++k)
                      {
                          f += (float)(j >> 16 & 255) / 255.0F;
--- 81,99 ----
              float f2 = 0.0F;
              float f3 = 0.0F;
  
!             for (Object potioneffect0 : p_77911_0_)
              {
+                 PotionEffect potioneffect = (PotionEffect) potioneffect0;
+ 
                  if (potioneffect.getIsShowParticles())
                  {
                      int j = Potion.potionTypes[potioneffect.getPotionID()].getLiquidColor();
  
+                     if (Config.isCustomColors())
+                     {
+                         j = CustomColors.getPotionColor(potioneffect.getPotionID(), j);
+                     }
+ 
                      for (int k = 0; k <= potioneffect.getAmplifier(); ++k)
                      {
                          f += (float)(j >> 16 & 255) / 255.0F;
***************
*** 106,111 ****
--- 118,128 ----
          }
          else
          {
+             if (Config.isCustomColors())
+             {
+                 i = CustomColors.getPotionColor(0, i);
+             }
+ 
              return i;
          }
      }
***************
*** 113,123 ****
      /**
       * Check whether a {@link Collection}<{@link PotionEffect}> are all ambient.
       */
!     public static boolean getAreAmbient(Collection<PotionEffect> potionEffects)
      {
!         for (PotionEffect potioneffect : potionEffects)
          {
!             if (!potioneffect.getIsAmbient())
              {
                  return false;
              }
--- 130,140 ----
      /**
       * Check whether a {@link Collection}<{@link PotionEffect}> are all ambient.
       */
!     public static boolean getAreAmbient(Collection potionEffects)
      {
!         for (Object potioneffect : potionEffects)
          {
!             if (!((PotionEffect) potioneffect).getIsAmbient())
              {
                  return false;
              }
***************
*** 233,240 ****
                  }
                  else
                  {
!                     int j2 = parsePotionEffects(p_77912_0_, i + 1, p_77912_2_, p_77912_3_);
!                     return j2 > 0 ? j2 : 0;
                  }
              }
              else
--- 250,257 ----
                  }
                  else
                  {
!                     int i2 = parsePotionEffects(p_77912_0_, i + 1, p_77912_2_, p_77912_3_);
!                     return i2 > 0 ? i2 : 0;
                  }
              }
              else
***************
*** 243,258 ****
  
                  if (j >= 0 && j < p_77912_2_)
                  {
!                     int i2 = parsePotionEffects(p_77912_0_, p_77912_1_, j - 1, p_77912_3_);
  
!                     if (i2 <= 0)
                      {
                          return 0;
                      }
                      else
                      {
!                         int k2 = parsePotionEffects(p_77912_0_, j + 1, p_77912_2_, p_77912_3_);
!                         return k2 <= 0 ? 0 : (i2 > k2 ? i2 : k2);
                      }
                  }
                  else
--- 260,275 ----
  
                  if (j >= 0 && j < p_77912_2_)
                  {
!                     int k = parsePotionEffects(p_77912_0_, p_77912_1_, j - 1, p_77912_3_);
  
!                     if (k <= 0)
                      {
                          return 0;
                      }
                      else
                      {
!                         int j2 = parsePotionEffects(p_77912_0_, j + 1, p_77912_2_, p_77912_3_);
!                         return j2 <= 0 ? 0 : (k > j2 ? k : j2);
                      }
                  }
                  else
***************
*** 262,268 ****
                      boolean flag2 = false;
                      boolean flag3 = false;
                      boolean flag4 = false;
!                     int k = -1;
                      int l = 0;
                      int i1 = 0;
                      int j1 = 0;
--- 279,285 ----
                      boolean flag2 = false;
                      boolean flag3 = false;
                      boolean flag4 = false;
!                     byte b0 = -1;
                      int l = 0;
                      int i1 = 0;
                      int j1 = 0;
***************
*** 293,299 ****
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, k, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
--- 310,316 ----
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, b0, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
***************
*** 301,307 ****
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 k = -1;
                              }
  
                              flag3 = true;
--- 318,324 ----
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 b0 = -1;
                              }
  
                              flag3 = true;
***************
*** 310,316 ****
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, k, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
--- 327,333 ----
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, b0, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
***************
*** 318,324 ****
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 k = -1;
                              }
  
                              flag4 = true;
--- 335,341 ----
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 b0 = -1;
                              }
  
                              flag4 = true;
***************
*** 327,333 ****
                          {
                              if (c0 == 43 && flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, k, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
--- 344,350 ----
                          {
                              if (c0 == 43 && flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, b0, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
***************
*** 335,348 ****
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 k = -1;
                              }
                          }
                          else
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, k, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
--- 352,365 ----
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 b0 = -1;
                              }
                          }
                          else
                          {
                              if (flag2)
                              {
!                                 j1 += func_77904_a(flag3, flag1, flag4, b0, l, i1, p_77912_3_);
                                  flag3 = false;
                                  flag4 = false;
                                  flag = false;
***************
*** 350,376 ****
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 k = -1;
                              }
  
                              if (c0 == 61)
                              {
!                                 k = 0;
                              }
                              else if (c0 == 60)
                              {
!                                 k = 2;
                              }
                              else if (c0 == 62)
                              {
!                                 k = 1;
                              }
                          }
                      }
  
                      if (flag2)
                      {
!                         j1 += func_77904_a(flag3, flag1, flag4, k, l, i1, p_77912_3_);
                      }
  
                      return j1;
--- 367,393 ----
                                  flag2 = false;
                                  i1 = 0;
                                  l = 0;
!                                 b0 = -1;
                              }
  
                              if (c0 == 61)
                              {
!                                 b0 = 0;
                              }
                              else if (c0 == 60)
                              {
!                                 b0 = 2;
                              }
                              else if (c0 == 62)
                              {
!                                 b0 = 1;
                              }
                          }
                      }
  
                      if (flag2)
                      {
!                         j1 += func_77904_a(flag3, flag1, flag4, b0, l, i1, p_77912_3_);
                      }
  
                      return j1;
***************
*** 383,391 ****
          }
      }
  
!     public static List<PotionEffect> getPotionEffects(int p_77917_0_, boolean p_77917_1_)
      {
!         List<PotionEffect> list = null;
  
          for (Potion potion : Potion.potionTypes)
          {
--- 400,411 ----
          }
      }
  
!     /**
!      * Returns a list of effects for the specified potion damage value.
!      */
!     public static List getPotionEffects(int p_77917_0_, boolean p_77917_1_)
      {
!         ArrayList arraylist = null;
  
          for (Potion potion : Potion.potionTypes)
          {
***************
*** 428,436 ****
                              }
                          }
  
!                         if (list == null)
                          {
!                             list = Lists.<PotionEffect>newArrayList();
                          }
  
                          PotionEffect potioneffect = new PotionEffect(potion.getId(), i, j);
--- 448,456 ----
                              }
                          }
  
!                         if (arraylist == null)
                          {
!                             arraylist = Lists.newArrayList();
                          }
  
                          PotionEffect potioneffect = new PotionEffect(potion.getId(), i, j);
***************
*** 440,452 ****
                              potioneffect.setSplashPotion(true);
                          }
  
!                         list.add(potioneffect);
                      }
                  }
              }
          }
  
!         return list;
      }
  
      /**
--- 460,472 ----
                              potioneffect.setSplashPotion(true);
                          }
  
!                         arraylist.add(potioneffect);
                      }
                  }
              }
          }
  
!         return arraylist;
      }
  
      /**
***************
*** 489,522 ****
       */
      public static int applyIngredient(int p_77913_0_, String p_77913_1_)
      {
!         int i = 0;
!         int j = p_77913_1_.length();
          boolean flag = false;
          boolean flag1 = false;
          boolean flag2 = false;
          boolean flag3 = false;
!         int k = 0;
  
!         for (int l = i; l < j; ++l)
          {
!             char c0 = p_77913_1_.charAt(l);
  
              if (c0 >= 48 && c0 <= 57)
              {
!                 k = k * 10;
!                 k = k + (c0 - 48);
                  flag = true;
              }
              else if (c0 == 33)
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, k, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     k = 0;
                  }
  
                  flag1 = true;
--- 509,542 ----
       */
      public static int applyIngredient(int p_77913_0_, String p_77913_1_)
      {
!         byte b0 = 0;
!         int i = p_77913_1_.length();
          boolean flag = false;
          boolean flag1 = false;
          boolean flag2 = false;
          boolean flag3 = false;
!         int j = 0;
  
!         for (int k = b0; k < i; ++k)
          {
!             char c0 = p_77913_1_.charAt(k);
  
              if (c0 >= 48 && c0 <= 57)
              {
!                 j = j * 10;
!                 j = j + (c0 - 48);
                  flag = true;
              }
              else if (c0 == 33)
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, j, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     j = 0;
                  }
  
                  flag1 = true;
***************
*** 525,536 ****
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, k, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     k = 0;
                  }
  
                  flag2 = true;
--- 545,556 ----
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, j, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     j = 0;
                  }
  
                  flag2 = true;
***************
*** 539,562 ****
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, k, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     k = 0;
                  }
              }
              else if (c0 == 38)
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, k, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     k = 0;
                  }
  
                  flag3 = true;
--- 559,582 ----
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, j, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     j = 0;
                  }
              }
              else if (c0 == 38)
              {
                  if (flag)
                  {
!                     p_77913_0_ = brewBitOperations(p_77913_0_, j, flag2, flag1, flag3);
                      flag3 = false;
                      flag1 = false;
                      flag2 = false;
                      flag = false;
!                     j = 0;
                  }
  
                  flag3 = true;
***************
*** 565,571 ****
  
          if (flag)
          {
!             p_77913_0_ = brewBitOperations(p_77913_0_, k, flag2, flag1, flag3);
          }
  
          return p_77913_0_ & 32767;
--- 585,591 ----
  
          if (flag)
          {
!             p_77913_0_ = brewBitOperations(p_77913_0_, j, flag2, flag1, flag3);
          }
  
          return p_77913_0_ & 32767;
***************
*** 576,581 ****
--- 596,606 ----
          return (checkFlag(p_77908_0_, p_77908_1_) ? 16 : 0) | (checkFlag(p_77908_0_, p_77908_2_) ? 8 : 0) | (checkFlag(p_77908_0_, p_77908_3_) ? 4 : 0) | (checkFlag(p_77908_0_, p_77908_4_) ? 2 : 0) | (checkFlag(p_77908_0_, p_77908_5_) ? 1 : 0);
      }
  
+     public static void clearPotionColorCache()
+     {
+         DATAVALUE_COLORS.clear();
+     }
+ 
      static
      {
          potionRequirements.put(Integer.valueOf(Potion.regeneration.getId()), "0 & !1 & !2 & !3 & 0+6");
diff -rc ./profiler/Profiler.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/profiler/Profiler.java
*** ./profiler/Profiler.java	2021-04-03 11:27:35.676355000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/profiler/Profiler.java	2019-05-30 22:29:33.072112000 -0700
***************
*** 2,25 ****
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import java.util.Collections;
  import java.util.List;
  import java.util.Map;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
  public class Profiler
  {
      private static final Logger logger = LogManager.getLogger();
!     private final List<String> sectionList = Lists.<String>newArrayList();
!     private final List<Long> timestampList = Lists.<Long>newArrayList();
  
      /** Flag profiling enabled */
      public boolean profilingEnabled;
  
      /** Current profiling section */
      private String profilingSection = "";
!     private final Map<String, Long> profilingMap = Maps.<String, Long>newHashMap();
  
      /**
       * Clear profiling.
--- 2,55 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
+ import java.util.ArrayList;
+ import java.util.Arrays;
  import java.util.Collections;
  import java.util.List;
  import java.util.Map;
+ import net.minecraft.client.renderer.GlStateManager;
+ import optifine.Config;
+ import optifine.Lagometer;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
  public class Profiler
  {
      private static final Logger logger = LogManager.getLogger();
! 
!     /** List of parent sections */
!     private final List sectionList = Lists.newArrayList();
! 
!     /** List of timestamps (System.nanoTime) */
!     private final List timestampList = Lists.newArrayList();
  
      /** Flag profiling enabled */
      public boolean profilingEnabled;
  
      /** Current profiling section */
      private String profilingSection = "";
! 
!     /** Profiling map */
!     private final Map profilingMap = Maps.newHashMap();
!     private static final String __OBFID = "CL_00001497";
!     public boolean profilerGlobalEnabled = true;
!     private boolean profilerLocalEnabled;
!     private static final String SCHEDULED_EXECUTABLES = "scheduledExecutables";
!     private static final String TICK = "tick";
!     private static final String PRE_RENDER_ERRORS = "preRenderErrors";
!     private static final String RENDER = "render";
!     private static final String DISPLAY = "display";
!     private static final int HASH_SCHEDULED_EXECUTABLES = "scheduledExecutables".hashCode();
!     private static final int HASH_TICK = "tick".hashCode();
!     private static final int HASH_PRE_RENDER_ERRORS = "preRenderErrors".hashCode();
!     private static final int HASH_RENDER = "render".hashCode();
!     private static final int HASH_DISPLAY = "display".hashCode();
! 
!     public Profiler()
!     {
!         this.profilerLocalEnabled = this.profilerGlobalEnabled;
!     }
  
      /**
       * Clear profiling.
***************
*** 29,34 ****
--- 59,65 ----
          this.profilingMap.clear();
          this.profilingSection = "";
          this.sectionList.clear();
+         this.profilerLocalEnabled = this.profilerGlobalEnabled;
      }
  
      /**
***************
*** 36,51 ****
       */
      public void startSection(String name)
      {
!         if (this.profilingEnabled)
          {
!             if (this.profilingSection.length() > 0)
              {
!                 this.profilingSection = this.profilingSection + ".";
              }
  
!             this.profilingSection = this.profilingSection + name;
!             this.sectionList.add(this.profilingSection);
!             this.timestampList.add(Long.valueOf(System.nanoTime()));
          }
      }
  
--- 67,118 ----
       */
      public void startSection(String name)
      {
!         if (Lagometer.isActive())
!         {
!             int i = name.hashCode();
! 
!             if (i == HASH_SCHEDULED_EXECUTABLES && name.equals("scheduledExecutables"))
!             {
!                 Lagometer.timerScheduledExecutables.start();
!             }
!             else if (i == HASH_TICK && name.equals("tick") && Config.isMinecraftThread())
!             {
!                 Lagometer.timerScheduledExecutables.end();
!                 Lagometer.timerTick.start();
!             }
!             else if (i == HASH_PRE_RENDER_ERRORS && name.equals("preRenderErrors"))
!             {
!                 Lagometer.timerTick.end();
!             }
!         }
! 
!         if (Config.isFastRender())
          {
!             int j = name.hashCode();
! 
!             if (j == HASH_RENDER && name.equals("render"))
!             {
!                 GlStateManager.clearEnabled = false;
!             }
!             else if (j == HASH_DISPLAY && name.equals("display"))
              {
!                 GlStateManager.clearEnabled = true;
              }
+         }
+ 
+         if (this.profilerLocalEnabled)
+         {
+             if (this.profilingEnabled)
+             {
+                 if (this.profilingSection.length() > 0)
+                 {
+                     this.profilingSection = this.profilingSection + ".";
+                 }
  
!                 this.profilingSection = this.profilingSection + name;
!                 this.sectionList.add(this.profilingSection);
!                 this.timestampList.add(Long.valueOf(System.nanoTime()));
!             }
          }
      }
  
***************
*** 54,87 ****
       */
      public void endSection()
      {
!         if (this.profilingEnabled)
          {
!             long i = System.nanoTime();
!             long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
!             this.sectionList.remove(this.sectionList.size() - 1);
!             long k = i - j;
! 
!             if (this.profilingMap.containsKey(this.profilingSection))
!             {
!                 this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
!             }
!             else
              {
!                 this.profilingMap.put(this.profilingSection, Long.valueOf(k));
!             }
  
!             if (k > 100000000L)
!             {
!                 logger.warn("Something\'s taking too long! \'" + this.profilingSection + "\' took aprox " + (double)k / 1000000.0D + " ms");
!             }
  
!             this.profilingSection = !this.sectionList.isEmpty() ? (String)this.sectionList.get(this.sectionList.size() - 1) : "";
          }
      }
  
!     public List<Profiler.Result> getProfilingData(String p_76321_1_)
      {
!         if (!this.profilingEnabled)
          {
              return null;
          }
--- 121,166 ----
       */
      public void endSection()
      {
!         if (this.profilerLocalEnabled)
          {
!             if (this.profilingEnabled)
              {
!                 long i = System.nanoTime();
!                 long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
!                 this.sectionList.remove(this.sectionList.size() - 1);
!                 long k = i - j;
  
!                 if (this.profilingMap.containsKey(this.profilingSection))
!                 {
!                     this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
!                 }
!                 else
!                 {
!                     this.profilingMap.put(this.profilingSection, Long.valueOf(k));
!                 }
! 
!                 if (k > 100000000L)
!                 {
!                     logger.warn("Something\'s taking too long! \'" + this.profilingSection + "\' took aprox " + (double)k / 1000000.0D + " ms");
!                 }
  
!                 this.profilingSection = !this.sectionList.isEmpty() ? (String)this.sectionList.get(this.sectionList.size() - 1) : "";
!             }
          }
      }
  
!     /**
!      * Get profiling data
!      */
!     public List getProfilingData(String p_76321_1_)
      {
!         this.profilerLocalEnabled = this.profilerGlobalEnabled;
! 
!         if (!this.profilerLocalEnabled)
!         {
!             return new ArrayList(Arrays.asList(new Profiler.Result[] {new Profiler.Result("root", 0.0D, 0.0D)}));
!         }
!         else if (!this.profilingEnabled)
          {
              return null;
          }
***************
*** 89,95 ****
          {
              long i = this.profilingMap.containsKey("root") ? ((Long)this.profilingMap.get("root")).longValue() : 0L;
              long j = this.profilingMap.containsKey(p_76321_1_) ? ((Long)this.profilingMap.get(p_76321_1_)).longValue() : -1L;
!             List<Profiler.Result> list = Lists.<Profiler.Result>newArrayList();
  
              if (p_76321_1_.length() > 0)
              {
--- 168,174 ----
          {
              long i = this.profilingMap.containsKey("root") ? ((Long)this.profilingMap.get("root")).longValue() : 0L;
              long j = this.profilingMap.containsKey(p_76321_1_) ? ((Long)this.profilingMap.get(p_76321_1_)).longValue() : -1L;
!             ArrayList arraylist = Lists.newArrayList();
  
              if (p_76321_1_.length() > 0)
              {
***************
*** 98,106 ****
  
              long k = 0L;
  
!             for (String s : this.profilingMap.keySet())
              {
!                 if (s.length() > p_76321_1_.length() && s.startsWith(p_76321_1_) && s.indexOf(".", p_76321_1_.length() + 1) < 0)
                  {
                      k += ((Long)this.profilingMap.get(s)).longValue();
                  }
--- 177,185 ----
  
              long k = 0L;
  
!             for (Object s : this.profilingMap.keySet())
              {
!                 if (((String) s).length() > p_76321_1_.length() && ((String) s).startsWith(p_76321_1_) && ((String) s).indexOf(".", p_76321_1_.length() + 1) < 0)
                  {
                      k += ((Long)this.profilingMap.get(s)).longValue();
                  }
***************
*** 118,148 ****
                  i = k;
              }
  
!             for (String s1 : this.profilingMap.keySet())
              {
                  if (s1.length() > p_76321_1_.length() && s1.startsWith(p_76321_1_) && s1.indexOf(".", p_76321_1_.length() + 1) < 0)
                  {
                      long l = ((Long)this.profilingMap.get(s1)).longValue();
                      double d0 = (double)l * 100.0D / (double)k;
                      double d1 = (double)l * 100.0D / (double)i;
                      String s2 = s1.substring(p_76321_1_.length());
!                     list.add(new Profiler.Result(s2, d0, d1));
                  }
              }
  
!             for (String s3 : this.profilingMap.keySet())
              {
!                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 999L / 1000L));
              }
  
              if ((float)k > f)
              {
!                 list.add(new Profiler.Result("unspecified", (double)((float)k - f) * 100.0D / (double)k, (double)((float)k - f) * 100.0D / (double)i));
              }
  
!             Collections.sort(list);
!             list.add(0, new Profiler.Result(p_76321_1_, 100.0D, (double)k * 100.0D / (double)i));
!             return list;
          }
      }
  
--- 197,229 ----
                  i = k;
              }
  
!             for (Object s10 : this.profilingMap.keySet())
              {
+                 String s1 = (String)s10;
+ 
                  if (s1.length() > p_76321_1_.length() && s1.startsWith(p_76321_1_) && s1.indexOf(".", p_76321_1_.length() + 1) < 0)
                  {
                      long l = ((Long)this.profilingMap.get(s1)).longValue();
                      double d0 = (double)l * 100.0D / (double)k;
                      double d1 = (double)l * 100.0D / (double)i;
                      String s2 = s1.substring(p_76321_1_.length());
!                     arraylist.add(new Profiler.Result(s2, d0, d1));
                  }
              }
  
!             for (Object s3 : this.profilingMap.keySet())
              {
!                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 950L / 1000L));
              }
  
              if ((float)k > f)
              {
!                 arraylist.add(new Profiler.Result("unspecified", (double)((float)k - f) * 100.0D / (double)k, (double)((float)k - f) * 100.0D / (double)i));
              }
  
!             Collections.sort(arraylist);
!             arraylist.add(0, new Profiler.Result(p_76321_1_, 100.0D, (double)k * 100.0D / (double)i));
!             return arraylist;
          }
      }
  
***************
*** 151,158 ****
       */
      public void endStartSection(String name)
      {
!         this.endSection();
!         this.startSection(name);
      }
  
      public String getNameOfLastSection()
--- 232,242 ----
       */
      public void endStartSection(String name)
      {
!         if (this.profilerLocalEnabled)
!         {
!             this.endSection();
!             this.startSection(name);
!         }
      }
  
      public String getNameOfLastSection()
***************
*** 160,170 ****
          return this.sectionList.size() == 0 ? "[UNKNOWN]" : (String)this.sectionList.get(this.sectionList.size() - 1);
      }
  
!     public static final class Result implements Comparable<Profiler.Result>
      {
          public double field_76332_a;
          public double field_76330_b;
          public String field_76331_c;
  
          public Result(String p_i1554_1_, double p_i1554_2_, double p_i1554_4_)
          {
--- 244,255 ----
          return this.sectionList.size() == 0 ? "[UNKNOWN]" : (String)this.sectionList.get(this.sectionList.size() - 1);
      }
  
!     public static final class Result implements Comparable
      {
          public double field_76332_a;
          public double field_76330_b;
          public String field_76331_c;
+         private static final String __OBFID = "CL_00001498";
  
          public Result(String p_i1554_1_, double p_i1554_2_, double p_i1554_4_)
          {
***************
*** 182,186 ****
--- 267,276 ----
          {
              return (this.field_76331_c.hashCode() & 11184810) + 4473924;
          }
+ 
+         public int compareTo(Object p_compareTo_1_)
+         {
+             return this.compareTo((Profiler.Result)p_compareTo_1_);
+         }
      }
  }
diff -rc ./scoreboard/Scoreboard.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/scoreboard/Scoreboard.java
*** ./scoreboard/Scoreboard.java	2021-04-03 11:27:35.902358000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/scoreboard/Scoreboard.java	2020-11-12 22:02:53.975457500 -0800
***************
*** 445,451 ****
              default:
                  if (p_96517_0_ >= 3 && p_96517_0_ <= 18)
                  {
!                     EnumChatFormatting enumchatformatting = EnumChatFormatting.func_175744_a(p_96517_0_ - 3);
  
                      if (enumchatformatting != null && enumchatformatting != EnumChatFormatting.RESET)
                      {
--- 445,451 ----
              default:
                  if (p_96517_0_ >= 3 && p_96517_0_ <= 18)
                  {
!                     EnumChatFormatting enumchatformatting = EnumChatFormatting.fromID(p_96517_0_ - 3);
  
                      if (enumchatformatting != null && enumchatformatting != EnumChatFormatting.RESET)
                      {
diff -rc ./server/integrated/IntegratedServer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/integrated/IntegratedServer.java
*** ./server/integrated/IntegratedServer.java	2021-04-03 11:27:36.026391000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/integrated/IntegratedServer.java	2019-05-30 22:29:33.588816000 -0700
***************
*** 5,10 ****
--- 5,11 ----
  import java.io.File;
  import java.io.IOException;
  import java.net.InetAddress;
+ import java.util.Queue;
  import java.util.concurrent.Callable;
  import java.util.concurrent.FutureTask;
  import net.minecraft.client.ClientBrandRetriever;
***************
*** 27,32 ****
--- 28,36 ----
  import net.minecraft.world.demo.DemoWorldServer;
  import net.minecraft.world.storage.ISaveHandler;
  import net.minecraft.world.storage.WorldInfo;
+ import optifine.Reflector;
+ import optifine.WorldServerOF;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
***************
*** 40,45 ****
--- 44,50 ----
      private boolean isGamePaused;
      private boolean isPublic;
      private ThreadLanServerPing lanServerPing;
+     private static final String __OBFID = "CL_00001129";
  
      public IntegratedServer(Minecraft mcIn)
      {
***************
*** 70,130 ****
      protected void loadAllWorlds(String p_71247_1_, String p_71247_2_, long seed, WorldType type, String p_71247_6_)
      {
          this.convertMapIfNeeded(p_71247_1_);
-         this.worldServers = new WorldServer[3];
-         this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
          ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(p_71247_1_, true);
          this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
          WorldInfo worldinfo = isavehandler.loadWorldInfo();
  
!         if (worldinfo == null)
          {
!             worldinfo = new WorldInfo(this.theWorldSettings, p_71247_2_);
          }
          else
          {
!             worldinfo.setWorldName(p_71247_2_);
!         }
! 
!         for (int i = 0; i < this.worldServers.length; ++i)
!         {
!             int j = 0;
  
!             if (i == 1)
              {
!                 j = -1;
              }
! 
!             if (i == 2)
              {
!                 j = 1;
              }
  
!             if (i == 0)
              {
!                 if (this.isDemo())
                  {
!                     this.worldServers[i] = (WorldServer)(new DemoWorldServer(this, isavehandler, worldinfo, j, this.theProfiler)).init();
                  }
                  else
                  {
!                     this.worldServers[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.theProfiler)).init();
                  }
  
!                 this.worldServers[i].initialize(this.theWorldSettings);
!             }
!             else
!             {
!                 this.worldServers[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worldServers[0], this.theProfiler)).init();
              }
  
!             this.worldServers[i].addWorldAccess(new WorldManager(this, this.worldServers[i]));
!         }
! 
!         this.getConfigurationManager().setPlayerManager(this.worldServers);
  
!         if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
!         {
!             this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
          }
  
          this.initialWorldChunkLoad();
--- 75,172 ----
      protected void loadAllWorlds(String p_71247_1_, String p_71247_2_, long seed, WorldType type, String p_71247_6_)
      {
          this.convertMapIfNeeded(p_71247_1_);
          ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(p_71247_1_, true);
          this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
          WorldInfo worldinfo = isavehandler.loadWorldInfo();
  
!         if (Reflector.DimensionManager.exists())
          {
!             WorldServer worldserver = this.isDemo() ? (WorldServer)((WorldServer)(new DemoWorldServer(this, isavehandler, worldinfo, 0, this.theProfiler)).init()) : (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, 0, this.theProfiler)).init();
!             worldserver.initialize(this.theWorldSettings);
!             Integer[] ainteger = (Integer[])((Integer[])Reflector.call(Reflector.DimensionManager_getStaticDimensionIDs, new Object[0]));
!             Integer[] ainteger1 = ainteger;
!             int i = ainteger.length;
! 
!             for (int j = 0; j < i; ++j)
!             {
!                 int k = ainteger1[j].intValue();
!                 WorldServer worldserver1 = k == 0 ? worldserver : (WorldServer)((WorldServer)(new WorldServerMulti(this, isavehandler, k, worldserver, this.theProfiler)).init());
!                 worldserver1.addWorldAccess(new WorldManager(this, worldserver1));
! 
!                 if (!this.isSinglePlayer())
!                 {
!                     worldserver1.getWorldInfo().setGameType(this.getGameType());
!                 }
! 
!                 if (Reflector.EventBus.exists())
!                 {
!                     Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, new Object[] {worldserver1});
!                 }
!             }
! 
!             this.getConfigurationManager().setPlayerManager(new WorldServer[] {worldserver});
! 
!             if (worldserver.getWorldInfo().getDifficulty() == null)
!             {
!                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
!             }
          }
          else
          {
!             this.worldServers = new WorldServer[3];
!             this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
!             this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
  
!             if (worldinfo == null)
              {
!                 worldinfo = new WorldInfo(this.theWorldSettings, p_71247_2_);
              }
!             else
              {
!                 worldinfo.setWorldName(p_71247_2_);
              }
  
!             for (int l = 0; l < this.worldServers.length; ++l)
              {
!                 byte b0 = 0;
! 
!                 if (l == 1)
!                 {
!                     b0 = -1;
!                 }
! 
!                 if (l == 2)
                  {
!                     b0 = 1;
!                 }
! 
!                 if (l == 0)
!                 {
!                     if (this.isDemo())
!                     {
!                         this.worldServers[l] = (WorldServer)(new DemoWorldServer(this, isavehandler, worldinfo, b0, this.theProfiler)).init();
!                     }
!                     else
!                     {
!                         this.worldServers[l] = (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, b0, this.theProfiler)).init();
!                     }
! 
!                     this.worldServers[l].initialize(this.theWorldSettings);
                  }
                  else
                  {
!                     this.worldServers[l] = (WorldServer)(new WorldServerMulti(this, isavehandler, b0, this.worldServers[0], this.theProfiler)).init();
                  }
  
!                 this.worldServers[l].addWorldAccess(new WorldManager(this, this.worldServers[l]));
              }
  
!             this.getConfigurationManager().setPlayerManager(this.worldServers);
  
!             if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
!             {
!                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
!             }
          }
  
          this.initialWorldChunkLoad();
***************
*** 143,150 ****
--- 185,216 ----
          this.setAllowFlight(true);
          logger.info("Generating keypair");
          this.setKeyPair(CryptManager.generateKeyPair());
+ 
+         if (Reflector.FMLCommonHandler_handleServerAboutToStart.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+ 
+             if (!Reflector.callBoolean(object, Reflector.FMLCommonHandler_handleServerAboutToStart, new Object[] {this}))
+             {
+                 return false;
+             }
+         }
+ 
          this.loadAllWorlds(this.getFolderName(), this.getWorldName(), this.theWorldSettings.getSeed(), this.theWorldSettings.getTerrainType(), this.theWorldSettings.getWorldName());
          this.setMOTD(this.getServerOwner() + " - " + this.worldServers[0].getWorldInfo().getWorldName());
+ 
+         if (Reflector.FMLCommonHandler_handleServerStarting.exists())
+         {
+             Object object1 = Reflector.call(Reflector.FMLCommonHandler_instance, new Object[0]);
+ 
+             if (Reflector.FMLCommonHandler_handleServerStarting.getReturnType() == Boolean.TYPE)
+             {
+                 return Reflector.callBoolean(object1, Reflector.FMLCommonHandler_handleServerStarting, new Object[] {this});
+             }
+ 
+             Reflector.callVoid(object1, Reflector.FMLCommonHandler_handleServerStarting, new Object[] {this});
+         }
+ 
          return true;
      }
  
***************
*** 165,170 ****
--- 231,238 ----
  
          if (this.isGamePaused)
          {
+             Queue var3 = this.futureTaskQueue;
+ 
              synchronized (this.futureTaskQueue)
              {
                  while (!this.futureTaskQueue.isEmpty())
***************
*** 185,201 ****
  
              if (this.mc.theWorld != null)
              {
!                 WorldInfo worldinfo1 = this.worldServers[0].getWorldInfo();
!                 WorldInfo worldinfo = this.mc.theWorld.getWorldInfo();
  
!                 if (!worldinfo1.isDifficultyLocked() && worldinfo.getDifficulty() != worldinfo1.getDifficulty())
                  {
!                     logger.info("Changing difficulty to {}, from {}", new Object[] {worldinfo.getDifficulty(), worldinfo1.getDifficulty()});
!                     this.setDifficultyForAllWorlds(worldinfo.getDifficulty());
                  }
!                 else if (worldinfo.isDifficultyLocked() && !worldinfo1.isDifficultyLocked())
                  {
!                     logger.info("Locking difficulty to {}", new Object[] {worldinfo.getDifficulty()});
  
                      for (WorldServer worldserver : this.worldServers)
                      {
--- 253,269 ----
  
              if (this.mc.theWorld != null)
              {
!                 WorldInfo worldinfo = this.worldServers[0].getWorldInfo();
!                 WorldInfo worldinfo1 = this.mc.theWorld.getWorldInfo();
  
!                 if (!worldinfo.isDifficultyLocked() && worldinfo1.getDifficulty() != worldinfo.getDifficulty())
                  {
!                     logger.info("Changing difficulty to {}, from {}", new Object[] {worldinfo1.getDifficulty(), worldinfo.getDifficulty()});
!                     this.setDifficultyForAllWorlds(worldinfo1.getDifficulty());
                  }
!                 else if (worldinfo1.isDifficultyLocked() && !worldinfo.isDifficultyLocked())
                  {
!                     logger.info("Locking difficulty to {}", new Object[] {worldinfo1.getDifficulty()});
  
                      for (WorldServer worldserver : this.worldServers)
                      {
***************
*** 224,230 ****
       */
      public EnumDifficulty getDifficulty()
      {
!         return this.mc.theWorld.getWorldInfo().getDifficulty();
      }
  
      /**
--- 292,298 ----
       */
      public EnumDifficulty getDifficulty()
      {
!         return this.mc.theWorld == null ? this.mc.gameSettings.difficulty : this.mc.theWorld.getWorldInfo().getDifficulty();
      }
  
      /**
***************
*** 250,261 ****
          return this.mc.mcDataDir;
      }
  
!     public boolean isDedicatedServer()
      {
          return false;
      }
  
!     public boolean func_181035_ah()
      {
          return false;
      }
--- 318,329 ----
          return this.mc.mcDataDir;
      }
  
!     public boolean func_181035_ah()
      {
          return false;
      }
  
!     public boolean isDedicatedServer()
      {
          return false;
      }
***************
*** 274,288 ****
      public CrashReport addServerInfoToCrashReport(CrashReport report)
      {
          report = super.addServerInfoToCrashReport(report);
!         report.getCategory().addCrashSectionCallable("Type", new Callable<String>()
          {
              public String call() throws Exception
              {
                  return "Integrated Server (map_client.txt)";
              }
          });
!         report.getCategory().addCrashSectionCallable("Is Modded", new Callable<String>()
          {
              public String call() throws Exception
              {
                  String s = ClientBrandRetriever.getClientModName();
--- 342,358 ----
      public CrashReport addServerInfoToCrashReport(CrashReport report)
      {
          report = super.addServerInfoToCrashReport(report);
!         report.getCategory().addCrashSectionCallable("Type", new Callable()
          {
+             private static final String __OBFID = "CL_00001130";
              public String call() throws Exception
              {
                  return "Integrated Server (map_client.txt)";
              }
          });
!         report.getCategory().addCrashSectionCallable("Is Modded", new Callable()
          {
+             private static final String __OBFID = "CL_00001131";
              public String call() throws Exception
              {
                  String s = ClientBrandRetriever.getClientModName();
***************
*** 384,389 ****
--- 454,460 ----
      {
          Futures.getUnchecked(this.addScheduledTask(new Runnable()
          {
+             private static final String __OBFID = "CL_00002380";
              public void run()
              {
                  for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getConfigurationManager().func_181057_v()))
diff -rc ./server/management/PlayerManager.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/management/PlayerManager.java
*** ./server/management/PlayerManager.java	2021-04-03 11:27:36.101413000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/management/PlayerManager.java	2019-05-30 22:29:33.695754000 -0700
***************
*** 23,29 ****
      private static final Logger pmLogger = LogManager.getLogger();
      private final WorldServer theWorldServer;
      private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
!     private final LongHashMap<PlayerManager.PlayerInstance> playerInstances = new LongHashMap();
      private final List<PlayerManager.PlayerInstance> playerInstancesToUpdate = Lists.<PlayerManager.PlayerInstance>newArrayList();
      private final List<PlayerManager.PlayerInstance> playerInstanceList = Lists.<PlayerManager.PlayerInstance>newArrayList();
  
--- 23,29 ----
      private static final Logger pmLogger = LogManager.getLogger();
      private final WorldServer theWorldServer;
      private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
!     private final LongHashMap playerInstances = new LongHashMap();
      private final List<PlayerManager.PlayerInstance> playerInstancesToUpdate = Lists.<PlayerManager.PlayerInstance>newArrayList();
      private final List<PlayerManager.PlayerInstance> playerInstanceList = Lists.<PlayerManager.PlayerInstance>newArrayList();
  
diff -rc ./server/MinecraftServer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/MinecraftServer.java
*** ./server/MinecraftServer.java	2021-04-03 11:27:35.993387000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/server/MinecraftServer.java	2019-11-19 11:09:58.522616800 -0800
***************
*** 10,15 ****
--- 10,17 ----
  import com.mojang.authlib.GameProfileRepository;
  import com.mojang.authlib.minecraft.MinecraftSessionService;
  import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+ 
+ import clientname.event.impl.WorldUnloadEvent;
  import io.netty.buffer.ByteBuf;
  import io.netty.buffer.ByteBufOutputStream;
  import io.netty.buffer.Unpooled;
***************
*** 257,262 ****
--- 259,265 ----
      /**
       * Typically "menu.convertingLevel", "menu.loadingLevel" or others.
       */
+ 
      protected synchronized void setUserMessage(String message)
      {
          this.userMessage = message;
***************
*** 489,494 ****
--- 492,498 ----
                  for (int i = 0; i < this.worldServers.length; ++i)
                  {
                      WorldServer worldserver = this.worldServers[i];
+                     new WorldUnloadEvent(worldserver);
                      worldserver.flush();
                  }
              }
***************
*** 1125,1130 ****
--- 1129,1135 ----
  
              if (worldserver != null)
              {
+             	new WorldUnloadEvent(worldserver);
                  worldserver.flush();
              }
          }
diff -rc ./util/EnumChatFormatting.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/EnumChatFormatting.java
*** ./util/EnumChatFormatting.java	2021-04-03 11:27:36.991577000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/EnumChatFormatting.java	2020-11-12 22:03:27.175477100 -0800
***************
*** 30,36 ****
      STRIKETHROUGH("STRIKETHROUGH", 'm', true),
      UNDERLINE("UNDERLINE", 'n', true),
      ITALIC("ITALIC", 'o', true),
!     RESET("RESET", 'r', -1);
  
      private static final Map<String, EnumChatFormatting> nameMapping = Maps.<String, EnumChatFormatting>newHashMap();
  
--- 30,37 ----
      STRIKETHROUGH("STRIKETHROUGH", 'm', true),
      UNDERLINE("UNDERLINE", 'n', true),
      ITALIC("ITALIC", 'o', true),
!     RESET("RESET", 'r', -1),
!     RAINBOW("RAINBOW", 's', -1337);
  
      private static final Map<String, EnumChatFormatting> nameMapping = Maps.<String, EnumChatFormatting>newHashMap();
  
***************
*** 133,141 ****
          return friendlyName == null ? null : (EnumChatFormatting)nameMapping.get(func_175745_c(friendlyName));
      }
  
!     public static EnumChatFormatting func_175744_a(int p_175744_0_)
      {
!         if (p_175744_0_ < 0)
          {
              return RESET;
          }
--- 134,145 ----
          return friendlyName == null ? null : (EnumChatFormatting)nameMapping.get(func_175745_c(friendlyName));
      }
  
!     public static EnumChatFormatting fromID(int id)
      {
!         if(id == -1337) {
!         	return RAINBOW;
!         }
!         else if (id < 0)
          {
              return RESET;
          }
***************
*** 143,149 ****
          {
              for (EnumChatFormatting enumchatformatting : values())
              {
!                 if (enumchatformatting.getColorIndex() == p_175744_0_)
                  {
                      return enumchatformatting;
                  }
--- 147,153 ----
          {
              for (EnumChatFormatting enumchatformatting : values())
              {
!                 if (enumchatformatting.getColorIndex() == id)
                  {
                      return enumchatformatting;
                  }
diff -rc ./util/EnumFacing.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/EnumFacing.java
*** ./util/EnumFacing.java	2021-04-03 11:27:37.002593000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/EnumFacing.java	2019-05-30 22:29:35.255394000 -0700
***************
*** 9,20 ****
  
  public enum EnumFacing implements IStringSerializable
  {
!     DOWN(0, 1, -1, "down", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Y, new Vec3i(0, -1, 0)),
!     UP(1, 0, -1, "up", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Y, new Vec3i(0, 1, 0)),
!     NORTH(2, 3, 2, "north", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, -1)),
!     SOUTH(3, 2, 0, "south", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, 1)),
!     WEST(4, 5, 1, "west", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.X, new Vec3i(-1, 0, 0)),
!     EAST(5, 4, 3, "east", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.X, new Vec3i(1, 0, 0));
  
      /** Ordering index for D-U-N-S-W-E */
      private final int index;
--- 9,20 ----
  
  public enum EnumFacing implements IStringSerializable
  {
!     DOWN("DOWN", 0, 0, 1, -1, "down", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Y, new Vec3i(0, -1, 0)),
!     UP("UP", 1, 1, 0, -1, "up", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Y, new Vec3i(0, 1, 0)),
!     NORTH("NORTH", 2, 2, 3, 2, "north", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, -1)),
!     SOUTH("SOUTH", 3, 3, 2, 0, "south", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.Z, new Vec3i(0, 0, 1)),
!     WEST("WEST", 4, 4, 5, 1, "west", EnumFacing.AxisDirection.NEGATIVE, EnumFacing.Axis.X, new Vec3i(-1, 0, 0)),
!     EAST("EAST", 5, 5, 4, 3, "east", EnumFacing.AxisDirection.POSITIVE, EnumFacing.Axis.X, new Vec3i(1, 0, 0));
  
      /** Ordering index for D-U-N-S-W-E */
      private final int index;
***************
*** 32,52 ****
      private final Vec3i directionVec;
  
      /** All facings in D-U-N-S-W-E order */
!     private static final EnumFacing[] VALUES = new EnumFacing[6];
  
      /** All Facings with horizontal axis in order S-W-N-E */
      private static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
!     private static final Map<String, EnumFacing> NAME_LOOKUP = Maps.<String, EnumFacing>newHashMap();
! 
!     private EnumFacing(int indexIn, int oppositeIn, int horizontalIndexIn, String nameIn, EnumFacing.AxisDirection axisDirectionIn, EnumFacing.Axis axisIn, Vec3i directionVecIn)
!     {
!         this.index = indexIn;
!         this.horizontalIndex = horizontalIndexIn;
!         this.opposite = oppositeIn;
!         this.name = nameIn;
!         this.axis = axisIn;
!         this.axisDirection = axisDirectionIn;
!         this.directionVec = directionVecIn;
      }
  
      /**
--- 32,54 ----
      private final Vec3i directionVec;
  
      /** All facings in D-U-N-S-W-E order */
!     public static final EnumFacing[] VALUES = new EnumFacing[6];
  
      /** All Facings with horizontal axis in order S-W-N-E */
      private static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
!     private static final Map NAME_LOOKUP = Maps.newHashMap();
!     private static final EnumFacing[] $VALUES = new EnumFacing[]{DOWN, UP, NORTH, SOUTH, WEST, EAST};
!     private static final String __OBFID = "CL_00001201";
! 
!     private EnumFacing(String p_i17_3_, int p_i17_4_, int p_i17_5_, int p_i17_6_, int p_i17_7_, String p_i17_8_, EnumFacing.AxisDirection p_i17_9_, EnumFacing.Axis p_i17_10_, Vec3i p_i17_11_)
!     {
!         this.index = p_i17_5_;
!         this.horizontalIndex = p_i17_7_;
!         this.opposite = p_i17_6_;
!         this.name = p_i17_8_;
!         this.axis = p_i17_10_;
!         this.axisDirection = p_i17_9_;
!         this.directionVec = p_i17_11_;
      }
  
      /**
***************
*** 78,84 ****
       */
      public EnumFacing getOpposite()
      {
!         return getFront(this.opposite);
      }
  
      /**
--- 80,86 ----
       */
      public EnumFacing getOpposite()
      {
!         return VALUES[this.opposite];
      }
  
      /**
***************
*** 87,95 ****
       */
      public EnumFacing rotateAround(EnumFacing.Axis axis)
      {
!         switch (axis)
          {
!             case X:
                  if (this != WEST && this != EAST)
                  {
                      return this.rotateX();
--- 89,97 ----
       */
      public EnumFacing rotateAround(EnumFacing.Axis axis)
      {
!         switch (EnumFacing.EnumFacing$1.field_179515_a[axis.ordinal()])
          {
!             case 1:
                  if (this != WEST && this != EAST)
                  {
                      return this.rotateX();
***************
*** 97,103 ****
  
                  return this;
  
!             case Y:
                  if (this != UP && this != DOWN)
                  {
                      return this.rotateY();
--- 99,105 ----
  
                  return this;
  
!             case 2:
                  if (this != UP && this != DOWN)
                  {
                      return this.rotateY();
***************
*** 105,111 ****
  
                  return this;
  
!             case Z:
                  if (this != NORTH && this != SOUTH)
                  {
                      return this.rotateZ();
--- 107,113 ----
  
                  return this;
  
!             case 3:
                  if (this != NORTH && this != SOUTH)
                  {
                      return this.rotateZ();
***************
*** 123,140 ****
       */
      public EnumFacing rotateY()
      {
!         switch (this)
          {
!             case NORTH:
                  return EAST;
  
!             case EAST:
                  return SOUTH;
  
!             case SOUTH:
                  return WEST;
  
!             case WEST:
                  return NORTH;
  
              default:
--- 125,142 ----
       */
      public EnumFacing rotateY()
      {
!         switch (EnumFacing.EnumFacing$1.field_179513_b[this.ordinal()])
          {
!             case 1:
                  return EAST;
  
!             case 2:
                  return SOUTH;
  
!             case 3:
                  return WEST;
  
!             case 4:
                  return NORTH;
  
              default:
***************
*** 147,169 ****
       */
      private EnumFacing rotateX()
      {
!         switch (this)
          {
!             case NORTH:
                  return DOWN;
  
!             case EAST:
!             case WEST:
              default:
                  throw new IllegalStateException("Unable to get X-rotated facing of " + this);
  
!             case SOUTH:
                  return UP;
  
!             case UP:
                  return NORTH;
  
!             case DOWN:
                  return SOUTH;
          }
      }
--- 149,171 ----
       */
      private EnumFacing rotateX()
      {
!         switch (EnumFacing.EnumFacing$1.field_179513_b[this.ordinal()])
          {
!             case 1:
                  return DOWN;
  
!             case 2:
!             case 4:
              default:
                  throw new IllegalStateException("Unable to get X-rotated facing of " + this);
  
!             case 3:
                  return UP;
  
!             case 5:
                  return NORTH;
  
!             case 6:
                  return SOUTH;
          }
      }
***************
*** 173,194 ****
       */
      private EnumFacing rotateZ()
      {
!         switch (this)
          {
!             case EAST:
                  return DOWN;
  
!             case SOUTH:
              default:
                  throw new IllegalStateException("Unable to get Z-rotated facing of " + this);
  
!             case WEST:
                  return UP;
  
!             case UP:
                  return EAST;
  
!             case DOWN:
                  return WEST;
          }
      }
--- 175,196 ----
       */
      private EnumFacing rotateZ()
      {
!         switch (EnumFacing.EnumFacing$1.field_179513_b[this.ordinal()])
          {
!             case 2:
                  return DOWN;
  
!             case 3:
              default:
                  throw new IllegalStateException("Unable to get Z-rotated facing of " + this);
  
!             case 4:
                  return UP;
  
!             case 5:
                  return EAST;
  
!             case 6:
                  return WEST;
          }
      }
***************
*** 198,215 ****
       */
      public EnumFacing rotateYCCW()
      {
!         switch (this)
          {
!             case NORTH:
                  return WEST;
  
!             case EAST:
                  return NORTH;
  
!             case SOUTH:
                  return EAST;
  
!             case WEST:
                  return SOUTH;
  
              default:
--- 200,217 ----
       */
      public EnumFacing rotateYCCW()
      {
!         switch (EnumFacing.EnumFacing$1.field_179513_b[this.ordinal()])
          {
!             case 1:
                  return WEST;
  
!             case 2:
                  return NORTH;
  
!             case 3:
                  return EAST;
  
!             case 4:
                  return SOUTH;
  
              default:
***************
*** 355,373 ****
          }
      }
  
!     public static enum Axis implements Predicate<EnumFacing>, IStringSerializable {
!         X("x", EnumFacing.Plane.HORIZONTAL),
!         Y("y", EnumFacing.Plane.VERTICAL),
!         Z("z", EnumFacing.Plane.HORIZONTAL);
  
!         private static final Map<String, EnumFacing.Axis> NAME_LOOKUP = Maps.<String, EnumFacing.Axis>newHashMap();
          private final String name;
          private final EnumFacing.Plane plane;
  
!         private Axis(String name, EnumFacing.Plane plane)
          {
!             this.name = name;
!             this.plane = plane;
          }
  
          public static EnumFacing.Axis byName(String name)
--- 357,478 ----
          }
      }
  
!     static final class EnumFacing$1 {
!         static final int[] field_179515_a;
!         static final int[] field_179513_b;
!         static final int[] field_179514_c = new int[EnumFacing.Plane.values().length];
!         private static final String __OBFID = "CL_00002322";
! 
!         static {
!             try {
!                 field_179514_c[EnumFacing.Plane.HORIZONTAL.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var11)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179514_c[EnumFacing.Plane.VERTICAL.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var10)
!             {
!                 ;
!             }
! 
!             field_179513_b = new int[EnumFacing.values().length];
! 
!             try {
!                 field_179513_b[EnumFacing.NORTH.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var9)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179513_b[EnumFacing.EAST.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var8)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179513_b[EnumFacing.SOUTH.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var7)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179513_b[EnumFacing.WEST.ordinal()] = 4;
!             }
!             catch (NoSuchFieldError var6)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179513_b[EnumFacing.UP.ordinal()] = 5;
!             }
!             catch (NoSuchFieldError var5)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179513_b[EnumFacing.DOWN.ordinal()] = 6;
!             }
!             catch (NoSuchFieldError var4)
!             {
!                 ;
!             }
! 
!             field_179515_a = new int[EnumFacing.Axis.values().length];
! 
!             try {
!                 field_179515_a[EnumFacing.Axis.X.ordinal()] = 1;
!             }
!             catch (NoSuchFieldError var3)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179515_a[EnumFacing.Axis.Y.ordinal()] = 2;
!             }
!             catch (NoSuchFieldError var2)
!             {
!                 ;
!             }
! 
!             try {
!                 field_179515_a[EnumFacing.Axis.Z.ordinal()] = 3;
!             }
!             catch (NoSuchFieldError var1)
!             {
!                 ;
!             }
!         }
!     }
! 
!     public static enum Axis implements Predicate, IStringSerializable {
!         X("X", 0, "x", EnumFacing.Plane.HORIZONTAL),
!         Y("Y", 1, "y", EnumFacing.Plane.VERTICAL),
!         Z("Z", 2, "z", EnumFacing.Plane.HORIZONTAL);
  
!         private static final Map NAME_LOOKUP = Maps.newHashMap();
          private final String name;
          private final EnumFacing.Plane plane;
+         private static final EnumFacing.Axis[] $VALUES = new EnumFacing.Axis[]{X, Y, Z};
+         private static final String __OBFID = "CL_00002321";
  
!         private Axis(String p_i14_3_, int p_i14_4_, String p_i14_5_, EnumFacing.Plane p_i14_6_)
          {
!             this.name = p_i14_5_;
!             this.plane = p_i14_6_;
          }
  
          public static EnumFacing.Axis byName(String name)
***************
*** 410,415 ****
--- 515,525 ----
              return this.name;
          }
  
+         public boolean apply(Object p_apply_1_)
+         {
+             return this.apply((EnumFacing)p_apply_1_);
+         }
+ 
          static {
              for (EnumFacing.Axis enumfacing$axis : values())
              {
***************
*** 419,434 ****
      }
  
      public static enum AxisDirection {
!         POSITIVE(1, "Towards positive"),
!         NEGATIVE(-1, "Towards negative");
  
          private final int offset;
          private final String description;
  
!         private AxisDirection(int offset, String description)
          {
!             this.offset = offset;
!             this.description = description;
          }
  
          public int getOffset()
--- 529,546 ----
      }
  
      public static enum AxisDirection {
!         POSITIVE("POSITIVE", 0, 1, "Towards positive"),
!         NEGATIVE("NEGATIVE", 1, -1, "Towards negative");
  
          private final int offset;
          private final String description;
+         private static final EnumFacing.AxisDirection[] $VALUES = new EnumFacing.AxisDirection[]{POSITIVE, NEGATIVE};
+         private static final String __OBFID = "CL_00002320";
  
!         private AxisDirection(String p_i15_3_, int p_i15_4_, int p_i15_5_, String p_i15_6_)
          {
!             this.offset = p_i15_5_;
!             this.description = p_i15_6_;
          }
  
          public int getOffset()
***************
*** 442,458 ****
          }
      }
  
!     public static enum Plane implements Predicate<EnumFacing>, Iterable<EnumFacing> {
!         HORIZONTAL,
!         VERTICAL;
  
          public EnumFacing[] facings()
          {
!             switch (this)
              {
!                 case HORIZONTAL:
                      return new EnumFacing[] {EnumFacing.NORTH, EnumFacing.EAST, EnumFacing.SOUTH, EnumFacing.WEST};
!                 case VERTICAL:
                      return new EnumFacing[] {EnumFacing.UP, EnumFacing.DOWN};
                  default:
                      throw new Error("Someone\'s been tampering with the universe!");
--- 554,577 ----
          }
      }
  
!     public static enum Plane implements Predicate, Iterable {
!         HORIZONTAL("HORIZONTAL", 0),
!         VERTICAL("VERTICAL", 1);
! 
!         private static final EnumFacing.Plane[] $VALUES = new EnumFacing.Plane[]{HORIZONTAL, VERTICAL};
!         private static final String __OBFID = "CL_00002319";
! 
!         private Plane(String p_i16_3_, int p_i16_4_)
!         {
!         }
  
          public EnumFacing[] facings()
          {
!             switch (EnumFacing.EnumFacing$1.field_179514_c[this.ordinal()])
              {
!                 case 1:
                      return new EnumFacing[] {EnumFacing.NORTH, EnumFacing.EAST, EnumFacing.SOUTH, EnumFacing.WEST};
!                 case 2:
                      return new EnumFacing[] {EnumFacing.UP, EnumFacing.DOWN};
                  default:
                      throw new Error("Someone\'s been tampering with the universe!");
***************
*** 470,478 ****
              return p_apply_1_ != null && p_apply_1_.getAxis().getPlane() == this;
          }
  
!         public Iterator<EnumFacing> iterator()
          {
!             return Iterators.<EnumFacing>forArray(this.facings());
          }
      }
  }
--- 589,602 ----
              return p_apply_1_ != null && p_apply_1_.getAxis().getPlane() == this;
          }
  
!         public Iterator iterator()
!         {
!             return Iterators.forArray(this.facings());
!         }
! 
!         public boolean apply(Object p_apply_1_)
          {
!             return this.apply((EnumFacing)p_apply_1_);
          }
      }
  }
diff -rc ./util/LongHashMap.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/LongHashMap.java
*** ./util/LongHashMap.java	2021-04-03 11:27:37.251240000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/LongHashMap.java	2019-05-30 22:29:35.549224000 -0700
***************
*** 1,8 ****
  package net.minecraft.util;
  
! public class LongHashMap<V>
  {
!     private transient LongHashMap.Entry<V>[] hashArray = new LongHashMap.Entry[4096];
  
      /** the number of elements in the hash array */
      private transient int numHashElements;
--- 1,9 ----
  package net.minecraft.util;
  
! public class LongHashMap
  {
!     /** the array of all elements in the hash */
!     private transient LongHashMap.Entry[] hashArray = new LongHashMap.Entry[4096];
  
      /** the number of elements in the hash array */
      private transient int numHashElements;
***************
*** 20,25 ****
--- 21,27 ----
  
      /** count of times elements have been added/removed */
      private transient volatile int modCount;
+     private static final String __OBFID = "CL_00001492";
  
      public LongHashMap()
      {
***************
*** 31,37 ****
       */
      private static int getHashedKey(long originalKey)
      {
!         return hash((int)(originalKey ^ originalKey >>> 32));
      }
  
      /**
--- 33,39 ----
       */
      private static int getHashedKey(long originalKey)
      {
!         return (int)(originalKey ^ originalKey >>> 27);
      }
  
      /**
***************
*** 59,77 ****
      /**
       * get the value from the map given the key
       */
!     public V getValueByKey(long p_76164_1_)
      {
          int i = getHashedKey(p_76164_1_);
  
!         for (LongHashMap.Entry<V> entry = this.hashArray[getHashIndex(i, this.mask)]; entry != null; entry = entry.nextEntry)
          {
!             if (entry.key == p_76164_1_)
              {
!                 return entry.value;
              }
          }
  
!         return (V)null;
      }
  
      public boolean containsItem(long p_76161_1_)
--- 61,79 ----
      /**
       * get the value from the map given the key
       */
!     public Object getValueByKey(long p_76164_1_)
      {
          int i = getHashedKey(p_76164_1_);
  
!         for (LongHashMap.Entry longhashmap$entry = this.hashArray[getHashIndex(i, this.mask)]; longhashmap$entry != null; longhashmap$entry = longhashmap$entry.nextEntry)
          {
!             if (longhashmap$entry.key == p_76164_1_)
              {
!                 return longhashmap$entry.value;
              }
          }
  
!         return null;
      }
  
      public boolean containsItem(long p_76161_1_)
***************
*** 79,93 ****
          return this.getEntry(p_76161_1_) != null;
      }
  
!     final LongHashMap.Entry<V> getEntry(long p_76160_1_)
      {
          int i = getHashedKey(p_76160_1_);
  
!         for (LongHashMap.Entry<V> entry = this.hashArray[getHashIndex(i, this.mask)]; entry != null; entry = entry.nextEntry)
          {
!             if (entry.key == p_76160_1_)
              {
!                 return entry;
              }
          }
  
--- 81,95 ----
          return this.getEntry(p_76161_1_) != null;
      }
  
!     final LongHashMap.Entry getEntry(long p_76160_1_)
      {
          int i = getHashedKey(p_76160_1_);
  
!         for (LongHashMap.Entry longhashmap$entry = this.hashArray[getHashIndex(i, this.mask)]; longhashmap$entry != null; longhashmap$entry = longhashmap$entry.nextEntry)
          {
!             if (longhashmap$entry.key == p_76160_1_)
              {
!                 return longhashmap$entry;
              }
          }
  
***************
*** 97,112 ****
      /**
       * Add a key-value pair.
       */
!     public void add(long p_76163_1_, V p_76163_3_)
      {
          int i = getHashedKey(p_76163_1_);
          int j = getHashIndex(i, this.mask);
  
!         for (LongHashMap.Entry<V> entry = this.hashArray[j]; entry != null; entry = entry.nextEntry)
          {
!             if (entry.key == p_76163_1_)
              {
!                 entry.value = p_76163_3_;
                  return;
              }
          }
--- 99,114 ----
      /**
       * Add a key-value pair.
       */
!     public void add(long p_76163_1_, Object p_76163_3_)
      {
          int i = getHashedKey(p_76163_1_);
          int j = getHashIndex(i, this.mask);
  
!         for (LongHashMap.Entry longhashmap$entry = this.hashArray[j]; longhashmap$entry != null; longhashmap$entry = longhashmap$entry.nextEntry)
          {
!             if (longhashmap$entry.key == p_76163_1_)
              {
!                 longhashmap$entry.value = p_76163_3_;
                  return;
              }
          }
***************
*** 120,127 ****
       */
      private void resizeTable(int p_76153_1_)
      {
!         LongHashMap.Entry<V>[] entry = this.hashArray;
!         int i = entry.length;
  
          if (i == 1073741824)
          {
--- 122,129 ----
       */
      private void resizeTable(int p_76153_1_)
      {
!         LongHashMap.Entry[] alonghashmap$entry = this.hashArray;
!         int i = alonghashmap$entry.length;
  
          if (i == 1073741824)
          {
***************
*** 129,167 ****
          }
          else
          {
!             LongHashMap.Entry<V>[] entry1 = new LongHashMap.Entry[p_76153_1_];
!             this.copyHashTableTo(entry1);
!             this.hashArray = entry1;
              this.mask = this.hashArray.length - 1;
!             this.capacity = (int)((float)p_76153_1_ * this.percentUseable);
          }
      }
  
      /**
       * copies the hash table to the specified array
       */
!     private void copyHashTableTo(LongHashMap.Entry<V>[] p_76154_1_)
      {
!         LongHashMap.Entry<V>[] entry = this.hashArray;
          int i = p_76154_1_.length;
  
!         for (int j = 0; j < entry.length; ++j)
          {
!             LongHashMap.Entry<V> entry1 = entry[j];
  
!             if (entry1 != null)
              {
!                 entry[j] = null;
  
                  while (true)
                  {
!                     LongHashMap.Entry<V> entry2 = entry1.nextEntry;
!                     int k = getHashIndex(entry1.hash, i - 1);
!                     entry1.nextEntry = p_76154_1_[k];
!                     p_76154_1_[k] = entry1;
!                     entry1 = entry2;
  
!                     if (entry2 == null)
                      {
                          break;
                      }
--- 131,171 ----
          }
          else
          {
!             LongHashMap.Entry[] alonghashmap$entry1 = new LongHashMap.Entry[p_76153_1_];
!             this.copyHashTableTo(alonghashmap$entry1);
!             this.hashArray = alonghashmap$entry1;
              this.mask = this.hashArray.length - 1;
!             float f = (float)p_76153_1_;
!             this.getClass();
!             this.capacity = (int)(f * 0.75F);
          }
      }
  
      /**
       * copies the hash table to the specified array
       */
!     private void copyHashTableTo(LongHashMap.Entry[] p_76154_1_)
      {
!         LongHashMap.Entry[] alonghashmap$entry = this.hashArray;
          int i = p_76154_1_.length;
  
!         for (int j = 0; j < alonghashmap$entry.length; ++j)
          {
!             LongHashMap.Entry longhashmap$entry = alonghashmap$entry[j];
  
!             if (longhashmap$entry != null)
              {
!                 alonghashmap$entry[j] = null;
  
                  while (true)
                  {
!                     LongHashMap.Entry longhashmap$entry1 = longhashmap$entry.nextEntry;
!                     int k = getHashIndex(longhashmap$entry.hash, i - 1);
!                     longhashmap$entry.nextEntry = p_76154_1_[k];
!                     p_76154_1_[k] = longhashmap$entry;
!                     longhashmap$entry = longhashmap$entry1;
  
!                     if (longhashmap$entry1 == null)
                      {
                          break;
                      }
***************
*** 173,226 ****
      /**
       * calls the removeKey method and returns removed object
       */
!     public V remove(long p_76159_1_)
      {
!         LongHashMap.Entry<V> entry = this.removeKey(p_76159_1_);
!         return (V)(entry == null ? null : entry.value);
      }
  
!     final LongHashMap.Entry<V> removeKey(long p_76152_1_)
      {
          int i = getHashedKey(p_76152_1_);
          int j = getHashIndex(i, this.mask);
!         LongHashMap.Entry<V> entry = this.hashArray[j];
!         LongHashMap.Entry<V> entry1;
!         LongHashMap.Entry<V> entry2;
  
!         for (entry1 = entry; entry1 != null; entry1 = entry2)
          {
!             entry2 = entry1.nextEntry;
  
!             if (entry1.key == p_76152_1_)
              {
                  ++this.modCount;
                  --this.numHashElements;
  
!                 if (entry == entry1)
                  {
!                     this.hashArray[j] = entry2;
                  }
                  else
                  {
!                     entry.nextEntry = entry2;
                  }
  
!                 return entry1;
              }
  
!             entry = entry1;
          }
  
!         return entry1;
      }
  
      /**
       * creates the key in the hash table
       */
!     private void createKey(int p_76156_1_, long p_76156_2_, V p_76156_4_, int p_76156_5_)
      {
!         LongHashMap.Entry<V> entry = this.hashArray[p_76156_5_];
!         this.hashArray[p_76156_5_] = new LongHashMap.Entry(p_76156_1_, p_76156_2_, p_76156_4_, entry);
  
          if (this.numHashElements++ >= this.capacity)
          {
--- 177,233 ----
      /**
       * calls the removeKey method and returns removed object
       */
!     public Object remove(long p_76159_1_)
      {
!         LongHashMap.Entry longhashmap$entry = this.removeKey(p_76159_1_);
!         return longhashmap$entry == null ? null : longhashmap$entry.value;
      }
  
!     /**
!      * removes the key from the hash linked list
!      */
!     final LongHashMap.Entry removeKey(long p_76152_1_)
      {
          int i = getHashedKey(p_76152_1_);
          int j = getHashIndex(i, this.mask);
!         LongHashMap.Entry longhashmap$entry = this.hashArray[j];
!         LongHashMap.Entry longhashmap$entry1;
!         LongHashMap.Entry longhashmap$entry2;
  
!         for (longhashmap$entry1 = longhashmap$entry; longhashmap$entry1 != null; longhashmap$entry1 = longhashmap$entry2)
          {
!             longhashmap$entry2 = longhashmap$entry1.nextEntry;
  
!             if (longhashmap$entry1.key == p_76152_1_)
              {
                  ++this.modCount;
                  --this.numHashElements;
  
!                 if (longhashmap$entry == longhashmap$entry1)
                  {
!                     this.hashArray[j] = longhashmap$entry2;
                  }
                  else
                  {
!                     longhashmap$entry.nextEntry = longhashmap$entry2;
                  }
  
!                 return longhashmap$entry1;
              }
  
!             longhashmap$entry = longhashmap$entry1;
          }
  
!         return longhashmap$entry1;
      }
  
      /**
       * creates the key in the hash table
       */
!     private void createKey(int p_76156_1_, long p_76156_2_, Object p_76156_4_, int p_76156_5_)
      {
!         LongHashMap.Entry longhashmap$entry = this.hashArray[p_76156_5_];
!         this.hashArray[p_76156_5_] = new LongHashMap.Entry(p_76156_1_, p_76156_2_, p_76156_4_, longhashmap$entry);
  
          if (this.numHashElements++ >= this.capacity)
          {
***************
*** 228,241 ****
          }
      }
  
!     static class Entry<V>
      {
          final long key;
!         V value;
!         LongHashMap.Entry<V> nextEntry;
          final int hash;
  
!         Entry(int p_i1553_1_, long p_i1553_2_, V p_i1553_4_, LongHashMap.Entry<V> p_i1553_5_)
          {
              this.value = p_i1553_4_;
              this.nextEntry = p_i1553_5_;
--- 235,264 ----
          }
      }
  
!     public double getKeyDistribution()
!     {
!         int i = 0;
! 
!         for (int j = 0; j < this.hashArray.length; ++j)
!         {
!             if (this.hashArray[j] != null)
!             {
!                 ++i;
!             }
!         }
! 
!         return 1.0D * (double)i / (double)this.numHashElements;
!     }
! 
!     static class Entry
      {
          final long key;
!         Object value;
!         LongHashMap.Entry nextEntry;
          final int hash;
+         private static final String __OBFID = "CL_00001493";
  
!         Entry(int p_i1553_1_, long p_i1553_2_, Object p_i1553_4_, LongHashMap.Entry p_i1553_5_)
          {
              this.value = p_i1553_4_;
              this.nextEntry = p_i1553_5_;
***************
*** 248,254 ****
              return this.key;
          }
  
!         public final V getValue()
          {
              return this.value;
          }
--- 271,277 ----
              return this.key;
          }
  
!         public final Object getValue()
          {
              return this.value;
          }
***************
*** 261,276 ****
              }
              else
              {
!                 LongHashMap.Entry<V> entry = (LongHashMap.Entry)p_equals_1_;
!                 Object object = Long.valueOf(this.getKey());
!                 Object object1 = Long.valueOf(entry.getKey());
  
!                 if (object == object1 || object != null && object.equals(object1))
                  {
!                     Object object2 = this.getValue();
!                     Object object3 = entry.getValue();
  
!                     if (object2 == object3 || object2 != null && object2.equals(object3))
                      {
                          return true;
                      }
--- 284,299 ----
              }
              else
              {
!                 LongHashMap.Entry longhashmap$entry = (LongHashMap.Entry)p_equals_1_;
!                 Long olong = Long.valueOf(this.getKey());
!                 Long olong1 = Long.valueOf(longhashmap$entry.getKey());
  
!                 if (olong == olong1 || olong != null && olong.equals(olong1))
                  {
!                     Object object = this.getValue();
!                     Object object1 = longhashmap$entry.getValue();
  
!                     if (object == object1 || object != null && object.equals(object1))
                      {
                          return true;
                      }
diff -rc ./util/MathHelper.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/MathHelper.java
*** ./util/MathHelper.java	2021-04-03 11:27:37.276239000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/MathHelper.java	2019-05-30 22:29:35.582206000 -0700
***************
*** 6,11 ****
--- 6,24 ----
  public class MathHelper
  {
      public static final float SQRT_2 = sqrt_float(2.0F);
+     private static final int SIN_BITS = 12;
+     private static final int SIN_MASK = 4095;
+     private static final int SIN_COUNT = 4096;
+     public static final float PI = (float)Math.PI;
+     public static final float PI2 = ((float)Math.PI * 2F);
+     public static final float PId2 = ((float)Math.PI / 2F);
+     private static final float radFull = ((float)Math.PI * 2F);
+     private static final float degFull = 360.0F;
+     private static final float radToIndex = 651.8986F;
+     private static final float degToIndex = 11.377778F;
+     public static final float deg2Rad = 0.017453292F;
+     private static final float[] SIN_TABLE_FAST = new float[4096];
+     public static boolean fastMath = false;
  
      /**
       * A table of sin values computed from 0 (inclusive) to 2*pi (exclusive), with steps of 2*PI / 65536.
***************
*** 23,35 ****
      private static final double field_181163_d;
      private static final double[] field_181164_e;
      private static final double[] field_181165_f;
  
      /**
       * sin looked up in a table
       */
      public static float sin(float p_76126_0_)
      {
!         return SIN_TABLE[(int)(p_76126_0_ * 10430.378F) & 65535];
      }
  
      /**
--- 36,49 ----
      private static final double field_181163_d;
      private static final double[] field_181164_e;
      private static final double[] field_181165_f;
+     private static final String __OBFID = "CL_00001496";
  
      /**
       * sin looked up in a table
       */
      public static float sin(float p_76126_0_)
      {
!         return fastMath ? SIN_TABLE_FAST[(int)(p_76126_0_ * 651.8986F) & 4095] : SIN_TABLE[(int)(p_76126_0_ * 10430.378F) & 65535];
      }
  
      /**
***************
*** 37,43 ****
       */
      public static float cos(float value)
      {
!         return SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
      }
  
      public static float sqrt_float(float value)
--- 51,57 ----
       */
      public static float cos(float value)
      {
!         return fastMath ? SIN_TABLE_FAST[(int)((value + ((float)Math.PI / 2F)) * 651.8986F) & 4095] : SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
      }
  
      public static float sqrt_float(float value)
***************
*** 360,368 ****
  
      public static int func_180181_b(int p_180181_0_, int p_180181_1_, int p_180181_2_)
      {
!         int lvt_3_1_ = (p_180181_0_ << 8) + p_180181_1_;
!         lvt_3_1_ = (lvt_3_1_ << 8) + p_180181_2_;
!         return lvt_3_1_;
      }
  
      public static int func_180188_d(int p_180188_0_, int p_180188_1_)
--- 374,382 ----
  
      public static int func_180181_b(int p_180181_0_, int p_180181_1_, int p_180181_2_)
      {
!         int i = (p_180181_0_ << 8) + p_180181_1_;
!         i = (i << 8) + p_180181_2_;
!         return i;
      }
  
      public static int func_180188_d(int p_180188_0_, int p_180188_1_)
***************
*** 548,564 ****
              SIN_TABLE[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D);
          }
  
          multiplyDeBruijnBitPosition = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
          field_181163_d = Double.longBitsToDouble(4805340802404319232L);
          field_181164_e = new double[257];
          field_181165_f = new double[257];
  
!         for (int j = 0; j < 257; ++j)
          {
!             double d0 = (double)j / 256.0D;
!             double d1 = Math.asin(d0);
!             field_181165_f[j] = Math.cos(d1);
!             field_181164_e[j] = d1;
          }
      }
  }
--- 562,588 ----
              SIN_TABLE[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D);
          }
  
+         for (int j = 0; j < 4096; ++j)
+         {
+             SIN_TABLE_FAST[j] = (float)Math.sin((double)(((float)j + 0.5F) / 4096.0F * ((float)Math.PI * 2F)));
+         }
+ 
+         for (int l = 0; l < 360; l += 90)
+         {
+             SIN_TABLE_FAST[(int)((float)l * 11.377778F) & 4095] = (float)Math.sin((double)((float)l * 0.017453292F));
+         }
+ 
          multiplyDeBruijnBitPosition = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
          field_181163_d = Double.longBitsToDouble(4805340802404319232L);
          field_181164_e = new double[257];
          field_181165_f = new double[257];
  
!         for (int k = 0; k < 257; ++k)
          {
!             double d1 = (double)k / 256.0D;
!             double d0 = Math.asin(d1);
!             field_181165_f[k] = Math.cos(d0);
!             field_181164_e[k] = d0;
          }
      }
  }
diff -rc ./util/ObjectIntIdentityMap.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/ObjectIntIdentityMap.java
*** ./util/ObjectIntIdentityMap.java	2021-04-03 11:27:37.430936000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/ObjectIntIdentityMap.java	2019-05-30 22:29:35.757106000 -0700
***************
*** 7,42 ****
  import java.util.Iterator;
  import java.util.List;
  
! public class ObjectIntIdentityMap<T> implements IObjectIntIterable<T>
  {
!     private final IdentityHashMap<T, Integer> identityMap = new IdentityHashMap(512);
!     private final List<T> objectList = Lists.<T>newArrayList();
  
!     public void put(T key, int value)
      {
          this.identityMap.put(key, Integer.valueOf(value));
  
          while (this.objectList.size() <= value)
          {
!             this.objectList.add(null);
          }
  
          this.objectList.set(value, key);
      }
  
!     public int get(T key)
      {
          Integer integer = (Integer)this.identityMap.get(key);
          return integer == null ? -1 : integer.intValue();
      }
  
!     public final T getByValue(int value)
      {
!         return (T)(value >= 0 && value < this.objectList.size() ? this.objectList.get(value) : null);
      }
  
!     public Iterator<T> iterator()
      {
          return Iterators.filter(this.objectList.iterator(), Predicates.notNull());
      }
  }
--- 7,48 ----
  import java.util.Iterator;
  import java.util.List;
  
! public class ObjectIntIdentityMap implements IObjectIntIterable
  {
!     private final IdentityHashMap identityMap = new IdentityHashMap(512);
!     private final List objectList = Lists.newArrayList();
!     private static final String __OBFID = "CL_00001203";
  
!     public void put(Object key, int value)
      {
          this.identityMap.put(key, Integer.valueOf(value));
  
          while (this.objectList.size() <= value)
          {
!             this.objectList.add((Object)null);
          }
  
          this.objectList.set(value, key);
      }
  
!     public int get(Object key)
      {
          Integer integer = (Integer)this.identityMap.get(key);
          return integer == null ? -1 : integer.intValue();
      }
  
!     public final Object getByValue(int value)
      {
!         return value >= 0 && value < this.objectList.size() ? this.objectList.get(value) : null;
      }
  
!     public Iterator iterator()
      {
          return Iterators.filter(this.objectList.iterator(), Predicates.notNull());
      }
+ 
+     public List getObjectList()
+     {
+         return this.objectList;
+     }
  }
diff -rc ./util/RegistryNamespaced.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/RegistryNamespaced.java
*** ./util/RegistryNamespaced.java	2021-04-03 11:27:37.454936000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/RegistryNamespaced.java	2019-05-30 22:29:35.778093000 -0700
***************
*** 7,13 ****
  
  public class RegistryNamespaced<K, V> extends RegistrySimple<K, V> implements IObjectIntIterable<V>
  {
!     protected final ObjectIntIdentityMap<V> underlyingIntegerMap = new ObjectIntIdentityMap();
      protected final Map<V, K> inverseObjectRegistry;
  
      public RegistryNamespaced()
--- 7,13 ----
  
  public class RegistryNamespaced<K, V> extends RegistrySimple<K, V> implements IObjectIntIterable<V>
  {
!     protected final ObjectIntIdentityMap underlyingIntegerMap = new ObjectIntIdentityMap();
      protected final Map<V, K> inverseObjectRegistry;
  
      public RegistryNamespaced()
diff -rc ./util/StringTranslate.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/StringTranslate.java
*** ./util/StringTranslate.java	2021-04-03 11:27:37.572532000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/util/StringTranslate.java	2019-05-30 22:29:35.904021000 -0700
***************
*** 72,77 ****
--- 72,78 ----
      /**
       * Replaces all the current instance's translations with the ones that are passed in.
       */
+ 
      public static synchronized void replaceWith(Map<String, String> p_135063_0_)
      {
          instance.languageList.clear();
***************
*** 82,87 ****
--- 83,89 ----
      /**
       * Translate a key to current language.
       */
+ 
      public synchronized String translateKey(String key)
      {
          return this.tryTranslateKey(key);
***************
*** 90,95 ****
--- 92,98 ----
      /**
       * Translate a key to current language applying String.format()
       */
+ 
      public synchronized String translateKeyFormat(String key, Object... format)
      {
          String s = this.tryTranslateKey(key);
***************
*** 116,121 ****
--- 119,125 ----
      /**
       * Returns true if the passed key is in the translation table.
       */
+ 
      public synchronized boolean isKeyTranslated(String key)
      {
          return this.languageList.containsKey(key);
diff -rc ./world/biome/BiomeCache.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/biome/BiomeCache.java
*** ./world/biome/BiomeCache.java	2021-04-03 11:27:38.106260000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/biome/BiomeCache.java	2019-05-30 22:29:36.501676000 -0700
***************
*** 12,18 ****
  
      /** The last time this BiomeCache was cleaned, in milliseconds. */
      private long lastCleanupTime;
!     private LongHashMap<BiomeCache.Block> cacheMap = new LongHashMap();
      private List<BiomeCache.Block> cache = Lists.<BiomeCache.Block>newArrayList();
  
      public BiomeCache(WorldChunkManager chunkManagerIn)
--- 12,18 ----
  
      /** The last time this BiomeCache was cleaned, in milliseconds. */
      private long lastCleanupTime;
!     private LongHashMap cacheMap = new LongHashMap();
      private List<BiomeCache.Block> cache = Lists.<BiomeCache.Block>newArrayList();
  
      public BiomeCache(WorldChunkManager chunkManagerIn)
diff -rc ./world/chunk/Chunk.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/Chunk.java
*** ./world/chunk/Chunk.java	2021-04-03 11:27:38.364225000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/Chunk.java	2019-05-30 22:29:36.876461000 -0700
***************
*** 337,352 ****
                          int i1 = this.zPosition * 16 + j;
                          int j1 = Integer.MAX_VALUE;
  
!                         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                          {
!                             j1 = Math.min(j1, this.worldObj.getChunksLowestHorizon(l + enumfacing.getFrontOffsetX(), i1 + enumfacing.getFrontOffsetZ()));
                          }
  
                          this.checkSkylightNeighborHeight(l, i1, j1);
  
!                         for (EnumFacing enumfacing1 : EnumFacing.Plane.HORIZONTAL)
                          {
!                             this.checkSkylightNeighborHeight(l + enumfacing1.getFrontOffsetX(), i1 + enumfacing1.getFrontOffsetZ(), k);
                          }
  
                          if (p_150803_1_)
--- 337,352 ----
                          int i1 = this.zPosition * 16 + j;
                          int j1 = Integer.MAX_VALUE;
  
!                         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                          {
!                             j1 = Math.min(j1, this.worldObj.getChunksLowestHorizon(l + ((EnumFacing) enumfacing).getFrontOffsetX(), i1 + ((EnumFacing) enumfacing).getFrontOffsetZ()));
                          }
  
                          this.checkSkylightNeighborHeight(l, i1, j1);
  
!                         for (Object enumfacing1 : EnumFacing.Plane.HORIZONTAL)
                          {
!                             this.checkSkylightNeighborHeight(l + ((EnumFacing) enumfacing1).getFrontOffsetX(), i1 + ((EnumFacing) enumfacing1).getFrontOffsetZ(), k);
                          }
  
                          if (p_150803_1_)
***************
*** 493,501 ****
  
              if (!this.worldObj.provider.getHasNoSky())
              {
!                 for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     this.updateSkylightNeighborHeight(k + enumfacing.getFrontOffsetX(), l + enumfacing.getFrontOffsetZ(), j2, k2);
                  }
  
                  this.updateSkylightNeighborHeight(k, l, j2, k2);
--- 493,501 ----
  
              if (!this.worldObj.provider.getHasNoSky())
              {
!                 for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                  {
!                     this.updateSkylightNeighborHeight(k + ((EnumFacing) enumfacing).getFrontOffsetX(), l + ((EnumFacing) enumfacing).getFrontOffsetZ(), j2, k2);
                  }
  
                  this.updateSkylightNeighborHeight(k, l, j2, k2);
***************
*** 1501,1510 ****
  
                  if (this.isLightPopulated)
                  {
!                     for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                      {
!                         int k = enumfacing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? 16 : 1;
!                         this.worldObj.getChunkFromBlockCoords(blockpos.offset(enumfacing, k)).func_180700_a(enumfacing.getOpposite());
                      }
  
                      this.func_177441_y();
--- 1501,1510 ----
  
                  if (this.isLightPopulated)
                  {
!                     for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                      {
!                         int k = ((EnumFacing) enumfacing).getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? 16 : 1;
!                         this.worldObj.getChunkFromBlockCoords(blockpos.offset((EnumFacing) enumfacing, k)).func_180700_a(((EnumFacing) enumfacing).getOpposite());
                      }
  
                      this.func_177441_y();
diff -rc ./world/chunk/storage/ExtendedBlockStorage.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/ExtendedBlockStorage.java
*** ./world/chunk/storage/ExtendedBlockStorage.java	2021-04-03 11:27:38.505222000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/ExtendedBlockStorage.java	2019-05-30 22:29:37.011384000 -0700
***************
*** 1,9 ****
--- 1,11 ----
  package net.minecraft.world.chunk.storage;
  
+ import java.util.List;
  import net.minecraft.block.Block;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.init.Blocks;
  import net.minecraft.world.chunk.NibbleArray;
+ import optifine.Reflector;
  
  public class ExtendedBlockStorage
  {
***************
*** 29,34 ****
--- 31,37 ----
  
      /** The NibbleArray containing a block of Sky-light data. */
      private NibbleArray skylightArray;
+     private static final String __OBFID = "CL_00000375";
  
      public ExtendedBlockStorage(int y, boolean storeSkylight)
      {
***************
*** 50,55 ****
--- 53,63 ----
  
      public void set(int x, int y, int z, IBlockState state)
      {
+         if (Reflector.IExtendedBlockState.isInstance(state))
+         {
+             state = (IBlockState)Reflector.call(state, Reflector.IExtendedBlockState_getClean, new Object[0]);
+         }
+ 
          IBlockState iblockstate = this.get(x, y, z);
          Block block = iblockstate.getBlock();
          Block block1 = state.getBlock();
***************
*** 154,182 ****
  
      public void removeInvalidBlocks()
      {
!         this.blockRefCount = 0;
!         this.tickRefCount = 0;
  
!         for (int i = 0; i < 16; ++i)
          {
!             for (int j = 0; j < 16; ++j)
              {
!                 for (int k = 0; k < 16; ++k)
                  {
!                     Block block = this.getBlockByExtId(i, j, k);
  
!                     if (block != Blocks.air)
                      {
!                         ++this.blockRefCount;
  
!                         if (block.getTickRandomly())
                          {
!                             ++this.tickRefCount;
                          }
                      }
                  }
              }
          }
      }
  
      public char[] getData()
--- 162,209 ----
  
      public void removeInvalidBlocks()
      {
!         List list = Block.BLOCK_STATE_IDS.getObjectList();
!         int i = list.size();
!         int j = 0;
!         int k = 0;
  
!         for (int l = 0; l < 16; ++l)
          {
!             int i1 = l << 8;
! 
!             for (int j1 = 0; j1 < 16; ++j1)
              {
!                 int k1 = i1 | j1 << 4;
! 
!                 for (int l1 = 0; l1 < 16; ++l1)
                  {
!                     int i2 = this.data[k1 | l1];
  
!                     if (i2 > 0)
                      {
!                         ++j;
  
!                         if (i2 < i)
                          {
!                             IBlockState iblockstate = (IBlockState)list.get(i2);
! 
!                             if (iblockstate != null)
!                             {
!                                 Block block = iblockstate.getBlock();
! 
!                                 if (block.getTickRandomly())
!                                 {
!                                     ++k;
!                                 }
!                             }
                          }
                      }
                  }
              }
          }
+ 
+         this.blockRefCount = j;
+         this.tickRefCount = k;
      }
  
      public char[] getData()
diff -rc ./world/chunk/storage/RegionFile.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/RegionFile.java
*** ./world/chunk/storage/RegionFile.java	2021-04-03 11:27:38.533223000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/RegionFile.java	2019-05-30 22:29:37.040367000 -0700
***************
*** 106,111 ****
--- 106,112 ----
      /**
       * Returns an uncompressed chunk stream from the region file.
       */
+ 
      public synchronized DataInputStream getChunkDataInputStream(int x, int z)
      {
          if (this.outOfBounds(x, z))
***************
*** 186,191 ****
--- 187,193 ----
      /**
       * args: x, z, data, length - write chunk data at (x, z) to disk
       */
+ 
      protected synchronized void write(int x, int z, byte[] data, int length)
      {
          try
diff -rc ./world/chunk/storage/RegionFileCache.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/RegionFileCache.java
*** ./world/chunk/storage/RegionFileCache.java	2021-04-03 11:27:38.550222000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/chunk/storage/RegionFileCache.java	2019-05-30 22:29:37.056359000 -0700
***************
*** 42,47 ****
--- 42,48 ----
      /**
       * clears region file references
       */
+ 
      public static synchronized void clearRegionFileReferences()
      {
          for (RegionFile regionfile : regionsByFilename.values())
diff -rc ./world/ChunkCoordIntPair.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/ChunkCoordIntPair.java
*** ./world/ChunkCoordIntPair.java	2021-04-03 11:27:37.782369000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/ChunkCoordIntPair.java	2019-05-30 22:29:36.166869000 -0700
***************
*** 9,14 ****
--- 9,16 ----
  
      /** The Z position of this Chunk Coordinate Pair */
      public final int chunkZPos;
+     private static final String __OBFID = "CL_00000133";
+     private int cachedHashCode = 0;
  
      public ChunkCoordIntPair(int x, int z)
      {
***************
*** 26,34 ****
  
      public int hashCode()
      {
!         int i = 1664525 * this.chunkXPos + 1013904223;
!         int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
!         return i ^ j;
      }
  
      public boolean equals(Object p_equals_1_)
--- 28,41 ----
  
      public int hashCode()
      {
!         if (this.cachedHashCode == 0)
!         {
!             int i = 1664525 * this.chunkXPos + 1013904223;
!             int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
!             this.cachedHashCode = i ^ j;
!         }
! 
!         return this.cachedHashCode;
      }
  
      public boolean equals(Object p_equals_1_)
diff -rc ./world/GameRules.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/GameRules.java
*** ./world/GameRules.java	2021-04-03 11:27:37.851370000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/GameRules.java	2019-05-30 22:29:36.232831000 -0700
***************
*** 6,12 ****
  
  public class GameRules
  {
!     private TreeMap<String, GameRules.Value> theGameRules = new TreeMap();
  
      public GameRules()
      {
--- 6,13 ----
  
  public class GameRules
  {
!     private TreeMap theGameRules = new TreeMap();
!     private static final String __OBFID = "CL_00000136";
  
      public GameRules()
      {
***************
*** 77,86 ****
      {
          NBTTagCompound nbttagcompound = new NBTTagCompound();
  
!         for (String s : this.theGameRules.keySet())
          {
              GameRules.Value gamerules$value = (GameRules.Value)this.theGameRules.get(s);
!             nbttagcompound.setString(s, gamerules$value.getString());
          }
  
          return nbttagcompound;
--- 78,87 ----
      {
          NBTTagCompound nbttagcompound = new NBTTagCompound();
  
!         for (Object s : this.theGameRules.keySet())
          {
              GameRules.Value gamerules$value = (GameRules.Value)this.theGameRules.get(s);
!             nbttagcompound.setString((String) s, gamerules$value.getString());
          }
  
          return nbttagcompound;
***************
*** 103,110 ****
       */
      public String[] getRules()
      {
!         Set<String> set = this.theGameRules.keySet();
!         return (String[])set.toArray(new String[set.size()]);
      }
  
      /**
--- 104,111 ----
       */
      public String[] getRules()
      {
!         Set set = this.theGameRules.keySet();
!         return (String[])((String[])set.toArray(new String[set.size()]));
      }
  
      /**
***************
*** 128,133 ****
--- 129,135 ----
          private int valueInteger;
          private double valueDouble;
          private final GameRules.ValueType type;
+         private static final String __OBFID = "CL_00000137";
  
          public Value(String value, GameRules.ValueType type)
          {
***************
*** 138,143 ****
--- 140,161 ----
          public void setValue(String value)
          {
              this.valueString = value;
+ 
+             if (value != null)
+             {
+                 if (value.equals("false"))
+                 {
+                     this.valueBoolean = false;
+                     return;
+                 }
+ 
+                 if (value.equals("true"))
+                 {
+                     this.valueBoolean = true;
+                     return;
+                 }
+             }
+ 
              this.valueBoolean = Boolean.parseBoolean(value);
              this.valueInteger = this.valueBoolean ? 1 : 0;
  
***************
*** 183,190 ****
  
      public static enum ValueType
      {
!         ANY_VALUE,
!         BOOLEAN_VALUE,
!         NUMERICAL_VALUE;
      }
  }
--- 201,215 ----
  
      public static enum ValueType
      {
!         ANY_VALUE("ANY_VALUE", 0),
!         BOOLEAN_VALUE("BOOLEAN_VALUE", 1),
!         NUMERICAL_VALUE("NUMERICAL_VALUE", 2);
! 
!         private static final GameRules.ValueType[] $VALUES = new GameRules.ValueType[]{ANY_VALUE, BOOLEAN_VALUE, NUMERICAL_VALUE};
!         private static final String __OBFID = "CL_00002151";
! 
!         private ValueType(String p_i19_3_, int p_i19_4_)
!         {
!         }
      }
  }
diff -rc ./world/gen/ChunkProviderServer.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/ChunkProviderServer.java
*** ./world/gen/ChunkProviderServer.java	2021-04-03 11:27:38.641322000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/ChunkProviderServer.java	2019-05-30 22:29:37.166295000 -0700
***************
*** 44,50 ****
       * possible
       */
      public boolean chunkLoadOverride = true;
!     private LongHashMap<Chunk> id2ChunkMap = new LongHashMap();
      private List<Chunk> loadedChunks = Lists.<Chunk>newArrayList();
      private WorldServer worldObj;
  
--- 44,50 ----
       * possible
       */
      public boolean chunkLoadOverride = true;
!     private LongHashMap id2ChunkMap = new LongHashMap();
      private List<Chunk> loadedChunks = Lists.<Chunk>newArrayList();
      private WorldServer worldObj;
  
diff -rc ./world/gen/feature/WorldGenDesertWells.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenDesertWells.java
*** ./world/gen/feature/WorldGenDesertWells.java	2021-04-03 11:27:38.854292000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenDesertWells.java	2019-05-30 22:29:37.596047000 -0700
***************
*** 56,64 ****
  
              worldIn.setBlockState(position, this.field_175910_d, 2);
  
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 worldIn.setBlockState(position.offset(enumfacing), this.field_175910_d, 2);
              }
  
              for (int i1 = -2; i1 <= 2; ++i1)
--- 56,64 ----
  
              worldIn.setBlockState(position, this.field_175910_d, 2);
  
!             for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
!                 worldIn.setBlockState(position.offset((EnumFacing) enumfacing), this.field_175910_d, 2);
              }
  
              for (int i1 = -2; i1 <= 2; ++i1)
diff -rc ./world/gen/feature/WorldGenDungeons.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenDungeons.java
*** ./world/gen/feature/WorldGenDungeons.java	2021-04-03 11:27:38.873340000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenDungeons.java	2019-05-30 22:29:37.663010000 -0700
***************
*** 112,120 ****
                      {
                          int j3 = 0;
  
!                         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                          {
!                             if (worldIn.getBlockState(blockpos2.offset(enumfacing)).getBlock().getMaterial().isSolid())
                              {
                                  ++j3;
                              }
--- 112,120 ----
                      {
                          int j3 = 0;
  
!                         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                          {
!                             if (worldIn.getBlockState(blockpos2.offset((EnumFacing) enumfacing)).getBlock().getMaterial().isSolid())
                              {
                                  ++j3;
                              }
diff -rc ./world/gen/feature/WorldGenTrees.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenTrees.java
*** ./world/gen/feature/WorldGenTrees.java	2021-04-03 11:27:39.112607000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/feature/WorldGenTrees.java	2019-05-30 22:29:38.257667000 -0700
***************
*** 212,223 ****
                          {
                              for (int l3 = 0; l3 < 2; ++l3)
                              {
!                                 for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
                                  {
                                      if (rand.nextInt(4 - l3) == 0)
                                      {
!                                         EnumFacing enumfacing1 = enumfacing.getOpposite();
!                                         this.func_181652_a(worldIn, rand.nextInt(3), position.add(enumfacing1.getFrontOffsetX(), i - 5 + l3, enumfacing1.getFrontOffsetZ()), enumfacing);
                                      }
                                  }
                              }
--- 212,223 ----
                          {
                              for (int l3 = 0; l3 < 2; ++l3)
                              {
!                                 for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
                                  {
                                      if (rand.nextInt(4 - l3) == 0)
                                      {
!                                         EnumFacing enumfacing1 = ((EnumFacing) enumfacing).getOpposite();
!                                         this.func_181652_a(worldIn, rand.nextInt(3), position.add(enumfacing1.getFrontOffsetX(), i - 5 + l3, enumfacing1.getFrontOffsetZ()), (EnumFacing) enumfacing);
                                      }
                                  }
                              }
diff -rc ./world/gen/layer/IntCache.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/layer/IntCache.java
*** ./world/gen/layer/IntCache.java	2021-04-03 11:27:39.316387000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/layer/IntCache.java	2019-05-30 22:29:38.641340000 -0700
***************
*** 54,59 ****
--- 54,60 ----
      /**
       * Mark all pre-allocated arrays as available for re-use by moving them to the appropriate free lists.
       */
+ 
      public static synchronized void resetIntCache()
      {
          if (!freeLargeArrays.isEmpty())
***************
*** 76,81 ****
--- 77,83 ----
       * Gets a human-readable string that indicates the sizes of all the cache fields.  Basically a synchronized static
       * toString.
       */
+ 
      public static synchronized String getCacheSizes()
      {
          return "cache: " + freeLargeArrays.size() + ", tcache: " + freeSmallArrays.size() + ", allocated: " + inUseLargeArrays.size() + ", tallocated: " + inUseSmallArrays.size();
diff -rc ./world/gen/structure/ComponentScatteredFeaturePieces.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
*** ./world/gen/structure/ComponentScatteredFeaturePieces.java	2021-04-03 11:27:39.327388000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java	2019-05-30 22:29:38.665325000 -0700
***************
*** 252,259 ****
              this.setBlockState(worldIn, Blocks.sandstone.getStateFromMeta(BlockSandStone.EnumType.CHISELED.getMetadata()), 10, -10, 13, structureBoundingBoxIn);
              this.setBlockState(worldIn, Blocks.sandstone.getStateFromMeta(BlockSandStone.EnumType.SMOOTH.getMetadata()), 10, -11, 13, structureBoundingBoxIn);
  
!             for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
              {
                  if (!this.field_74940_h[enumfacing.getHorizontalIndex()])
                  {
                      int l1 = enumfacing.getFrontOffsetX() * 2;
--- 252,261 ----
              this.setBlockState(worldIn, Blocks.sandstone.getStateFromMeta(BlockSandStone.EnumType.CHISELED.getMetadata()), 10, -10, 13, structureBoundingBoxIn);
              this.setBlockState(worldIn, Blocks.sandstone.getStateFromMeta(BlockSandStone.EnumType.SMOOTH.getMetadata()), 10, -11, 13, structureBoundingBoxIn);
  
!             for (Object enumfacing0 : EnumFacing.Plane.HORIZONTAL)
              {
+                 EnumFacing enumfacing = (EnumFacing) enumfacing0;
+ 
                  if (!this.field_74940_h[enumfacing.getHorizontalIndex()])
                  {
                      int l1 = enumfacing.getFrontOffsetX() * 2;
diff -rc ./world/gen/structure/MapGenStructure.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/structure/MapGenStructure.java
*** ./world/gen/structure/MapGenStructure.java	2021-04-03 11:27:39.372388000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/gen/structure/MapGenStructure.java	2019-05-30 22:29:38.751277000 -0700
***************
*** 11,26 ****
  import net.minecraft.nbt.NBTBase;
  import net.minecraft.nbt.NBTTagCompound;
  import net.minecraft.util.BlockPos;
  import net.minecraft.util.ReportedException;
  import net.minecraft.world.ChunkCoordIntPair;
  import net.minecraft.world.World;
  import net.minecraft.world.chunk.ChunkPrimer;
  import net.minecraft.world.gen.MapGenBase;
  
  public abstract class MapGenStructure extends MapGenBase
  {
      private MapGenStructureData structureData;
!     protected Map<Long, StructureStart> structureMap = Maps.<Long, StructureStart>newHashMap();
  
      public abstract String getStructureName();
  
--- 11,38 ----
  import net.minecraft.nbt.NBTBase;
  import net.minecraft.nbt.NBTTagCompound;
  import net.minecraft.util.BlockPos;
+ import net.minecraft.util.LongHashMap;
  import net.minecraft.util.ReportedException;
+ import net.minecraft.util.Vec3i;
  import net.minecraft.world.ChunkCoordIntPair;
  import net.minecraft.world.World;
  import net.minecraft.world.chunk.ChunkPrimer;
  import net.minecraft.world.gen.MapGenBase;
+ import net.minecraft.world.storage.MapStorage;
+ import optifine.Reflector;
  
  public abstract class MapGenStructure extends MapGenBase
  {
      private MapGenStructureData structureData;
! 
!     /**
!      * Used to store a list of all structures that have been recursively generated. Used so that during recursive
!      * generation, the structure generator can avoid generating structures that intersect ones that have already been
!      * placed.
!      */
!     protected Map structureMap = Maps.newHashMap();
!     private static final String __OBFID = "CL_00000505";
!     private LongHashMap structureLongMap = new LongHashMap();
  
      public abstract String getStructureName();
  
***************
*** 31,37 ****
      {
          this.func_143027_a(worldIn);
  
!         if (!this.structureMap.containsKey(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ))))
          {
              this.rand.nextInt();
  
--- 43,49 ----
      {
          this.func_143027_a(worldIn);
  
!         if (!this.structureLongMap.containsItem(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ)))
          {
              this.rand.nextInt();
  
***************
*** 41,46 ****
--- 53,59 ----
                  {
                      StructureStart structurestart = this.getStructureStart(chunkX, chunkZ);
                      this.structureMap.put(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ)), structurestart);
+                     this.structureLongMap.add(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ), structurestart);
                      this.func_143026_a(chunkX, chunkZ, structurestart);
                  }
              }
***************
*** 48,70 ****
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception preparing structure feature");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Feature being prepared");
!                 crashreportcategory.addCrashSectionCallable("Is feature chunk", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return MapGenStructure.this.canSpawnStructureAtCoords(chunkX, chunkZ) ? "True" : "False";
                      }
                  });
                  crashreportcategory.addCrashSection("Chunk location", String.format("%d,%d", new Object[] {Integer.valueOf(chunkX), Integer.valueOf(chunkZ)}));
!                 crashreportcategory.addCrashSectionCallable("Chunk pos hash", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return String.valueOf(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ));
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Structure type", new Callable<String>()
                  {
                      public String call() throws Exception
                      {
                          return MapGenStructure.this.getClass().getCanonicalName();
--- 61,86 ----
              {
                  CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception preparing structure feature");
                  CrashReportCategory crashreportcategory = crashreport.makeCategory("Feature being prepared");
!                 crashreportcategory.addCrashSectionCallable("Is feature chunk", new Callable()
                  {
+                     private static final String __OBFID = "CL_00000506";
                      public String call() throws Exception
                      {
                          return MapGenStructure.this.canSpawnStructureAtCoords(chunkX, chunkZ) ? "True" : "False";
                      }
                  });
                  crashreportcategory.addCrashSection("Chunk location", String.format("%d,%d", new Object[] {Integer.valueOf(chunkX), Integer.valueOf(chunkZ)}));
!                 crashreportcategory.addCrashSectionCallable("Chunk pos hash", new Callable()
                  {
+                     private static final String __OBFID = "CL_00000507";
                      public String call() throws Exception
                      {
                          return String.valueOf(ChunkCoordIntPair.chunkXZ2Int(chunkX, chunkZ));
                      }
                  });
!                 crashreportcategory.addCrashSectionCallable("Structure type", new Callable()
                  {
+                     private static final String __OBFID = "CL_00000508";
                      public String call() throws Exception
                      {
                          return MapGenStructure.this.getClass().getCanonicalName();
***************
*** 82,89 ****
          int j = (chunkCoord.chunkZPos << 4) + 8;
          boolean flag = false;
  
!         for (StructureStart structurestart : this.structureMap.values())
          {
              if (structurestart.isSizeableStructure() && structurestart.func_175788_a(chunkCoord) && structurestart.getBoundingBox().intersectsWith(i, j, i + 15, j + 15))
              {
                  structurestart.generateStructure(worldIn, randomIn, new StructureBoundingBox(i, j, i + 15, j + 15));
--- 98,107 ----
          int j = (chunkCoord.chunkZPos << 4) + 8;
          boolean flag = false;
  
!         for (Object structurestart0 : this.structureMap.values())
          {
+             StructureStart structurestart = (StructureStart) structurestart0;
+ 
              if (structurestart.isSizeableStructure() && structurestart.func_175788_a(chunkCoord) && structurestart.getBoundingBox().intersectsWith(i, j, i + 15, j + 15))
              {
                  structurestart.generateStructure(worldIn, randomIn, new StructureBoundingBox(i, j, i + 15, j + 15));
***************
*** 106,116 ****
      {
          label24:
  
!         for (StructureStart structurestart : this.structureMap.values())
          {
              if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
              {
!                 Iterator<StructureComponent> iterator = structurestart.getComponents().iterator();
  
                  while (true)
                  {
--- 124,136 ----
      {
          label24:
  
!         for (Object structurestart0 : this.structureMap.values())
          {
+             StructureStart structurestart = (StructureStart)structurestart0;
+ 
              if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
              {
!                 Iterator iterator = structurestart.getComponents().iterator();
  
                  while (true)
                  {
***************
*** 138,145 ****
      {
          this.func_143027_a(worldIn);
  
!         for (StructureStart structurestart : this.structureMap.values())
          {
              if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
              {
                  return true;
--- 158,167 ----
      {
          this.func_143027_a(worldIn);
  
!         for (Object structurestart0 : this.structureMap.values())
          {
+             StructureStart structurestart = (StructureStart)structurestart0;
+ 
              if (structurestart.isSizeableStructure() && structurestart.getBoundingBox().isVecInside(pos))
              {
                  return true;
***************
*** 163,170 ****
          double d0 = Double.MAX_VALUE;
          BlockPos blockpos = null;
  
!         for (StructureStart structurestart : this.structureMap.values())
          {
              if (structurestart.isSizeableStructure())
              {
                  StructureComponent structurecomponent = (StructureComponent)structurestart.getComponents().get(0);
--- 185,194 ----
          double d0 = Double.MAX_VALUE;
          BlockPos blockpos = null;
  
!         for (Object structurestart0 : this.structureMap.values())
          {
+             StructureStart structurestart = (StructureStart)structurestart0;
+ 
              if (structurestart.isSizeableStructure())
              {
                  StructureComponent structurecomponent = (StructureComponent)structurestart.getComponents().get(0);
***************
*** 185,208 ****
          }
          else
          {
!             List<BlockPos> list = this.getCoordList();
  
              if (list != null)
              {
!                 BlockPos blockpos2 = null;
  
!                 for (BlockPos blockpos3 : list)
                  {
!                     double d2 = blockpos3.distanceSq(pos);
  
                      if (d2 < d0)
                      {
                          d0 = d2;
!                         blockpos2 = blockpos3;
                      }
                  }
  
!                 return blockpos2;
              }
              else
              {
--- 209,232 ----
          }
          else
          {
!             List list = this.getCoordList();
  
              if (list != null)
              {
!                 BlockPos blockpos3 = null;
  
!                 for (Object blockpos2 : list)
                  {
!                     double d2 = ((BlockPos) blockpos2).distanceSq(pos);
  
                      if (d2 < d0)
                      {
                          d0 = d2;
!                         blockpos3 = (BlockPos) blockpos2;
                      }
                  }
  
!                 return blockpos3;
              }
              else
              {
***************
*** 211,217 ****
          }
      }
  
!     protected List<BlockPos> getCoordList()
      {
          return null;
      }
--- 235,245 ----
          }
      }
  
!     /**
!      * Returns a list of other locations at which the structure generation has been run, or null if not relevant to this
!      * structure generator.
!      */
!     protected List getCoordList()
      {
          return null;
      }
***************
*** 220,253 ****
      {
          if (this.structureData == null)
          {
!             this.structureData = (MapGenStructureData)worldIn.loadItemData(MapGenStructureData.class, this.getStructureName());
  
              if (this.structureData == null)
              {
                  this.structureData = new MapGenStructureData(this.getStructureName());
!                 worldIn.setItemData(this.getStructureName(), this.structureData);
              }
              else
              {
!                 NBTTagCompound nbttagcompound = this.structureData.getTagCompound();
  
!                 for (String s : nbttagcompound.getKeySet())
                  {
!                     NBTBase nbtbase = nbttagcompound.getTag(s);
  
                      if (nbtbase.getId() == 10)
                      {
!                         NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbtbase;
  
!                         if (nbttagcompound1.hasKey("ChunkX") && nbttagcompound1.hasKey("ChunkZ"))
                          {
!                             int i = nbttagcompound1.getInteger("ChunkX");
!                             int j = nbttagcompound1.getInteger("ChunkZ");
!                             StructureStart structurestart = MapGenStructureIO.getStructureStart(nbttagcompound1, worldIn);
  
                              if (structurestart != null)
                              {
                                  this.structureMap.put(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(i, j)), structurestart);
                              }
                          }
                      }
--- 248,299 ----
      {
          if (this.structureData == null)
          {
!             if (Reflector.ForgeWorld_getPerWorldStorage.exists())
!             {
!                 MapStorage mapstorage = (MapStorage)Reflector.call(worldIn, Reflector.ForgeWorld_getPerWorldStorage, new Object[0]);
!                 this.structureData = (MapGenStructureData)mapstorage.loadData(MapGenStructureData.class, this.getStructureName());
!             }
!             else
!             {
!                 this.structureData = (MapGenStructureData)worldIn.loadItemData(MapGenStructureData.class, this.getStructureName());
!             }
  
              if (this.structureData == null)
              {
                  this.structureData = new MapGenStructureData(this.getStructureName());
! 
!                 if (Reflector.ForgeWorld_getPerWorldStorage.exists())
!                 {
!                     MapStorage mapstorage1 = (MapStorage)Reflector.call(worldIn, Reflector.ForgeWorld_getPerWorldStorage, new Object[0]);
!                     mapstorage1.setData(this.getStructureName(), this.structureData);
!                 }
!                 else
!                 {
!                     worldIn.setItemData(this.getStructureName(), this.structureData);
!                 }
              }
              else
              {
!                 NBTTagCompound nbttagcompound1 = this.structureData.getTagCompound();
  
!                 for (String s : nbttagcompound1.getKeySet())
                  {
!                     NBTBase nbtbase = nbttagcompound1.getTag(s);
  
                      if (nbtbase.getId() == 10)
                      {
!                         NBTTagCompound nbttagcompound = (NBTTagCompound)nbtbase;
  
!                         if (nbttagcompound.hasKey("ChunkX") && nbttagcompound.hasKey("ChunkZ"))
                          {
!                             int i = nbttagcompound.getInteger("ChunkX");
!                             int j = nbttagcompound.getInteger("ChunkZ");
!                             StructureStart structurestart = MapGenStructureIO.getStructureStart(nbttagcompound, worldIn);
  
                              if (structurestart != null)
                              {
                                  this.structureMap.put(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(i, j)), structurestart);
+                                 this.structureLongMap.add(ChunkCoordIntPair.chunkXZ2Int(i, j), structurestart);
                              }
                          }
                      }
diff -rc ./world/Teleporter.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/Teleporter.java
*** ./world/Teleporter.java	2021-04-03 11:27:37.959390000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/Teleporter.java	2019-05-30 22:29:36.333772000 -0700
***************
*** 20,26 ****
  
      /** A private Random() function in Teleporter */
      private final Random random;
!     private final LongHashMap<Teleporter.PortalPosition> destinationCoordinateCache = new LongHashMap();
      private final List<Long> destinationCoordinateKeys = Lists.<Long>newArrayList();
  
      public Teleporter(WorldServer worldIn)
--- 20,26 ----
  
      /** A private Random() function in Teleporter */
      private final Random random;
!     private final LongHashMap destinationCoordinateCache = new LongHashMap();
      private final List<Long> destinationCoordinateKeys = Lists.<Long>newArrayList();
  
      public Teleporter(WorldServer worldIn)
diff -rc ./world/World.java C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/World.java
*** ./world/World.java	2021-04-03 11:27:37.978386000 -0700
--- C:\Users\eric\Desktop\Client Tutorial Notes\SimpClientAprilFools2021\src\minecraft\net\minecraft/world/World.java	2019-05-30 22:29:36.351764000 -0700
***************
*** 3765,3773 ****
  
      public void updateComparatorOutputLevel(BlockPos pos, Block blockIn)
      {
!         for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset(enumfacing);
  
              if (this.isBlockLoaded(blockpos))
              {
--- 3765,3773 ----
  
      public void updateComparatorOutputLevel(BlockPos pos, Block blockIn)
      {
!         for (Object enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset((EnumFacing) enumfacing);
  
              if (this.isBlockLoaded(blockpos))
              {
***************
*** 3779,3785 ****
                  }
                  else if (iblockstate.getBlock().isNormalCube())
                  {
!                     blockpos = blockpos.offset(enumfacing);
                      iblockstate = this.getBlockState(blockpos);
  
                      if (Blocks.unpowered_comparator.isAssociated(iblockstate.getBlock()))
--- 3779,3785 ----
                  }
                  else if (iblockstate.getBlock().isNormalCube())
                  {
!                     blockpos = blockpos.offset((EnumFacing) enumfacing);
                      iblockstate = this.getBlockState(blockpos);
  
                      if (Blocks.unpowered_comparator.isAssociated(iblockstate.getBlock()))
